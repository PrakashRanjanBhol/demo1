<div class="buttons">
    <button (click)="loadChartData('daily')" [class.active]="activeView==='daily'">Daily</button>
    <button (click)="loadChartData('weekly')" [class.active]="activeView==='weekly'">Weekly</button>
    <button (click)="loadChartData('monthly')" [class.active]="activeView==='monthly'">Monthly</button>
    <button (click)="loadChartData('yearly')" [class.active]="activeView==='yearly'">Yearly</button>
</div>

<div #chartContainer class="chart"></div>


.buttons {
  display: flex;
  gap: 0.5rem;
  margin-bottom: 1rem;
}
button.active {
  background-color: #007ad9;
  color: white;
}
.chart {
  width: 100%;
  height: 400px;
}









import {
  Component,
  ElementRef,
  ViewChild,
  AfterViewInit,
} from '@angular/core';
import * as echarts from 'echarts';
import { EChartsOption } from 'echarts';

@Component({
  selector: 'app-charts',
  templateUrl: './charts.component.html',
  styleUrls: ['./charts.component.scss'],
})
export class ChartsComponent implements AfterViewInit {
  @ViewChild('chartContainer', { static: true }) chartContainer!: ElementRef;
  chartInstance!: echarts.ECharts;
  activeView: 'daily' | 'weekly' | 'monthly' | 'yearly' = 'daily';

  ngAfterViewInit() {
    this.chartInstance = echarts.init(this.chartContainer.nativeElement);
    this.loadChartData(this.activeView);
  }

  // Dummy API simulation
  getDummyApiResponse(view: string) {
    switch (view) {
      case 'daily':
        return {
          labels: this.getLastNDays(7),
          data: {
            Java: [120, 200, 150, 80, 70, 110, 130],
            Angular: [90, 180, 100, 140, 60, 90, 120],
            Python: [50, 90, 70, 120, 130, 100, 150],
            All: [260, 470, 320, 340, 260, 300, 400],
          },
        };
      case 'weekly':
        return {
          labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
          data: {
            Java: [600, 800, 750, 900],
            Angular: [500, 700, 600, 800],
            Python: [300, 500, 400, 600],
            All: [1400, 2000, 1750, 2300],
          },
        };
      case 'monthly':
        return {
          labels: this.getLastNMonths(6),
          data: {
            Java: [2200, 2400, 2600, 2800, 3000, 3200],
            Angular: [1800, 2000, 2200, 2500, 2700, 2900],
            Python: [1200, 1300, 1400, 1500, 1600, 1700],
            All: [5200, 5700, 6200, 6800, 7300, 7800],
          },
        };
      case 'yearly':
        return {
          labels: ['2024', '2025'],
          data: {
            Java: [25000, 27000],
            Angular: [22000, 24000],
            Python: [18000, 20000],
            All: [65000, 71000],
          },
        };
    }
    return { labels: [], data: {} };
  }

  // Helpers
  getLastNDays(n: number) {
    const days: string[] = [];
    const today = new Date();
    for (let i = n - 1; i >= 0; i--) {
      const d = new Date(today);
      d.setDate(today.getDate() - i);
      days.push(
        d.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })
      );
    }
    return days;
  }

  getLastNMonths(n: number) {
    const months: string[] = [];
    const today = new Date();
    for (let i = n - 1; i >= 0; i--) {
      const d = new Date(today);
      d.setMonth(today.getMonth() - i);
      months.push(
        d.toLocaleDateString('en-US', { month: 'short', year: '2-digit' })
      );
    }
    return months;
  }

  loadChartData(view: 'daily' | 'weekly' | 'monthly' | 'yearly') {
    this.activeView = view;
    const response = this.getDummyApiResponse(view);

    const option: EChartsOption = {
      tooltip: { trigger: 'axis' },
      legend: { data: ['Java', 'Angular', 'Python', 'All'], top: 10 },
      grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },
      xAxis: { type: 'category', data: response.labels },
      yAxis: { type: 'value' },
      series: Object.keys(response.data).map((lang) => ({
        name: lang,
        type: 'line',
        smooth: true,
        data: response.data[lang as keyof typeof response.data],
      })),
    };

    if (this.chartInstance) {
      this.chartInstance.setOption(option, true);
    }
  }
}
