import React, { useEffect, useState } from 'react';
import ReactECharts from 'echarts-for-react';

const getColor = (key: string) => {
  const hash = [...key].reduce((acc, char) => acc + char.charCodeAt(0), 0);
  const hue = hash % 360;
  return `hsl(${hue}, 70%, 50%)`;
};

const ScatterChart = ({ response = [], cords = [] }) => {
  const allTypes = Array.from(new Set(response.map(item => item.defect_type)));
  const [selectedType, setSelectedType] = useState(allTypes[0] || '');

  const handleTypeChange = (e) => {
    setSelectedType(e.target.value);
  };

  // Filter scatter data based on selected defect_type
  const filteredScatter = response
    .filter(item => item.defect_type === selectedType)
    .map(item => ({
      value: [item.xcoord, item.ycoord],
      name: item.defect_category
    }));

  const scatterSeries = {
    name: selectedType,
    type: 'scatter',
    symbolSize: 12,
    itemStyle: {
      color: getColor(selectedType)
    },
    data: filteredScatter
  };

  const lineSeries = cords.map((line, index) => ({
    name: `Line ${index + 1}`,
    type: 'line',
    lineStyle: {
      color: getColor(`line-${index}`),
      width: 2
    },
    symbol: 'none',
    data: line
  }));

  const option = {
    backgroundColor: '#090d16',
    tooltip: {
      trigger: 'item',
      formatter: (params) => {
        if (params.seriesType === 'scatter') {
          return `Category: ${params.data.name}<br/>[${params.data.value.join(', ')}]`;
        } else {
          return `Line<br/>[${params.data.join(', ')}]`;
        }
      }
    },
    legend: {
      data: [selectedType, ...lineSeries.map(l => l.name)],
      textStyle: { color: '#fff' }
    },
    xAxis: { type: 'value', axisLine: { lineStyle: { color: '#fff' } } },
    yAxis: { type: 'value', axisLine: { lineStyle: { color: '#fff' } } },
    series: [scatterSeries, ...lineSeries]
  };

  return (
    <div>
      <div style={{ marginBottom: '1rem' }}>
        <label style={{ color: 'white', marginRight: '8px' }}>Select Defect Type:</label>
        <select value={selectedType} onChange={handleTypeChange}>
          {allTypes.map(type => (
            <option key={type} value={type}>{type}</option>
          ))}
        </select>
      </div>

      <ReactECharts option={option} style={{ height: '500px' }} />
    </div>
  );
};

export default ScatterChart;
