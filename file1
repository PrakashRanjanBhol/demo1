.multi-toggle-container {
  display: flex;
  justify-content: center;
  margin-top: 1rem;
}

.multi-switch {
  position: relative;
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  width: 100%;
  max-width: 800px;
  background: #1f1f1f; /* Dark background */
  border-radius: 2rem;
  overflow: hidden;
  font-size: 0.8rem;
  box-shadow: 0 2px 6px rgba(0,0,0,0.2);
}

/* Hide radio inputs */
.multi-switch input[type='radio'] {
  display: none;
}

/* Label styling */
.multi-switch label {
  text-align: center;
  padding: 0.75rem 0;
  color: #f5f5f5;
  cursor: pointer;
  z-index: 2;
  position: relative;
  transition: color 0.2s ease;
  user-select: none;
}

/* Highlight (sliding background) */
.highlight {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  background-color: #ffcc00;
  color: #222;
  display: flex;
  align-items: center;
  justify-content: center;
  font-weight: 600;
  font-size: 0.8rem;
  transition: transform 0.3s ease;
  z-index: 1;
  border-radius: 2rem;
  pointer-events: none;
  white-space: nowrap;
  padding: 0 0.5rem;
}











<div class="multi-toggle-container">
  <div class="multi-switch">
    <!-- Sliding highlight background -->
    <div
      class="highlight"
      [ngStyle]="{
        'transform': 'translateX(' + (100 / options.length) * options.indexOf(selectedOption) + '%)',
        'width': 100 / options.length + '%'
      }"
    >
      {{ selectedOption }}
    </div>

    <!-- Render all toggle options -->
    <ng-container *ngFor="let option of options; let i = index">
      <input
        type="radio"
        [id]="'switch' + i"
        name="multiSwitch"
        [value]="option"
        [checked]="selectedOption === option"
        (change)="toggleOption(option)"
      />
      <label [for]="'switch' + i">{{ option }}</label>
    </ng-container>
  </div>
</div>
