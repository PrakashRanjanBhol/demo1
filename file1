// modal-splitter.component.ts
import { Component, ElementRef, ViewChild, AfterViewInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-modal-splitter',
  template: `
    <!-- Trigger Button -->
    <p-button 
      icon="pi pi-plus" 
      label="Open Splitter" 
      styleClass="trigger-btn p-button-rounded p-button-outlined"
      (onClick)="openModal()"
      [style]="{'position': 'fixed', 'bottom': '20px', 'right': '20px', 'z-index': '1000'}">
    </p-button>

    <!-- PrimeNG Dialog with custom animation -->
    <p-dialog 
      [(visible)]="isVisible" 
      [modal]="true"
      [closable]="true"
      [draggable]="false"
      [resizable]="false"
      [maximizable]="false"
      [closeOnEscape]="true"
      styleClass="custom-modal-dialog"
      [style]="{width: '90vw', height: '85vh', 'max-width': '1200px', 'max-height': '800px'}"
      header="Splitter Modal"
      (onShow)="onModalShow()"
      (onHide)="onModalHide()">
      
      <!-- Splitter Content -->
      <div class="splitter-container" #container>
        <div class="left-panel" [style.width.px]="leftPanelWidth">
          <div class="panel-content">
            <h3>Left Panel</h3>
            <p>This is the left panel content. You can put any content here.</p>
            <p>Width: {{leftPanelWidth}}px</p>
            <div class="sample-content">
              <p>You can add:</p>
              <ul>
                <li>Navigation menus</li>
                <li>Sidebar content</li>
                <li>Filter options</li>
                <li>Settings panel</li>
              </ul>
            </div>
          </div>
        </div>
        
        <div 
          class="splitter" 
          #splitter
          (mousedown)="onMouseDown($event)"
          [class.dragging]="isDragging">
          <div class="splitter-handle"></div>
        </div>
        
        <div class="right-panel" [style.width.px]="rightPanelWidth">
          <div class="panel-content">
            <h3>Main Content</h3>
            <p>This is the main content area with the requested dark background.</p>
            <p>Width: {{rightPanelWidth}}px</p>
            <div class="sample-content">
              <p>Perfect for:</p>
              <ul>
                <li>Main application content</li>
                <li>Data visualization</li>
                <li>Forms and inputs</li>
                <li>Dashboard widgets</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </p-dialog>
  `,
  styles: [`
    /* Custom trigger button styling */
    :host ::ng-deep .trigger-btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
      border: none !important;
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3) !important;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
    }

    :host ::ng-deep .trigger-btn:hover {
      transform: translateY(-2px) !important;
      box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4) !important;
    }

    :host ::ng-deep .trigger-btn:active {
      transform: translateY(0) !important;
    }

    /* Custom PrimeNG Dialog Animation - Bottom Right Entry */
    :host ::ng-deep .custom-modal-dialog {
      animation-duration: 0.6s !important;
      animation-timing-function: cubic-bezier(0.34, 1.56, 0.64, 1) !important;
    }

    :host ::ng-deep .custom-modal-dialog .p-dialog {
      border-radius: 16px !important;
      background: #1a1a1b !important;
      border: 1px solid #333 !important;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.8) !important;
    }

    /* Custom animation keyframes */
    @keyframes slideInFromBottomRight {
      0% {
        transform: scale(0.7) translate(30%, 30%);
        opacity: 0;
      }
      50% {
        transform: scale(0.9) translate(15%, 15%);
        opacity: 0.8;
      }
      100% {
        transform: scale(1) translate(0%, 0%);
        opacity: 1;
      }
    }

    @keyframes slideOutToBottomRight {
      0% {
        transform: scale(1) translate(0%, 0%);
        opacity: 1;
      }
      100% {
        transform: scale(0.7) translate(30%, 30%);
        opacity: 0;
      }
    }

    /* Apply animations to dialog */
    :host ::ng-deep .p-dialog-enter-active {
      animation: slideInFromBottomRight 0.6s cubic-bezier(0.34, 1.56, 0.64, 1) !important;
    }

    :host ::ng-deep .p-dialog-leave-active {
      animation: slideOutToBottomRight 0.4s ease-in !important;
    }

    /* Dialog header customization */
    :host ::ng-deep .custom-modal-dialog .p-dialog-header {
      background: #2a2a2b !important;
      border-bottom: 1px solid #333 !important;
      color: #ffffff !important;
      padding: 20px 24px !important;
      border-radius: 16px 16px 0 0 !important;
    }

    :host ::ng-deep .custom-modal-dialog .p-dialog-title {
      font-size: 20px !important;
      font-weight: 600 !important;
      color: #ffffff !important;
    }

    :host ::ng-deep .custom-modal-dialog .p-dialog-header-icon {
      color: #b3b3b3 !important;
      width: 32px !important;
      height: 32px !important;
    }

    :host ::ng-deep .custom-modal-dialog .p-dialog-header-icon:hover {
      background-color: #333 !important;
      color: #ffffff !important;
    }

    /* Dialog content customization */
    :host ::ng-deep .custom-modal-dialog .p-dialog-content {
      background: #0a0a0b !important;
      padding: 0 !important;
      border-radius: 0 0 16px 16px !important;
      overflow: hidden !important;
    }

    /* Backdrop customization */
    :host ::ng-deep .p-dialog-mask {
      backdrop-filter: blur(8px) !important;
      background-color: rgba(0, 0, 0, 0.6) !important;
    }

    /* Splitter Container */
    .splitter-container {
      display: flex;
      height: 100%;
      min-height: 600px;
      overflow: hidden;
      background-color: #0a0a0b;
    }

    .left-panel, .right-panel {
      min-width: 0;
      overflow: auto;
    }

    .left-panel {
      background-color: #1a1a1b;
      border-right: 1px solid #333;
    }

    .right-panel {
      background-color: #0a0a0b;
      border-left: 1px solid #333;
    }

    .panel-content {
      padding: 24px;
    }

    .panel-content h3 {
      margin-top: 0;
      margin-bottom: 16px;
      color: #ffffff;
      font-weight: 600;
      font-size: 18px;
    }

    .panel-content p {
      color: #b3b3b3;
      line-height: 1.6;
      margin-bottom: 12px;
    }

    .sample-content {
      margin-top: 24px;
    }

    .sample-content ul {
      color: #999;
      padding-left: 20px;
    }

    .sample-content li {
      margin-bottom: 8px;
      line-height: 1.5;
    }

    .splitter {
      width: 6px;
      background-color: #333;
      cursor: col-resize;
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.2s ease;
    }

    .splitter:hover {
      background-color: #444;
    }

    .splitter.dragging {
      background-color: #667eea;
    }

    .splitter-handle {
      width: 2px;
      height: 40px;
      background-color: #666;
      border-radius: 1px;
      transition: background-color 0.2s ease;
    }

    .splitter:hover .splitter-handle {
      background-color: #888;
    }

    .splitter.dragging .splitter-handle {
      background-color: white;
    }

    /* Prevent text selection during drag */
    .splitter-container.no-select {
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
    }

    /* Custom scrollbar for panels - Dark theme */
    .left-panel::-webkit-scrollbar,
    .right-panel::-webkit-scrollbar {
      width: 8px;
    }

    .left-panel::-webkit-scrollbar-track,
    .right-panel::-webkit-scrollbar-track {
      background: #1a1a1b;
    }

    .left-panel::-webkit-scrollbar-thumb,
    .right-panel::-webkit-scrollbar-thumb {
      background: #444;
      border-radius: 4px;
    }

    .left-panel::-webkit-scrollbar-thumb:hover,
    .right-panel::-webkit-scrollbar-thumb:hover {
      background: #555;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      :host ::ng-deep .custom-modal-dialog {
        width: 95vw !important;
        height: 90vh !important;
      }
      
      .panel-content {
        padding: 16px;
      }
    }
  `]
})
export class ModalSplitterComponent implements AfterViewInit, OnDestroy {
  @ViewChild('container', { static: true }) containerRef!: ElementRef;
  @ViewChild('splitter', { static: true }) splitterRef!: ElementRef;

  @Input() defaultLeftWidth: number = 300;
  @Output() modalClosed = new EventEmitter<void>();
  @Output() modalOpened = new EventEmitter<void>();

  leftPanelWidth: number = 300;
  rightPanelWidth: number = 0;
  isDragging: boolean = false;
  isVisible: boolean = false;
  
  private startX: number = 0;
  private startLeftWidth: number = 0;
  private containerWidth: number = 0;

  ngAfterViewInit() {
    this.leftPanelWidth = this.defaultLeftWidth;
    window.addEventListener('resize', this.onWindowResize.bind(this));
  }

  ngOnDestroy() {
    window.removeEventListener('resize', this.onWindowResize.bind(this));
    this.removeGlobalListeners();
  }

  openModal() {
    this.isVisible = true;
  }

  closeModal() {
    this.isVisible = false;
  }

  onModalShow() {
    // Initialize panels when modal is shown
    setTimeout(() => {
      this.initializePanels();
      this.modalOpened.emit();
    }, 100);
  }

  onModalHide() {
    this.modalClosed.emit();
  }

  private initializePanels() {
    if (!this.containerRef) return;
    
    const container = this.containerRef.nativeElement;
    this.containerWidth = container.offsetWidth;
    const splitterWidth = 6;
    
    // Set right panel width based on available space
    this.rightPanelWidth = this.containerWidth - this.leftPanelWidth - splitterWidth;
  }

  onMouseDown(event: MouseEvent) {
    event.preventDefault();
    
    this.isDragging = true;
    this.startX = event.clientX;
    this.startLeftWidth = this.leftPanelWidth;
    this.containerWidth = this.containerRef.nativeElement.offsetWidth;
    
    // Add no-select class to prevent text selection
    this.containerRef.nativeElement.classList.add('no-select');
    
    // Add global mouse event listeners
    document.addEventListener('mousemove', this.onMouseMove.bind(this));
    document.addEventListener('mouseup', this.onMouseUp.bind(this));
    
    // Change cursor for entire document
    document.body.style.cursor = 'col-resize';
  }

  onMouseMove(event: MouseEvent) {
    if (!this.isDragging) return;
    
    event.preventDefault();
    
    const deltaX = event.clientX - this.startX;
    let newLeftWidth = this.startLeftWidth + deltaX;
    
    // Calculate splitter width (6px)
    const splitterWidth = 6;
    
    // Allow full range from 0 to full width (minus splitter)
    newLeftWidth = Math.max(newLeftWidth, 0);
    newLeftWidth = Math.min(newLeftWidth, this.containerWidth - splitterWidth);
    
    this.leftPanelWidth = newLeftWidth;
    this.rightPanelWidth = this.containerWidth - newLeftWidth - splitterWidth;
  }

  onMouseUp(event: MouseEvent) {
    if (!this.isDragging) return;
    
    this.isDragging = false;
    
    // Remove no-select class
    this.containerRef.nativeElement.classList.remove('no-select');
    
    // Remove global listeners
    this.removeGlobalListeners();
    
    // Reset cursor
    document.body.style.cursor = '';
  }

  private removeGlobalListeners() {
    document.removeEventListener('mousemove', this.onMouseMove.bind(this));
    document.removeEventListener('mouseup', this.onMouseUp.bind(this));
  }

  private onWindowResize() {
    if (!this.isVisible) return;
    this.updatePanelWidths();
  }

  private updatePanelWidths() {
    if (!this.containerRef) return;
    
    const container = this.containerRef.nativeElement;
    const newContainerWidth = container.offsetWidth;
    const splitterWidth = 6;
    
    if (newContainerWidth !== this.containerWidth) {
      // Maintain proportions on window resize
      const ratio = this.leftPanelWidth / (this.containerWidth - splitterWidth);
      this.containerWidth = newContainerWidth;
      
      // Calculate new left width maintaining ratio, but allow 0 to full width
      this.leftPanelWidth = Math.max(
        0,
        Math.min(
          ratio * (newContainerWidth - splitterWidth),
          newContainerWidth - splitterWidth
        )
      );
      this.rightPanelWidth = newContainerWidth - this.leftPanelWidth - splitterWidth;
    }
  }
}

/*
Usage in your module:

1. Make sure you have PrimeNG installed and imported:

npm install primeng@16

2. Add PrimeNG modules to your module imports:

import { DialogModule } from 'primeng/dialog';
import { ButtonModule } from 'primeng/button';

@NgModule({
  imports: [
    DialogModule,
    ButtonModule,
    // ... other imports
  ],
  declarations: [
    ModalSplitterComponent,
    // ... other components
  ],
  // ...
})

3. Import PrimeNG theme in your styles.css or angular.json:

@import 'primeng/resources/themes/lara-dark-blue/theme.css';
@import 'primeng/resources/primeng.css';
@import 'primeicons/primeicons.css';

4. Use in your template:
<app-modal-splitter 
  [defaultLeftWidth]="300"
  (modalOpened)="onModalOpened()"
  (modalClosed)="onModalClosed()">
</app-modal-splitter>

Features:
- Uses PrimeNG 16 Dialog component
- Custom bottom-right entry animation with elastic bounce
- Beautiful gradient trigger button with hover effects
- Dark theme integration matching PrimeNG styles
- Full splitter functionality (0px to 100% width)
- Responsive design
- ESC key to close support
- Backdrop blur effect
- Event emitters for modal lifecycle
- Custom CSS animations using keyframes
- All original splitter features preserved
*/
