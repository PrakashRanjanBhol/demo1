import React, { useState } from 'react';
import styles from './ConfluenceExplorer.module.css';

const mockSpaces = [
    { key: 'Space1', name: 'Space1' },
    { key: 'Space2', name: 'Space2' }
];

const mockPageData = {
    Space1: [
        {
            page_id: 1,
            title: 'Main Page',
            children: [
                {
                    page_id: 2,
                    title: 'Sub Main Page',
                    children: []
                },
                {
                    page_id: 3,
                    title: 'Sub Main Page1',
                    children: [
                        {
                            page_id: 4,
                            title: 'Inner Sub Main Page1',
                            children: []
                        }
                    ]
                }
            ]
        }
    ],
    Space2: []
};

const ConfluenceExplorer = () => {
    const [selectedSpaces, setSelectedSpaces] = useState([]);
    const [selectedPageIds, setSelectedPageIds] = useState([]);
    const [expandedSpace, setExpandedSpace] = useState(null);

    const toggleSpaceSelection = (spaceKey) => {
        setSelectedPageIds([]); // Deselect pages
        setSelectedSpaces((prev) => {
            if (prev.includes(spaceKey)) {
                return prev.filter(k => k !== spaceKey);
            }
            return [...prev, spaceKey];
        });
    };

    const getAllNestedPageIds = (page) => {
        let ids = [page.page_id];
        if (page.children && page.children.length > 0) {
            for (const child of page.children) {
                ids = [...ids, ...getAllNestedPageIds(child)];
            }
        }
        return ids;
    };

    const handlePageClick = (page) => {
        const nestedIds = getAllNestedPageIds(page);

        // If already selected, deselect
        const alreadySelected = nestedIds.every(id => selectedPageIds.includes(id));
        if (alreadySelected) {
            setSelectedPageIds([]);
        } else {
            setSelectedSpaces([]); // Deselect all spaces
            setSelectedPageIds(nestedIds);
        }
    };

    const isChecked = (page) => selectedPageIds.includes(page.page_id);

    const renderPages = (pages) => {
        return (
            <ul className={styles.pageList}>
                {pages.map(page => {
                    const hasChildren = page.children && page.children.length > 0;
                    return (
                        <li key={page.page_id}>
                            <label className={styles.pageItem}>
                                <input
                                    type="checkbox"
                                    checked={isChecked(page)}
                                    onChange={() => handlePageClick(page)}
                                />
                                {page.title}
                            </label>
                            {hasChildren && (
                                <div className={styles.nested}>
                                    {renderPages(page.children)}
                                </div>
                            )}
                        </li>
                    );
                })}
            </ul>
        );
    };

    return (
        <div className={styles.container}>
            <h3 className={styles.heading}>Confluence Explorer</h3>
            <div className={styles.spaceList}>
                {mockSpaces.map(space => (
                    <div key={space.key} className={styles.spaceItem}>
                        <label className={styles.spaceLabel}>
                            <input
                                type="checkbox"
                                checked={selectedSpaces.includes(space.key)}
                                onChange={() => toggleSpaceSelection(space.key)}
                            />
                            {space.name}
                        </label>
                        <button
                            className={styles.expandButton}
                            onClick={() => setExpandedSpace(expandedSpace === space.key ? null : space.key)}
                        >
                            {expandedSpace === space.key ? 'âˆ’' : '+'}
                        </button>

                        {expandedSpace === space.key && mockPageData[space.key] && (
                            <div className={styles.pageTree}>
                                {renderPages(mockPageData[space.key])}
                            </div>
                        )}
                    </div>
                ))}
            </div>

            <div className={styles.result}>
                <h4>Selected:</h4>
                <pre>
                    {selectedSpaces.length > 0
                        ? JSON.stringify(selectedSpaces, null, 2)
                        : JSON.stringify(selectedPageIds, null, 2)}
                </pre>
            </div>
        </div>
    );
};

export default ConfluenceExplorer;
















.container {
    padding: 1rem;
    background-color: #1e1e2f;
    width: 100%;
    max-width: 420px;
    border: 1px solid #333;
    border-radius: 8px;
    color: #f0f0f0;
    font-family: 'Segoe UI', sans-serif;
}

.heading {
    margin-bottom: 1rem;
    font-size: 1.2rem;
    color: #93c5fd;
}

.spaceList {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.spaceItem {
    background-color: #2a2a40;
    border: 1px solid #444;
    padding: 0.6rem;
    border-radius: 6px;
    position: relative;
}

.spaceLabel {
    font-weight: 500;
}

.expandButton {
    position: absolute;
    right: 10px;
    top: 10px;
    border: none;
    background: #3b3b52;
    color: #fff;
    border-radius: 4px;
    padding: 0 8px;
    cursor: pointer;
    font-size: 1rem;
    transition: background 0.2s ease;
}

.expandButton:hover {
    background: #52527a;
}

.pageTree {
    margin-top: 0.5rem;
    margin-left: 1rem;
}

.pageList {
    list-style: none;
    padding-left: 0.5rem;
}

.pageItem {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin: 0.3rem 0;
    font-size: 0.95rem;
}

.nested {
    margin-left: 1rem;
    border-left: 1px dashed #555;
    padding-left: 0.7rem;
    margin-top: 0.3rem;
}

.result {
    margin-top: 1.5rem;
    background-color: #29293d;
    padding: 0.7rem;
    border-radius: 6px;
    font-size: 0.9rem;
    color: #c2c2c2;
    white-space: pre-wrap;
}
