<div class="sidebar-container">
    <div class="tree-scroll-wrapper">
        <ul class="tree">
            <ng-container *ngTemplateOutlet="renderNode; context: { $implicit: treeData, parent: null }"></ng-container>
        </ul>
    </div>

    <ng-template #renderNode let-node let-parent="parent">
        <li class="tree-node">
            <div class="node-content">
                <input *ngIf="shouldShowCheckbox(node, parent)" type="checkbox" [checked]="node.checked"
                    (change)="node.type === 'folder' ? onFolderSelect(node) : onFileSelect(node, parent)" />

                <span *ngIf="node.type === 'folder'" (click)="toggleFolder(node)">📁 {{ node.name }}</span>
                <span *ngIf="node.type === 'file'">📄 {{ node.name }}</span>
            </div>

            <ul *ngIf="node.children && node.expanded">
                <ng-container *ngFor="let child of node.children">
                    <ng-container
                        *ngTemplateOutlet="renderNode; context: { $implicit: child, parent: node }"></ng-container>
                </ng-container>
            </ul>
        </li>
    </ng-template>
</div>









/* 🌳 Sidebar container */
.sidebar-container {
    width: 320px;
    height: 100vh;
    overflow: hidden;
    background-color: #f9f9f9;
    border-right: 1px solid #ddd;
    display: flex;
    flex-direction: column;
    font-family: 'Segoe UI', 'Roboto', sans-serif;
}

/* 🔁 Tree scroll wrapper */
.tree-scroll-wrapper {
    flex: 1;
    overflow-x: auto;
    overflow-y: auto;
    padding: 8px;
    box-sizing: border-box;
}

/* 🌲 Tree list */
.tree {
    margin: 0;
    padding: 0;
    white-space: nowrap;
    /* Enables horizontal scroll */
}

/* 🚫 Remove default bullets */
.tree,
.tree ul,
.tree li {
    list-style-type: none;
}

/* 📦 Tree node */
.tree-node {
    margin: 0;
    padding-left: 16px;
    border-left: 1px dashed #ccc;
    position: relative;
}

/* 📄 Folder/File container */
.node-content {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 4px 0;
    cursor: pointer;
}

/* ☑️ Checkbox */
.node-content input[type='checkbox'] {
    margin-left: -20px;
    /* Pull checkbox to the left edge */
    transform: scale(1.2);
    cursor: pointer;
}

/* ✏️ Text styling */
.node-content span {
    user-select: none;
    padding: 2px 4px;
    border-radius: 4px;
    transition: background-color 0.2s ease;
}

.node-content span:hover {
    background-color: #eaeaea;
}

/* 🧩 Child folders */
.tree-node>ul {
    padding-left: 12px;
    margin: 0;
    border-left: 1px dashed #ddd;
}












import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-tree-selector',
  templateUrl: './tree-selector.component.html',
  styleUrls: ['./tree-selector.component.scss']
})
export class TreeSelectorComponent {

  treeData = {
    name: 'root_folder',
    expanded: true,
    checked: false,
    type: 'folder',
    children: [
      {
        name: 'Level 1 - A',
        type: 'folder',
        expanded: false,
        checked: false,
        rc_session_id: null,
        rc_flag: false,
        children: [
          {
            name: 'Level 2 - A',
            type: 'folder',
            expanded: false,
            checked: false,
            rc_session_id: null,
            rc_flag: false,
            children: [
              {
                name: 'Level 3 - A',
                type: 'folder',
                expanded: false,
                checked: false,
                rc_session_id: null,
                rc_flag: false,
                children: [
                  {
                    name: 'Level 4 - A',
                    type: 'folder',
                    expanded: false,
                    checked: false,
                    rc_session_id: null,
                    rc_flag: false,
                    children: [
                      {
                        name: 'Level 5 - A',
                        type: 'folder',
                        expanded: false,
                        checked: false,
                        rc_session_id: 'session-deep-1',
                        rc_flag: true,
                        children: [
                          {
                            name: 'file1.py',
                            type: 'file',
                            checked: false
                          },
                          {
                            name: 'file2.py',
                            type: 'file',
                            checked: false
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        name: 'Level 1 - B',
        type: 'folder',
        expanded: false,
        checked: false,
        rc_session_id: null,
        rc_flag: false,
        children: [
          {
            name: 'Level 2 - B',
            type: 'folder',
            expanded: false,
            checked: false,
            rc_session_id: null,
            rc_flag: false,
            children: [
              {
                name: 'Level 3 - B',
                type: 'folder',
                expanded: false,
                checked: false,
                rc_session_id: null,
                rc_flag: false,
                children: [
                  {
                    name: 'Level 4 - B',
                    type: 'folder',
                    expanded: false,
                    checked: false,
                    rc_session_id: null,
                    rc_flag: false,
                    children: [
                      {
                        name: 'Level 5 - B',
                        type: 'folder',
                        expanded: false,
                        checked: false,
                        rc_session_id: null,
                        rc_flag: false,
                        children: [
                          {
                            name: 'Level 6 - B',
                            type: 'folder',
                            expanded: false,
                            checked: false,
                            rc_session_id: 'session-deep-2',
                            rc_flag: true,
                            children: [
                              {
                                name: 'fileA.py',
                                type: 'file',
                                checked: false
                              },
                              {
                                name: 'fileB.py',
                                type: 'file',
                                checked: false
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  };


  currentSelectedSessionId: string | null = null;

  toggleFolder(node: any) {
    node.expanded = !node.expanded;
  }

  onFolderSelect(node: any) {
    if (this.currentSelectedSessionId && this.currentSelectedSessionId !== node.rc_session_id) {
      this.resetAllChecked(this.treeData);
    }

    node.checked = !node.checked;
    this.currentSelectedSessionId = node.checked ? node.rc_session_id : null;

    this.checkAllChildren(node, node.checked);
  }

  onFileSelect(node: any, parent: any) {
    // If already selected session is different, reset all
    if (this.currentSelectedSessionId && this.currentSelectedSessionId !== parent.rc_session_id) {
      this.resetAllChecked(this.treeData);
    }

    // Toggle file check
    node.checked = !node.checked;

    // Update session ID based on current selection
    const anyChecked = parent.children.some((child: any) => child.checked);
    this.currentSelectedSessionId = anyChecked ? parent.rc_session_id : null;

    // Update parent checkbox based on all file children
    const allChecked = parent.children.every((child: any) => child.checked);
    parent.checked = allChecked;
  }

  resetAllChecked(node: any) {
    node.checked = false;
    if (node.children) {
      node.children.forEach((child: any) => this.resetAllChecked(child));
    }
  }

  checkAllChildren(node: any, checked: boolean) {
    if (node.children) {
      node.children.forEach((child: any) => {
        if (child.type === 'file') {
          child.checked = checked;
        } else if (child.type === 'folder') {
          child.checked = checked;
          this.checkAllChildren(child, checked);
        }
      });
    }
  }

  shouldShowCheckbox(node: any, parent: any = null): boolean {
    if (node.type === 'folder') {
      return !!node.rc_session_id;
    } else {
      return parent && !!parent.rc_session_id;
    }
  }


  getSelectedFilesWithPath(): { path: string; file: any }[] {
    const result: { path: string; file: any }[] = [];

    const traverse = (node: any, currentPath: string) => {
      const newPath = currentPath ? `${currentPath}/${node.name}` : node.name;

      if (node.type === 'file' && node.checked) {
        result.push({ path: newPath, file: node });
      }

      if (node.children) {
        node.children.forEach((child: any) => traverse(child, newPath));
      }
    };

    traverse(this.treeData, '');
    console.log(result);
    return result;
  }

}
