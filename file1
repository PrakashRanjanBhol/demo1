import { Component, Input, OnChanges, SimpleChanges, ViewChild, ElementRef, AfterViewInit, OnInit } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';

@Component({
  selector: 'app-streaming-code-preview',
  template: `
    <div class="code-preview-container">
      <!-- Code Input Section -->
      <div class="code-inputs">
        <div class="input-group">
          <label>HTML Code:</label>
          <textarea 
            [value]="htmlCode" 
            readonly
            placeholder="HTML code will appear here as it streams..."
            class="code-textarea">
          </textarea>
        </div>
        
        <div class="input-group">
          <label>CSS Code:</label>
          <textarea 
            [value]="cssCode" 
            readonly
            placeholder="CSS code will appear here as it streams..."
            class="code-textarea">
          </textarea>
        </div>
        
        <div class="input-group">
          <label>JavaScript Code:</label>
          <textarea 
            [value]="jsCode" 
            readonly
            placeholder="JavaScript code will appear here as it streams..."
            class="code-textarea">
          </textarea>
        </div>
      </div>
      
      <!-- Preview Section -->
      <div class="preview-section">
        <div class="preview-header">
          <h3>Live Preview</h3>
          <div class="header-controls">
            <span class="status-indicator" [class.streaming]="isStreaming">
              {{ isStreaming ? 'Streaming...' : 'Ready' }}
            </span>
            <button (click)="refreshPreview()" class="refresh-btn">Refresh</button>
            <button (click)="clearAll()" class="clear-btn">Clear</button>
          </div>
        </div>
        <div class="preview-container">
          <iframe 
            #previewFrame
            class="preview-iframe"
            sandbox="allow-scripts allow-same-origin">
          </iframe>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .code-preview-container {
      display: flex;
      gap: 20px;
      height: 100vh;
      padding: 20px;
      font-family: Arial, sans-serif;
    }
    
    .code-inputs {
      width: 350px;
      display: flex;
      flex-direction: column;
      gap: 15px;
    }
    
    .input-group {
      display: flex;
      flex-direction: column;
      flex: 1;
    }
    
    .input-group label {
      font-weight: bold;
      margin-bottom: 5px;
      color: #333;
    }
    
    .code-textarea {
      flex: 1;
      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
      font-size: 14px;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      resize: none;
      background: #f8f9fa;
      color: #333;
    }
    
    .code-textarea:focus {
      outline: none;
      border-color: #007bff;
      box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    }
    
    .preview-section {
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    
    .preview-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }
    
    .preview-header h3 {
      margin: 0;
      color: #333;
    }
    
    .header-controls {
      display: flex;
      gap: 10px;
      align-items: center;
    }
    
    .status-indicator {
      padding: 4px 8px;
      border-radius: 4px;
      font-size: 12px;
      font-weight: bold;
      background: #28a745;
      color: white;
    }
    
    .status-indicator.streaming {
      background: #ffc107;
      color: #333;
      animation: pulse 1.5s ease-in-out infinite alternate;
    }
    
    @keyframes pulse {
      from { opacity: 0.6; }
      to { opacity: 1; }
    }
    
    .refresh-btn, .clear-btn {
      padding: 8px 16px;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 14px;
    }
    
    .refresh-btn {
      background: #007bff;
    }
    
    .refresh-btn:hover {
      background: #0056b3;
    }
    
    .clear-btn {
      background: #dc3545;
    }
    
    .clear-btn:hover {
      background: #c82333;
    }
    
    .preview-container {
      flex: 1;
      border: 1px solid #ddd;
      border-radius: 4px;
      overflow: hidden;
    }
    
    .preview-iframe {
      width: 100%;
      height: 100%;
      border: none;
      background: white;
    }
    
    @media (max-width: 768px) {
      .code-preview-container {
        flex-direction: column;
        height: auto;
      }
      
      .code-inputs {
        width: 100%;
        height: 60vh;
      }
      
      .preview-section {
        width: 100%;
        height: 40vh;
      }
    }
  `]
})
export class StreamingCodePreviewComponent implements OnChanges, AfterViewInit, OnInit {
  @Input() chunk: string = ''; // Input for streaming chunks
  @Input() autoRefresh: boolean = true; // Auto-refresh preview when code changes

  htmlCode: string = '';
  cssCode: string = '';
  jsCode: string = '';
  
  private streamBuffer: string = '';
  private debounceTimer: any;
  isStreaming: boolean = false;

  @ViewChild('previewFrame') previewFrame!: ElementRef<HTMLIFrameElement>;

  constructor(private sanitizer: DomSanitizer) { }

  ngOnInit() {
    // Initialize empty state
  }

  ngAfterViewInit() {
    this.updatePreview();
  }

  ngOnChanges(changes: SimpleChanges) {
    if (changes['chunk'] && changes['chunk'].currentValue) {
      this.processChunk(changes['chunk'].currentValue);
    }
  }

  private processChunk(newChunk: string) {
    this.isStreaming = true;
    this.streamBuffer += newChunk;
    
    // Clear previous debounce timer
    if (this.debounceTimer) {
      clearTimeout(this.debounceTimer);
    }

    // Parse the accumulated buffer
    this.parseCodeBlocks();

    // Set a debounce timer to stop streaming indicator
    this.debounceTimer = setTimeout(() => {
      this.isStreaming = false;
    }, 1000); // Stop streaming indicator after 1 second of no new chunks
  }

  private parseCodeBlocks() {
    const codeBlockRegex = /```(\w+)?\s*\n([\s\S]*?)```/g;
    let match;
    
    let htmlContent = '';
    let cssContent = '';
    let jsContent = '';

    // Reset regex lastIndex
    codeBlockRegex.lastIndex = 0;

    while ((match = codeBlockRegex.exec(this.streamBuffer)) !== null) {
      const language = match[1]?.toLowerCase() || '';
      const code = match[2].trim();

      switch (language) {
        case 'html':
          htmlContent = code;
          break;
        case 'css':
          cssContent = code;
          break;
        case 'javascript':
        case 'js':
          jsContent = code;
          break;
        case '':
          // If no language specified, try to detect based on content
          if (this.isHtmlCode(code)) {
            htmlContent = code;
          } else if (this.isCssCode(code)) {
            cssContent = code;
          } else if (this.isJsCode(code)) {
            jsContent = code;
          }
          break;
        default:
          // Handle other cases
          if (language.includes('html')) htmlContent = code;
          else if (language.includes('css')) cssContent = code;
          else if (language.includes('js') || language.includes('javascript')) jsContent = code;
          break;
      }
    }

    // Update codes if they have changed
    let hasChanges = false;
    
    if (htmlContent !== this.htmlCode) {
      this.htmlCode = htmlContent;
      hasChanges = true;
    }
    if (cssContent !== this.cssCode) {
      this.cssCode = cssContent;
      hasChanges = true;
    }
    if (jsContent !== this.jsCode) {
      this.jsCode = jsContent;
      hasChanges = true;
    }

    // Auto-refresh preview if there are changes and auto-refresh is enabled
    if (hasChanges && this.autoRefresh && this.previewFrame) {
      this.updatePreview();
    }
  }

  private isHtmlCode(code: string): boolean {
    return code.includes('<html>') || 
           code.includes('<!DOCTYPE') || 
           code.includes('<div>') || 
           code.includes('<body>') ||
           code.includes('<head>') ||
           /<[a-z][\s\S]*>/i.test(code);
  }

  private isCssCode(code: string): boolean {
    return code.includes('{') && 
           (code.includes('color:') || 
            code.includes('font-') || 
            code.includes('margin:') ||
            code.includes('padding:') ||
            code.includes('background') ||
            /[.#][\w-]+\s*{/.test(code));
  }

  private isJsCode(code: string): boolean {
    return code.includes('function') || 
           code.includes('const ') || 
           code.includes('let ') || 
           code.includes('var ') ||
           code.includes('=>') ||
           code.includes('console.') ||
           code.includes('document.');
  }

  updatePreview() {
    if (!this.previewFrame?.nativeElement) return;

    const consolidatedHtml = this.consolidateCode();
    const iframe = this.previewFrame.nativeElement;

    // Write the consolidated HTML to the iframe
    const doc = iframe.contentDocument || iframe.contentWindow?.document;
    if (doc) {
      doc.open();
      doc.write(consolidatedHtml);
      doc.close();
    }
  }

  refreshPreview() {
    this.updatePreview();
  }

  clearAll() {
    this.streamBuffer = '';
    this.htmlCode = '';
    this.cssCode = '';
    this.jsCode = '';
    this.isStreaming = false;
    this.updatePreview();
  }

  private consolidateCode(): string {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Preview - Streaming</title>
    <style>
        /* Reset some default styles */
        body { 
          margin: 0; 
          padding: 20px; 
          font-family: Arial, sans-serif; 
          background: white;
          transition: all 0.3s ease;
        }
        
        /* Streaming indicator styles */
        .streaming-indicator {
          position: fixed;
          top: 10px;
          right: 10px;
          background: ${this.isStreaming ? '#ffc107' : '#28a745'};
          color: ${this.isStreaming ? '#333' : 'white'};
          padding: 5px 10px;
          border-radius: 15px;
          font-size: 12px;
          font-weight: bold;
          z-index: 9999;
          opacity: ${this.isStreaming ? '1' : '0.7'};
          animation: ${this.isStreaming ? 'pulse 1.5s ease-in-out infinite alternate' : 'none'};
        }
        
        @keyframes pulse {
          from { opacity: 0.6; }
          to { opacity: 1; }
        }
        
        /* User CSS */
        ${this.cssCode}
    </style>
</head>
<body>
    <div class="streaming-indicator">
      ${this.isStreaming ? '🔄 Streaming...' : '✅ Ready'}
    </div>
    
    ${this.htmlCode}
    
    <script>
        // Error handling for JavaScript
        window.onerror = function(msg, url, lineNo, columnNo, error) {
            const errorDiv = document.createElement('div');
            errorDiv.style.cssText = 'color: red; background: #ffe6e6; padding: 10px; margin: 10px 0; border: 1px solid red; border-radius: 4px; animation: slideIn 0.3s ease-out;';
            errorDiv.innerHTML = '<strong>JavaScript Error:</strong> ' + msg;
            document.body.appendChild(errorDiv);
            return false;
        };
        
        // Add slide-in animation for error messages
        const style = document.createElement('style');
        style.textContent = \`
          @keyframes slideIn {
            from { transform: translateX(-100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
          }
        \`;
        document.head.appendChild(style);
        
        // User JavaScript with error handling
        try {
            ${this.jsCode}
        } catch (error) {
            const errorDiv = document.createElement('div');
            errorDiv.style.cssText = 'color: red; background: #ffe6e6; padding: 10px; margin: 10px 0; border: 1px solid red; border-radius: 4px; animation: slideIn 0.3s ease-out;';
            errorDiv.innerHTML = '<strong>JavaScript Error:</strong> ' + error.message;
            document.body.appendChild(errorDiv);
        }
        
        // Indicate when content is being updated
        console.log('🔄 Preview updated at:', new Date().toLocaleTimeString());
    </script>
</body>
</html>`;
  }

  // Public method to reset the component for a new streaming session
  resetStream() {
    this.clearAll();
  }

  // Get current parsed code state
  getCurrentCode() {
    return {
      html: this.htmlCode,
      css: this.cssCode,
      javascript: this.jsCode,
      buffer: this.streamBuffer
    };
  }
}
