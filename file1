<div className={styles.filtersBar}>
  <div className={styles.filters}>
    <Dropdown
      value={filters.source}
      options={sourceOptions}
      onChange={(e) => setFilters({ ...filters, source: e.value })}
      placeholder="Select Source"
      className={styles.dropdown}
    />
    <Dropdown
      value={filters.llmModel}
      options={uniqueValues('llmModel')}
      onChange={(e) => setFilters({ ...filters, llmModel: e.value })}
      placeholder="Select LLM Model"
      className={styles.dropdown}
    />
    <Dropdown
      value={filters.deploymentStatus}
      options={['All', 'Deployed']}
      onChange={(e) => setFilters({ ...filters, deploymentStatus: e.value })}
      className={styles.dropdown}
    />
    <button
      className={styles.clearButton}
      onClick={() =>
        setFilters({ source: null, llmModel: null, deploymentStatus: 'All' })
      }
    >
      Clear Filters
    </button>
  </div>

  <button
    className={styles.newConfigButton}
    onClick={() => onRowSelect(null)}
  >
    + New Configuration
  </button>
</div>







.filtersBar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  margin-bottom: 1rem;
  gap: 1rem;
}

.filters {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.newConfigButton {
  background: linear-gradient(to right, #148fcb, #0d3b7e);
  color: white;
  padding: 0.5rem 1.2rem;
  border: none;
  border-radius: 20px;
  cursor: pointer;
  white-space: nowrap;
  font-weight: 500;
  font-size: 0.95rem;
}

.newConfigButton:hover {
  opacity: 0.9;
}







<ConfigDetail
  row={selectedRow || {}} // empty object if adding new
  onBack={() => setSelectedRow(null)}
/>





