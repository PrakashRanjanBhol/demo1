import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-toggle-switch',
  templateUrl: './toggle-switch.component.html',
  styleUrls: ['./toggle-switch.component.css']
})
export class ToggleSwitchComponent {
  @Input() selectedOption: string = 'General'; // Default selection

  @Output() valueChange = new EventEmitter<string>();

  options = ['General', 'Code RAG', 'Jira', 'Confluence', 'Reusable Components'];

  toggleOption(option: string) {
    this.valueChange.emit(option);
  }
}







<div class="toggle-container">
  <div class="switches-container">
    <div 
      class="switch-wrapper" 
      [ngStyle]="{ 'transform': 'translateX(' + (100 / options.length) * options.indexOf(selectedOption) + '%)', 'width': (100 / options.length) + '%' }">
      <div class="switch">{{ selectedOption }}</div>
    </div>

    <ng-container *ngFor="let option of options; let i = index">
      <input
        type="radio"
        [id]="'switch' + i"
        name="switchGroup"
        [value]="option"
        [checked]="selectedOption === option"
        (change)="toggleOption(option)"
      />
      <label [for]="'switch' + i">{{ option }}</label>
    </ng-container>
  </div>
</div>








.toggle-container {
  width: 100%;
  max-width: 700px;
  margin: 1rem auto;
}

.switches-container {
  position: relative;
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  background-color: #2a2a2a;
  border-radius: 2rem;
  overflow: hidden;
  color: white;
  font-size: 0.75rem;
}

input[type="radio"] {
  display: none;
}

label {
  text-align: center;
  padding: 0.6rem 0;
  cursor: pointer;
  z-index: 2;
  position: relative;
}

.switch-wrapper {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  transition: transform 0.3s ease;
  z-index: 1;
  background-color: #ffcc00;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 2rem;
  font-weight: bold;
  color: #222;
}











