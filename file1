import React, { useState, useEffect } from 'react';
import ReactECharts from 'echarts-for-react';
import { Dropdown } from 'primereact/dropdown';
import { Dialog } from 'primereact/dialog';
import styles from './TrendChart.module.css';

const TrendChart = () => {
    const response = [
        { weekwise: { week: 22, count: 78 } },
        { weekwise: { week: 23, count: 90 } },
        { daywise: { day: 1, count: 45 } },
        { daywise: { day: 2, count: 78 } },
        { daywise: { day: 3, count: 60 } },
        { monthwise: { month: 4, count: 100 } },
        { monthwise: { month: 5, count: 78 } }
    ];

    const [selectedType, setSelectedType] = useState('daywise');
    const [visible, setVisible] = useState(false);
    const [fullMaximized, setFullMaximized] = useState(false);

    useEffect(() => {
        document.body.style.overflow = fullMaximized ? 'hidden' : 'auto';
        return () => {
            document.body.style.overflow = 'auto';
        };
    }, [fullMaximized]);

    const getChartData = () => {
        const data = response
            .filter(item => item[selectedType])
            .map(item => item[selectedType]);

        const xKey = selectedType === 'daywise' ? 'day'
            : selectedType === 'weekwise' ? 'week'
                : 'month';

        const xData = data.map(d => d[xKey]);
        const yData = data.map(d => d.count);

        return { xData, yData, xKey };
    };

    const { xData, yData, xKey } = getChartData();

    const options = {
        title: {
            text: `Trend - ${selectedType}`,
            left: 'center'
        },
        tooltip: {
            trigger: 'axis'
        },
        xAxis: {
            type: 'category',
            name: xKey,
            data: xData
        },
        yAxis: {
            type: 'value',
            name: 'Count'
        },
        series: [
            {
                data: yData,
                type: 'line',
                smooth: true,
                lineStyle: {
                    color: '#42A5F5'
                },
                itemStyle: {
                    color: '#42A5F5'
                }
            }
        ]
    };

    const typeOptions = [
        { label: 'Daywise', value: 'daywise' },
        { label: 'Weekwise', value: 'weekwise' },
        { label: 'Monthwise', value: 'monthwise' }
    ];

    const dialogStyle = fullMaximized
        ? {
            width: '100vw',
            height: '100vh',
            maxWidth: '100vw',
            position: 'fixed',
            top: 0,
            left: 0,
            margin: 0,
            padding: 0,
            borderRadius: 0,
            zIndex: 9999
        }
        : { width: '90vw', height: '90vh' };

    return (
        <>
            <div className={styles.container}>
                <div className={styles.chartWrapper}>
                    <i
                        className={`pi pi-window-maximize ${styles.expandIcon}`}
                        onClick={() => setVisible(true)}
                        title="Expand"
                    />
                    <ReactECharts option={options} style={{ height: '100%' }} />
                </div>
                <div className={styles.dropdownWrapper}>
                    <Dropdown
                        value={selectedType}
                        options={typeOptions}
                        onChange={(e) => setSelectedType(e.value)}
                        placeholder="Select Trend Type"
                        className={styles.dropdown}
                    />
                </div>
            </div>

            <Dialog
                header={
                    <div className={styles.dialogHeader}>
                        <span>Full View - {selectedType}</span>
                        <div className={styles.iconGroup}>
                            <i
                                className={`pi ${fullMaximized ? 'pi-window-minimize' : 'pi-window-maximize'} ${styles.dialogIcon}`}
                                onClick={() => setFullMaximized(prev => !prev)}
                                title={fullMaximized ? 'Minimize' : 'Maximize'}
                            />
                            <i
                                className={`pi pi-times ${styles.dialogIcon}`}
                                onClick={() => {
                                    setVisible(false);
                                    setFullMaximized(false);
                                }}
                                title="Close"
                            />
                        </div>
                    </div>
                }
                visible={visible}
                onHide={() => {
                    setVisible(false);
                    setFullMaximized(false);
                }}
                modal
                closable={false}
                style={dialogStyle}
                contentStyle={{
                    height: 'calc(100% - 3rem)',
                    padding: fullMaximized ? 0 : '1rem'
                }}
            >
                <ReactECharts option={options} style={{ height: '100%' }} />
            </Dialog>
        </>
    );
};

export default TrendChart;






.container {
    width: 100%;
    max-width: 800px;
    margin: auto;
    padding: 1rem;
}

.chartWrapper {
    position: relative;
    width: 100%;
    height: 400px;
}

.expandIcon {
    position: absolute;
    top: 10px;
    right: 12px;
    font-size: 1.5rem;
    color: #333;
    cursor: pointer;
    z-index: 10;
    transition: color 0.2s;
}

.expandIcon:hover {
    color: #007ad9;
}

.dropdownWrapper {
    margin-top: 1rem;
    text-align: center;
}

.dropdown {
    width: 200px;
}

.dialogHeader {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: bold;
    font-size: 1.1rem;
    padding-right: 1rem;
}

.iconGroup {
    display: flex;
    gap: 1rem;
    align-items: center;
}

.dialogIcon {
    font-size: 1.3rem;
    color: #333;
    cursor: pointer;
    transition: color 0.2s;
}

.dialogIcon:hover {
    color: #007ad9;
}
