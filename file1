import { Component } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';

interface Ticket {
  id: string | null; // Allow null for draft tickets
  title: string;
  type: 'story' | 'task' | 'bug';
}

@Component({
  selector: 'app-ticket-list',
  templateUrl: './ticket-list.component.html',
  styleUrls: ['./ticket-list.component.scss']
})
export class TicketListComponent {
  activeTicketId: string | null = null;
  
  tickets: Ticket[] = [
    {
      id: 'PROJ-123',
      title: 'Fix critical bug in user authentication flow',
      type: 'story'
    },
    {
      id: 'PROJ-124',
      title: 'Update API documentation for v2.0 release',
      type: 'task'
    },
    {
      id: null, // Draft ticket without ID
      title: 'Refactor dashboard component for better performance',
      type: 'bug'
    },
    {
      id: 'PROJ-126',
      title: 'Add dark mode support to mobile application',
      type: 'story'
    },
    {
      id: null, // Draft ticket without ID
      title: 'Design new onboarding flow for new users',
      type: 'task'
    },
    {
      id: 'PROJ-128',
      title: 'Memory leak in real-time notification service causing performance degradation',
      type: 'bug'
    }
  ];

  constructor(private sanitizer: DomSanitizer) { }

  getTypeIcon(type: string): SafeHtml {
    let svg = '';
    switch (type) {
      case 'story':
        svg = '<rect x="1" y="1" width="14" height="14" rx="2" />';
        break;
      case 'task':
        svg = '<path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z" />';
        break;
      case 'bug':
        svg = '<circle cx="8" cy="8" r="7" />';
        break;
      default:
        svg = '';
    }
    return this.sanitizer.bypassSecurityTrustHtml(svg);
  }

  selectTicket(ticket: Ticket): void {
    // Use title as identifier for draft tickets (without ID)
    this.activeTicketId = ticket.id || ticket.title;
  }

  isActive(ticket: Ticket): boolean {
    const identifier = ticket.id || ticket.title;
    return this.activeTicketId === identifier;
  }

  isDraft(ticket: Ticket): boolean {
    return ticket.id === null || ticket.id === '';
  }

  uploadToJira(ticket: Ticket, event: Event): void {
    event.stopPropagation(); // Prevent card selection when clicking upload
    console.log('Uploading ticket to Jira:', ticket);
    // Add your Jira upload logic here
  }
}







<div class="ticket-container">
    <div *ngFor="let ticket of tickets" 
         class="ticket-card card-{{ticket.type}}" 
         [class.active]="isActive(ticket)"
         [class.draft]="isDraft(ticket)"
         (click)="selectTicket(ticket)">
        
        <!-- Blinking dot indicator for active card -->
        <span class="active-indicator" *ngIf="isActive(ticket)"></span>
        
        <div class="ticket-header">
            <!-- Story Icon -->
            <svg *ngIf="ticket.type === 'story'" class="ticket-type type-story" viewBox="0 0 16 16" fill="currentColor">
                <rect x="1" y="1" width="14" height="14" rx="2" />
            </svg>
            
            <!-- Task Icon -->
            <svg *ngIf="ticket.type === 'task'" class="ticket-type type-task" viewBox="0 0 16 16" fill="currentColor">
                <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z" />
            </svg>
            
            <!-- Bug Icon -->
            <svg *ngIf="ticket.type === 'bug'" class="ticket-type type-bug" viewBox="0 0 16 16" fill="currentColor">
                <circle cx="8" cy="8" r="7" />
            </svg>
            
            <div class="ticket-title">{{ticket.title}}</div>
        </div>
        
        <div class="ticket-footer">
            <div class="ticket-meta">
                <!-- Show ticket ID if exists, otherwise show "Draft" label -->
                <span class="ticket-id" *ngIf="ticket.id">{{ticket.id}}</span>
                <span class="ticket-draft" *ngIf="!ticket.id">Draft</span>
            </div>
            
            <!-- Upload icon - only show for draft tickets -->
            <button class="upload-btn" 
                    *ngIf="isDraft(ticket)" 
                    (click)="uploadToJira(ticket, $event)"
                    title="Upload to Jira">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                    <polyline points="17 8 12 3 7 8"></polyline>
                    <line x1="12" y1="3" x2="12" y2="15"></line>
                </svg>
            </button>
        </div>
    </div>
</div>











/* Draft ticket label */
.ticket-draft {
    font-size: 0.6875rem;
    font-weight: 700;
    color: var(--sdlc-suite-ticket-id-color);
    letter-spacing: 1px;
    padding: 0.25rem 0.75rem;
    background: linear-gradient(135deg, #9ca3af 0%, #6b7280 100%);
    border-radius: 0.375rem;
    transition: all 0.3s ease;
    box-shadow: 0 0.125rem 0.75rem rgba(156, 163, 175, 0.3);
    text-transform: uppercase;
    position: relative;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    max-width: 120px;
}

.ticket-draft::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease;
}

.ticket-card:hover .ticket-draft {
    transform: translateX(-2px);
    box-shadow: 0 0.25rem 1rem rgba(156, 163, 175, 0.4);
}

.ticket-card:hover .ticket-draft::before {
    left: 100%;
}

/* Draft card styling */
.ticket-card.draft {
    border-style: dashed;
    opacity: 0.9;
}

.ticket-card.draft:hover {
    opacity: 1;
}

/* Upload button */
.upload-btn {
    width: 28px;
    height: 28px;
    background: linear-gradient(135deg, #10b981 0%, #059669 100%);
    border: none;
    border-radius: 0.375rem;
    color: #ffffff;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    padding: 0;
    flex-shrink: 0;
    box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
}

.upload-btn svg {
    width: 16px;
    height: 16px;
}

.upload-btn:hover {
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 6px 16px rgba(16, 185, 129, 0.5);
    background: linear-gradient(135deg, #059669 0%, #047857 100%);
}

.upload-btn:active {
    transform: translateY(0) scale(0.98);
}

/* Animation for upload button */
@keyframes pulse-upload {
    0%, 100% {
        box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }
    50% {
        box-shadow: 0 4px 20px rgba(16, 185, 129, 0.6);
    }
}

.upload-btn {
    animation: pulse-upload 2s ease-in-out infinite;
}

/* Light theme for draft label */
[data-theme="light"] .ticket-draft {
    background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
    box-shadow: 0 0.125rem 0.75rem rgba(107, 114, 128, 0.3);
}

[data-theme="light"] .ticket-card:hover .ticket-draft {
    box-shadow: 0 0.25rem 1rem rgba(107, 114, 128, 0.4);
}


