import { Component } from '@angular/core';

interface Task {
  name: string;
  description: string;
}

@Component({
  selector: 'app-sdlc',
  templateUrl: './sdlc.component.html',
  styleUrls: ['./sdlc.component.scss']
})
export class SdlcComponent {
  isActive = false;
  isMinimized = false;
  activeTab = 'crs';

  isCreatingTask = false;
  newTask: Task = { name: '', description: '' };
  tasks: Task[] = [];
  selectedTaskIndex: number | null = null;

  openSlide() {
    this.isActive = true;
  }

  closeSlide() {
    this.isActive = false;
    this.isMinimized = false;
  }

  minimizeSlide() {
    this.isMinimized = true;
  }

  maximizeSlide() {
    this.isMinimized = false;
  }

  setActiveTab(tab: string) {
    this.activeTab = tab;
  }

  startCreatingTask() {
    this.isCreatingTask = true;
    this.newTask = { name: '', description: '' };
  }

  saveTask() {
    if (this.newTask.name.trim()) {
      this.tasks.push({
        name: this.newTask.name,
        description: this.newTask.description
      });
      this.isCreatingTask = false;
      this.newTask = { name: '', description: '' };
    }
  }

  cancelTask() {
    this.isCreatingTask = false;
    this.newTask = { name: '', description: '' };
  }

  selectTask(index: number) {
    this.selectedTaskIndex = index;
    // You can add logic here to display task details in the center area
  }

  deleteTask(index: number) {
    this.tasks.splice(index, 1);
    if (this.selectedTaskIndex === index) {
      this.selectedTaskIndex = null;
    }
  }
}














<div class="page-container">
    <button class="trigger-button" (click)="openSlide()">Open Panel</button>

    <div class="slide-container" [class.active]="isActive" [class.minimized]="isMinimized">
        <div class="header">
            <div class="header-left">
                <div class="header-title">Header</div>
                <div class="header-tabs">
                    <button class="tab-btn" [class.active]="activeTab === 'crs'" (click)="setActiveTab('crs')">
                        CRS Maker
                    </button>
                    <button class="tab-btn" [class.active]="activeTab === 'srs'" (click)="setActiveTab('srs')">
                        SRS Maker
                    </button>
                    <button class="tab-btn" [class.active]="activeTab === 'task'" (click)="setActiveTab('task')">
                        Task Maker
                    </button>
                    <button class="tab-btn" [class.active]="activeTab === 'unittest'"
                        (click)="setActiveTab('unittest')">
                        Unit Testcase Maker
                    </button>
                </div>
            </div>
            <div class="header-controls">
                <button class="control-btn minimize" *ngIf="!isMinimized" (click)="minimizeSlide()">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="18" height="18" rx="2"></rect>
                        <line x1="9" y1="3" x2="9" y2="21"></line>
                    </svg>
                </button>
                <button class="control-btn maximize" *ngIf="isMinimized" (click)="maximizeSlide()">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="18" height="18" rx="2"></rect>
                    </svg>
                </button>
                <button class="control-btn close" (click)="closeSlide()">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
            </div>
        </div>

        <div class="content">
            <div class="layout-container">
                <aside class="left-sidebar">
                    <div class="sidebar-header">
                        <button class="plan-task-btn" *ngIf="!isCreatingTask" (click)="startCreatingTask()">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <line x1="12" y1="5" x2="12" y2="19"></line>
                                <line x1="5" y1="12" x2="19" y2="12"></line>
                            </svg>
                            Plan Task
                        </button>
                    </div>

                    <!-- Task Creation Form -->
                    <div class="task-form" *ngIf="isCreatingTask">
                        <div class="form-group">
                            <label for="taskName">Task Name</label>
                            <input type="text" id="taskName" [(ngModel)]="newTask.name" placeholder="Enter task name"
                                class="form-input" />
                        </div>
                        <div class="form-group">
                            <label for="taskDescription">Task Description</label>
                            <textarea id="taskDescription" [(ngModel)]="newTask.description"
                                placeholder="Enter task description" class="form-textarea" rows="3"></textarea>
                        </div>
                        <div class="form-actions">
                            <button class="btn-save" (click)="saveTask()">Save</button>
                            <button class="btn-cancel" (click)="cancelTask()">Cancel</button>
                        </div>
                    </div>

                    <!-- Task List -->
                    <div class="task-list">
                        <div class="task-list-header" *ngIf="tasks.length > 0">
                            <h3>Tasks</h3>
                        </div>
                        <div class="task-item" *ngFor="let task of tasks; let i = index"
                            [class.active]="selectedTaskIndex === i" (click)="selectTask(i)">
                            <div class="task-item-content">
                                <div class="task-item-name">{{ task.name }}</div>
                                <div class="task-item-description">{{ task.description }}</div>
                            </div>
                            <button class="task-delete-btn" (click)="deleteTask(i); $event.stopPropagation()">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <line x1="18" y1="6" x2="6" y2="18"></line>
                                    <line x1="6" y1="6" x2="18" y2="18"></line>
                                </svg>
                            </button>
                        </div>
                        <div class="empty-state" *ngIf="tasks.length === 0 && !isCreatingTask">
                            <p>No tasks yet. Click "Plan Task" to create one.</p>
                        </div>
                    </div>
                </aside>

                <main class="center-area">
                    <section class="body">

                    </section>

                    <footer class="footer">

                    </footer>
                </main>

                <aside class="right-sidebar">

                </aside>
            </div>
        </div>
    </div>
</div>















.page-container {
    font-family:  -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    overflow-x: hidden;
    background: #f5f5f5;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

.trigger-button {
    padding: 16px 48px;
    font-size: 1.2rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 30px;
    cursor: pointer;
    transition: transform 0.2s, box-shadow 0.2s;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
}

.trigger-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
}

.slide-container {
    position: fixed;
    top: 60px;
    left: -100vw;
    width: 100vw;
    height: calc(100vh - 60px);
    background-color: #111113;
    display: flex;
    flex-direction: column;
    color: #fff;
    transition: left 0.4s ease-out, width 0.4s ease-out;
    z-index: 1000;
}

.slide-container.active {
    left: 0;
}

.slide-container.minimized {
    width: 320px;
}

.slide-container>.header {
    background-color: #1a1a1c;
    padding: 16px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #2a2a2c;
    position: relative;
    overflow: hidden;
}

.slide-container>.header .header-left {
    display: flex;
    align-items: center;
}

.slide-container>.header .header-title {
    font-size: 1.0625rem;
    font-weight: 600;
    color: #fff;
}

.slide-container .header-tabs {
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 8px;
}

.slide-container.minimized .header-tabs {
    position: static;
    transform: none;
    flex-wrap: wrap;
    justify-content: center;
    width: 100%;
    margin-top: 10px;
}

.slide-container.minimized>.header {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
}

.slide-container.minimized>.header .header-left {
    width: 100%;
    justify-content: space-between;
}

.slide-container.minimized>.header .header-controls {
    position: absolute;
    top: 16px;
    right: 20px;
}

.slide-container .tab-btn {
    padding: 8px 16px;
    font-size: 0.875rem;
    font-weight: 500;
    background: rgba(255, 255, 255, 0.05);
    color: #a0a0a0;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s;
    white-space: nowrap;
}

.slide-container .tab-btn:hover {
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
}

.slide-container .tab-btn.active {
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    color: #fff;
    border-color: transparent;
}

.slide-container .header-controls {
    display: flex;
    gap: 12px;
}

.slide-container .control-btn {
    width: 32px;
    height: 32px;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    border-radius: 6px;
    color: #fff;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s;
}

.slide-container .control-btn:hover {
    background: rgba(255, 255, 255, 0.2);
}

.slide-container .control-btn.close:hover {
    background: #e74c3c;
}

.slide-container .control-btn svg {
    width: 18px;
    height: 18px;
}

.slide-container>.content {
    flex: 1;
    display: flex;
    overflow-y: auto;
    padding: 0;
}

.slide-container .layout-container {
    display: flex;
    width: 100%;
    height: 100%;
}

.slide-container .left-sidebar {
    width: 320px;
    background-color: #1a1a1c;
    border-right: 1px solid #2a2a2c;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
}

.slide-container .sidebar-header {
    padding: 20px;
    border-bottom: 1px solid #2a2a2c;
}

.slide-container .plan-task-btn {
    width: 100%;
    padding: 12px 20px;
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 0.9375rem;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    transition: all 0.2s;
}

.slide-container .plan-task-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.4);
}

.slide-container .plan-task-btn svg {
    width: 18px;
    height: 18px;
}

.slide-container .task-form {
    padding: 20px;
    border-bottom: 1px solid #2a2a2c;
}

.slide-container .form-group {
    margin-bottom: 16px;
}

.slide-container .form-group label {
    display: block;
    font-size: 0.8125rem;
    font-weight: 500;
    color: #a0a0a0;
    margin-bottom: 6px;
}

.slide-container .form-input,
.slide-container .form-textarea {
    width: 100%;
    padding: 10px 12px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 6px;
    color: #fff;
    font-size: 0.9125rem;
    font-family: inherit;
    transition: all 0.2s;
}

.slide-container .form-input:focus,
.slide-container .form-textarea:focus {
    outline: none;
    border-color: #6366f1;
    background: rgba(255, 255, 255, 0.08);
}

.slide-container .form-textarea {
    resize: vertical;
    min-height: 60px;
}

.slide-container .form-actions {
    display: flex;
    gap: 10px;
}

.slide-container .btn-save,
.slide-container .btn-cancel {
    flex: 1;
    padding: 10px;
    border: none;
    border-radius: 6px;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
}

.slide-container .btn-save {
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    color: white;
}

.slide-container .btn-save:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.4);
}

.slide-container .btn-cancel {
    background: rgba(255, 255, 255, 0.05);
    color: #a0a0a0;
}

.slide-container .btn-cancel:hover {
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
}

.slide-container .task-list {
    flex: 1;
    overflow-y: auto;
    padding: 8px 0;
}

.slide-container .task-list-header {
    padding: 16px 20px 12px;
}

.slide-container .task-list-header h3 {
    font-size: 0.875rem;
    font-weight: 600;
    color: #a0a0a0;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.slide-container .task-item {
    margin: 12px 16px;
    padding: 16px;
    border: 1px solid #2a2a2c;
    border-radius: 12px;
    background: #1e1e20;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    gap: 12px;
    position: relative;
    overflow: hidden;
}

.slide-container .task-item::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    width: 3px;
    height: 100%;
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.slide-container .task-item:hover::before {
    opacity: 1;
}

.slide-container .task-item:hover {
    background: #252527;
    border-color: rgba(99, 102, 241, 0.3);
    transform: translateY(-2px);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);
}

.slide-container .task-item.active {
    background: linear-gradient(135deg, rgba(99, 102, 241, 0.15) 0%, rgba(139, 92, 246, 0.15) 100%);
    border-color: rgba(99, 102, 241, 0.5);
}

.slide-container .task-item.active::before {
    opacity: 1;
    width: 3px;
}

.slide-container .task-item-content {
    flex: 1;
    min-width: 0;
}

.slide-container .task-item-name {
    font-size: 0.9375rem;
    font-weight: 600;
    color: #fff;
    margin-bottom: 6px;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    line-height: 1.4;
}

.slide-container .task-item-description {
    font-size: 0.8125rem;
    color: #a0a0a0;
    line-height: 1.5;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.slide-container .task-delete-btn {
    width: 32px;
    height: 32px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: #a0a0a0;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    flex-shrink: 0;
}

.slide-container .task-delete-btn:hover {
    background: linear-gradient(135deg, #ef4444, #dc2626);
    border-color: transparent;
    color: white;
    transform: scale(1.1);
}

.slide-container .task-delete-btn svg {
    width: 14px;
    height: 14px;
}

.slide-container .empty-state {
    padding: 40px 20px;
    text-align: center;
}

.slide-container .empty-state p {
    color: #808080;
    font-size: 0.9125rem;
    line-height: 1.5;
}

.slide-container .sidebar-content {
    padding: 20px;
}

.slide-container .center-area {
    flex: 1;
    display: flex;
    flex-direction: column;
    background-color: #111113;
    position: relative;
}

.slide-container .body {
    flex: 1;
    padding: 30px;
    overflow-y: auto;
}

.slide-container .footer {
    height: 140px;
    background-color: #1a1a1c;
    border-top: 1px solid #2a2a2c;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0 30px;
}

.slide-container .right-sidebar {
    width: 320px;
    background-color: #1a1a1c;
    border-left: 1px solid #2a2a2c;
    overflow-y: auto;
}





