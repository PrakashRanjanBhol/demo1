import React, { useState } from 'react';
import { Dialog } from 'primereact/dialog';
import { FaSearchPlus } from 'react-icons/fa';
import styles from './ChatImageStrip.module.css';

const ChatImageStrip = ({ images }) => {
  const [showModal, setShowModal] = useState(false);
  const [selectedImage, setSelectedImage] = useState(null);

  const previewImages = images.slice(0, 4);
  const moreCount = images.length - 4;

  const handleImageClick = (img) => {
    setSelectedImage(img);
  };

  return (
    <>
      <div className={styles.gridWrapper}>
        {previewImages.map((img, idx) => (
          <div key={idx} className={styles.imageContainer} onClick={() => handleImageClick(img)}>
            <img
              src={`data:image/*;base64,${img.base64Image}`}
              alt={img.fileName}
              className={styles.previewImage}
            />
            <div className={styles.overlay}>
              <FaSearchPlus className={styles.icon} />
            </div>
          </div>
        ))}

        {moreCount > 0 && (
          <button className={styles.moreButton} onClick={() => setShowModal(true)}>
            +{moreCount} More
          </button>
        )}
      </div>

      {/* Modal with all images in grid */}
      <Dialog
        header="All Images"
        visible={showModal}
        onHide={() => setShowModal(false)}
        style={{ width: '80vw' }}
        contentStyle={{ backgroundColor: '#181818' }}
        className="p-dialog-dark"
      >
        <div className={styles.modalGrid}>
          {images.map((img, idx) => (
            <div key={idx} className={styles.imageContainer} onClick={() => handleImageClick(img)}>
              <img
                src={`data:image/*;base64,${img.base64Image}`}
                alt={img.fileName}
                className={styles.modalImage}
              />
              <div className={styles.overlay}>
                <FaSearchPlus className={styles.icon} />
              </div>
            </div>
          ))}
        </div>
      </Dialog>

      {/* Zoom viewer for individual image */}
      <Dialog
        visible={!!selectedImage}
        onHide={() => setSelectedImage(null)}
        header={selectedImage?.fileName}
        style={{ width: '60vw' }}
        contentStyle={{ backgroundColor: '#181818', textAlign: 'center' }}
        className="p-dialog-dark"
      >
        {selectedImage && (
          <img
            src={`data:image/*;base64,${selectedImage.base64Image}`}
            alt={selectedImage.fileName}
            className={styles.zoomedImage}
          />
        )}
      </Dialog>
    </>
  );
};

export default ChatImageStrip;










.gridWrapper {
  display: grid;
  grid-template-columns: repeat(2, 100px);
  grid-template-rows: repeat(2, 100px);
  gap: 8px;
  position: relative;
}

.imageContainer {
  position: relative;
  overflow: hidden;
  border-radius: 6px;
  cursor: pointer;
  width: 100px;
  height: 100px;
}

.previewImage,
.modalImage {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
  border-radius: 6px;
}

.imageContainer:hover .previewImage,
.imageContainer:hover .modalImage {
  transform: scale(1.08);
}

.overlay {
  position: absolute;
  inset: 0;
  background: rgba(0, 0, 0, 0.4);
  opacity: 0;
  transition: opacity 0.3s ease;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 6px;
}

.imageContainer:hover .overlay {
  opacity: 1;
}

.icon {
  color: white;
  font-size: 20px;
}

.moreButton {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  background: linear-gradient(45deg, #007bff, #00c6ff);
  color: white;
  border: none;
  border-radius: 16px;
  padding: 6px 14px;
  cursor: pointer;
  font-weight: 500;
  z-index: 2;
}

/* Modal styles */
.modalGrid {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  justify-content: center;
  padding-top: 8px;
}

.zoomedImage {
  max-width: 100%;
  max-height: 70vh;
  object-fit: contain;
  border-radius: 8px;
}
