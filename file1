<div class="date-range-filter">
    <p-calendar [(ngModel)]="selectedRange" selectionMode="range" dateFormat="dd-mm-yy" placeholder="Select Date Range"
        (onSelect)="onDateRangeChange()">
    </p-calendar>
</div>

<div echarts [options]="chartOption" class="chart"></div>


import { Component, OnInit } from '@angular/core';
import { EChartsOption } from 'echarts';

@Component({
  selector: 'app-charts',
  templateUrl: './charts.component.html',
  styleUrls: ['./charts.component.scss'],
})
export class ChartsComponent implements OnInit {
  selectedRange: Date[] = [];
  chartOption: EChartsOption = {};

  ngOnInit() {
    // ðŸ”¹ Default: last 7 days (including today)
    const end = new Date();
    const start = new Date();
    start.setDate(end.getDate() - 6); // last 7 days
    this.selectedRange = [start, end];

    this.onDateRangeChange(); // load chart initially
  }

  onDateRangeChange() {
    if (!this.selectedRange || this.selectedRange.length < 2) return;
    const [start, end] = this.normalizeRange(this.selectedRange);

    this.fetchData(start, end).then((response) => {
      const grouped = response;
      const overallTotal = Object.values(grouped).reduce((a, b) => a + b, 0);
      this.updateChart(grouped, overallTotal);
    });
  }

  private normalizeRange(range: Date[]): [Date, Date] {
    const start = new Date(range[0]);
    const end = new Date(range[1] ?? range[0]);
    start.setHours(0, 0, 0, 0);
    end.setHours(23, 59, 59, 999);
    return [start, end];
  }

  // ðŸ”¹ Replace with HttpClient call
  private async fetchData(start: Date, end: Date): Promise<Record<string, number>> {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({
          Java: 10,
          Angular: 20,
          Python: 30,
        });
      }, 300);
    });
  }

  private updateChart(grouped: Record<string, number>, overallTotal: number) {
    this.chartOption = {
      backgroundColor: '#111113',
      title: {
        text: `Total Lines: ${overallTotal.toLocaleString()}`,
        left: 'center',
        top: 10,
        textStyle: { color: '#ffffff', fontSize: 16, fontWeight: 'bold' },
      },
      tooltip: {
        trigger: 'item',
        backgroundColor: '#1e1e1e',
        borderColor: '#333',
        textStyle: { color: '#fff' },
        formatter: (p: any) =>
          `${p.name}<br/>${p.value.toLocaleString()} lines (${p.percent}%)`,
      },
      legend: {
        type: 'scroll',
        bottom: 0,
        textStyle: { color: '#ffffff' },
      },
      series: [
        {
          name: 'Lines of Code',
          type: 'pie',
          radius: '65%',
          center: ['50%', '52%'],
          itemStyle: { borderRadius: 0, borderWidth: 0 },
          label: {
            color: '#ffffff',
            formatter: '{b}: {c}',
          },
          labelLine: { show: true },
          data: Object.entries(grouped).map(([name, value]) => ({
            name,
            value,
          })),
        },
      ],
      grid: {
        top: 80,
        bottom: 80,
      },
    };
  }
}
