// model-selector.component.ts
import { Component, EventEmitter, Output, HostListener, OnInit } from '@angular/core';

export interface ModelOption {
  id: string;
  name: string;
  status: 'active' | 'beta' | 'soon';
}

@Component({
  selector: 'app-model-selector',
  template: `
    <div class="model-selector">
      <div class="dropdown-container">
        <div 
          class="dropdown-trigger" 
          [class.active]="isDropdownOpen"
          (click)="toggleDropdown()"
          tabindex="0"
          role="combobox"
          [attr.aria-expanded]="isDropdownOpen"
          aria-haspopup="listbox">
          
          <div class="model-name">
            <span class="model-icon"></span>
            <span>{{ selectedModel?.name || 'Select Model' }}</span>
          </div>
          <span class="dropdown-arrow">â–¼</span>
        </div>
        
        <div 
          class="dropdown-menu" 
          [class.show]="isDropdownOpen"
          role="listbox">
          
          <div 
            *ngFor="let model of models; trackBy: trackByModelId"
            class="dropdown-item"
            [class.selected]="model.id === selectedModel?.id"
            (click)="selectModel(model)"
            role="option"
            [attr.aria-selected]="model.id === selectedModel?.id">
            
            <div class="item-info">
              <span class="model-icon"></span>
              <span class="item-name">{{ model.name }}</span>
            </div>
            <span 
              class="item-status"
              [ngClass]="{
                'status-active': model.status === 'active',
                'status-beta': model.status === 'beta',
                'status-soon': model.status === 'soon'
              }">
              {{ model.status === 'soon' ? 'Soon' : model.status }}
            </span>
          </div>
        </div>
      </div>
      
      <button 
        class="refresh-btn" 
        [class.spinning]="isRefreshing"
        (click)="refreshModels()"
        title="Refresh Models"
        type="button">
        <svg class="refresh-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/>
          <path d="M21 3v5h-5"/>
          <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/>
          <path d="M3 21v-5h5"/>
        </svg>
      </button>
    </div>
  `,
  styles: [`
    .model-selector {
      position: relative;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .dropdown-container {
      position: relative;
      display: inline-block;
    }

    .dropdown-trigger {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 16px;
      background: rgba(26, 26, 29, 0.9);
      border: 1px solid #333;
      border-radius: 8px;
      color: #ffffff;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 0.9rem;
      min-width: 160px;
      justify-content: space-between;
      outline: none;
    }

    .dropdown-trigger:hover {
      border-color: #667eea;
      background: rgba(102, 126, 234, 0.1);
    }

    .dropdown-trigger:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
    }

    .dropdown-trigger.active {
      border-color: #667eea;
      box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
    }

    .model-name {
      display: flex;
      align-items: center;
      gap: 6px;
    }

    .model-icon {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: linear-gradient(135deg, #667eea, #764ba2);
    }

    .dropdown-arrow {
      transition: transform 0.2s ease;
      color: #888;
    }

    .dropdown-trigger.active .dropdown-arrow {
      transform: rotate(180deg);
    }

    .dropdown-menu {
      position: absolute;
      top: calc(100% + 4px);
      left: 0;
      right: 0;
      background: rgba(26, 26, 29, 0.95);
      border: 1px solid #333;
      border-radius: 8px;
      backdrop-filter: blur(12px);
      opacity: 0;
      visibility: hidden;
      transform: translateY(-8px);
      transition: all 0.2s ease;
      z-index: 1000;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
    }

    .dropdown-menu.show {
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
    }

    .dropdown-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 12px 16px;
      cursor: pointer;
      transition: background 0.15s ease;
      border-bottom: 1px solid rgba(51, 51, 51, 0.5);
    }

    .dropdown-item:last-child {
      border-bottom: none;
    }

    .dropdown-item:hover {
      background: rgba(102, 126, 234, 0.1);
    }

    .dropdown-item.selected {
      background: rgba(102, 126, 234, 0.15);
      color: #667eea;
    }

    .item-info {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .item-name {
      font-size: 0.9rem;
      font-weight: 500;
    }

    .item-status {
      padding: 2px 6px;
      border-radius: 4px;
      font-size: 0.7rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.3px;
    }

    .status-active {
      background: rgba(34, 197, 94, 0.2);
      color: #22c55e;
    }

    .status-beta {
      background: rgba(251, 146, 60, 0.2);
      color: #fb923c;
    }

    .status-soon {
      background: rgba(156, 163, 175, 0.2);
      color: #9ca3af;
    }

    .refresh-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 36px;
      height: 36px;
      background: rgba(26, 26, 29, 0.9);
      border: 1px solid #333;
      border-radius: 8px;
      color: #888;
      cursor: pointer;
      transition: all 0.2s ease;
      outline: none;
    }

    .refresh-btn:hover {
      border-color: #667eea;
      color: #667eea;
      background: rgba(102, 126, 234, 0.1);
    }

    .refresh-btn:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
    }

    .refresh-btn.spinning {
      animation: spin 1s linear;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }

    .refresh-icon {
      width: 16px;
      height: 16px;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .dropdown-trigger {
        min-width: 140px;
        font-size: 0.85rem;
      }
    }
  `]
})
export class ModelSelectorComponent implements OnInit {
  @Output() modelChanged = new EventEmitter<ModelOption>();
  @Output() modelsRefreshed = new EventEmitter<void>();

  models: ModelOption[] = [
    { id: 'gpt-4-turbo', name: 'GPT-4 Turbo', status: 'active' },
    { id: 'claude-3.5-sonnet', name: 'Claude 3.5 Sonnet', status: 'active' },
    { id: 'gemini-pro', name: 'Gemini Pro', status: 'active' },
    { id: 'llama-3.1-70b', name: 'LLaMA 3.1 70B', status: 'beta' },
    { id: 'gpt-5', name: 'GPT-5', status: 'soon' }
  ];

  selectedModel: ModelOption | null = null;
  isDropdownOpen = false;
  isRefreshing = false;

  ngOnInit(): void {
    // Set default selection
    this.selectedModel = this.models[0];
  }

  toggleDropdown(): void {
    this.isDropdownOpen = !this.isDropdownOpen;
  }

  selectModel(model: ModelOption): void {
    if (model.status === 'soon') {
      // Optionally prevent selection of "soon" models
      return;
    }

    this.selectedModel = model;
    this.isDropdownOpen = false;
    this.modelChanged.emit(model);
  }

  refreshModels(): void {
    this.isRefreshing = true;
    
    // Simulate API call
    setTimeout(() => {
      this.isRefreshing = false;
      this.modelsRefreshed.emit();
      console.log('Models refreshed!');
    }, 1000);
  }

  trackByModelId(index: number, model: ModelOption): string {
    return model.id;
  }

  // Close dropdown when clicking outside
  @HostListener('document:click', ['$event'])
  onDocumentClick(event: Event): void {
    const target = event.target as HTMLElement;
    if (!target.closest('.model-selector')) {
      this.isDropdownOpen = false;
    }
  }

  // Handle keyboard navigation
  @HostListener('keydown', ['$event'])
  onKeyDown(event: KeyboardEvent): void {
    if (event.key === 'Escape') {
      this.isDropdownOpen = false;
    }
  }
}

// ========================================
// USAGE EXAMPLE - app.component.ts
// ========================================

/*
import { Component } from '@angular/core';
import { ModelOption } from './model-selector/model-selector.component';

@Component({
  selector: 'app-root',
  template: `
    <div class="app-header">
      <div class="logo">AI Assistant</div>
      
      <app-model-selector 
        (modelChanged)="onModelChanged($event)"
        (modelsRefreshed)="onModelsRefreshed()">
      </app-model-selector>
    </div>
    
    <div class="app-content">
      <h2>Selected Model: {{ currentModel?.name || 'None' }}</h2>
      <p>Model ID: {{ currentModel?.id || 'None' }}</p>
    </div>
  `,
  styles: [`
    .app-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 16px 24px;
      background: rgba(26, 26, 29, 0.8);
      border-bottom: 1px solid #333;
      color: white;
    }

    .logo {
      font-size: 1.4rem;
      font-weight: 700;
      color: #667eea;
    }

    .app-content {
      padding: 40px 24px;
      color: white;
      text-align: center;
    }

    :host {
      display: block;
      background: #111113;
      min-height: 100vh;
    }
  `]
})
export class AppComponent {
  currentModel: ModelOption | null = null;

  onModelChanged(model: ModelOption): void {
    this.currentModel = model;
    console.log('Model changed to:', model);
    
    // Add your model change logic here
    // For example: this.apiService.setModel(model.id);
  }

  onModelsRefreshed(): void {
    console.log('Models refreshed');
    
    // Add your refresh logic here
    // For example: this.apiService.refreshModels();
  }
}
*/

// ========================================
// MODULE SETUP - app.module.ts
// ========================================

/*
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';

import { AppComponent } from './app.component';
import { ModelSelectorComponent } from './model-selector/model-selector.component';

@NgModule({
  declarations: [
    AppComponent,
    ModelSelectorComponent
  ],
  imports: [
    BrowserModule,
    CommonModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
*/








<app-model-selector 
  (modelChanged)="onModelChanged($event)"
  (modelsRefreshed)="onModelsRefreshed()">
</app-model-selector>
