 @ViewChild('carouselContainer') carouselContainer!: ElementRef;
  carouselScrollPosition = 0;
  maxCarouselScroll = 0;
  showCarouselNav = false;

  cardWidth = 180;
  gap = 12;
  visibleCards = 4;

  private resizeObserver?: ResizeObserver;

  ngAfterViewInit() {
    setTimeout(() => {
      this.calculateCarouselDimensions();
      this.setupResizeObserver();
    }, 100);

    // Listen to scroll events to update button states
    if (this.carouselContainer) {
      this.carouselContainer.nativeElement.addEventListener('scroll', () => {
        this.carouselScrollPosition = this.carouselContainer.nativeElement.scrollLeft;
      });
    }
  }

  setupResizeObserver() {
    if (this.carouselContainer) {
      this.resizeObserver = new ResizeObserver(() => {
        this.calculateCarouselDimensions();
      });
      this.resizeObserver.observe(this.carouselContainer.nativeElement);
    }
  }

  calculateCarouselDimensions() {
    if (this.carouselContainer) {
      const container = this.carouselContainer.nativeElement;
      const totalCards = container.children.length;
      const containerWidth = container.offsetWidth;

      // Calculate actual card width from first card if available
      if (container.children.length > 0) {
        const firstCard = container.children[0] as HTMLElement;
        this.cardWidth = firstCard.offsetWidth;
      }

      // Calculate total content width including all gaps
      const totalContentWidth = (totalCards * this.cardWidth) + ((totalCards - 1) * this.gap);

      // Show navigation only if content overflows
      this.showCarouselNav = totalContentWidth > containerWidth;

      // Calculate max scroll position (content width - container width)
      this.maxCarouselScroll = Math.max(0, totalContentWidth - containerWidth + 12); // +12 for padding

      console.log('Container Width:', containerWidth);
      console.log('Total Content Width:', totalContentWidth);
      console.log('Max Scroll:', this.maxCarouselScroll);
      console.log('Show Nav:', this.showCarouselNav);
    }
  }

  scrollCarousel(direction: 'prev' | 'next') {
    const container = this.carouselContainer.nativeElement;
    const scrollAmount = (this.cardWidth + this.gap) * this.visibleCards;

    if (direction === 'next') {
      const newPosition = Math.min(
        this.carouselScrollPosition + scrollAmount,
        this.maxCarouselScroll
      );
      container.scrollTo({
        left: newPosition,
        behavior: 'smooth'
      });
    } else {
      const newPosition = Math.max(
        this.carouselScrollPosition - scrollAmount,
        0
      );
      container.scrollTo({
        left: newPosition,
        behavior: 'smooth'
      });
    }
  }

  ngOnDestroy() {
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }
  }













/* Action Cards Carousel Container */
.action-cards-carousel {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    position: relative;
    flex: 1;
    min-width: 0;
    overflow: hidden;
}

.action-cards-wrapper {
    display: flex;
    gap: 0.75rem;
    overflow-x: auto;
    overflow-y: visible;
    scroll-behavior: smooth;
    flex: 1;
    padding: 0.25rem 0.5rem 0.25rem 0;
    -ms-overflow-style: none;
    scrollbar-width: none;
    /* Prevent last card from being cut off */
    padding-right: 0.75rem;
}

.action-cards-wrapper::-webkit-scrollbar {
    display: none;
}

.action-card {
    display: flex;
    align-items: center;
    gap: 0.625rem;
    padding: 0.75rem 1rem;
    background: var(--sdlc-card-bg);
    border: 1px solid var(--sdlc-card-border);
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    cursor: pointer;
    min-width: 180px;
    flex-shrink: 0;
    box-sizing: border-box;
}

.action-card:hover {
    background: var(--sdlc-hover-bg);
    border-color: rgba(102, 126, 234, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.action-card.active {
    background: linear-gradient(135deg, rgba(99, 102, 241, 0.2), rgba(139, 92, 246, 0.2));
    border-color: var(--sdlc-accent-violet);
}

.action-icon {
    width: 2rem;
    height: 2rem;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    transition: all 0.2s ease;
}

.action-icon svg {
    width: 1rem;
    height: 1rem;
    stroke-width: 2;
}

.action-icon.crs {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2) 0%, rgba(37, 99, 235, 0.2) 100%);
}

.action-icon.crs svg {
    stroke: var(--sdlc-accent-blue);
}

.action-card:hover .action-icon.crs,
.action-card.active .action-icon.crs {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.3) 0%, rgba(37, 99, 235, 0.3) 100%);
}

.action-icon.srs {
    background: linear-gradient(135deg, rgba(139, 92, 246, 0.2) 0%, rgba(124, 58, 237, 0.2) 100%);
}

.action-icon.srs svg {
    stroke: var(--sdlc-accent-purple);
}

.action-card:hover .action-icon.srs,
.action-card.active .action-icon.srs {
    background: linear-gradient(135deg, rgba(139, 92, 246, 0.3) 0%, rgba(124, 58, 237, 0.3) 100%);
}

.action-icon.task {
    background: linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(5, 150, 105, 0.2) 100%);
}

.action-icon.task svg {
    stroke: var(--sdlc-accent-green);
}

.action-card:hover .action-icon.task,
.action-card.active .action-icon.task {
    background: linear-gradient(135deg, rgba(16, 185, 129, 0.3) 0%, rgba(5, 150, 105, 0.3) 100%);
}

.action-icon.testcase {
    background: linear-gradient(135deg, rgba(249, 115, 22, 0.2) 0%, rgba(234, 88, 12, 0.2) 100%);
}

.action-icon.testcase svg {
    stroke: var(--sdlc-accent-orange);
}

.action-card:hover .action-icon.testcase,
.action-card.active .action-icon.testcase {
    background: linear-gradient(135deg, rgba(249, 115, 22, 0.3) 0%, rgba(234, 88, 12, 0.3) 100%);
}

.action-content {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;
}

.action-content h4 {
    font-size: 0.8125rem;
    font-weight: 600;
    color: var(--sdlc-text-primary);
    margin: 0;
    letter-spacing: -0.01em;
    white-space: nowrap;
}

.action-content p {
    font-size: 0.6875rem;
    color: var(--sdlc-text-secondary);
    margin: 0;
    line-height: 1.3;
    white-space: nowrap;
}

/* Carousel Navigation Buttons */
.carousel-nav {
    width: 32px;
    height: 32px;
    background: var(--sdlc-card-bg);
    border: 1px solid var(--sdlc-card-border);
    border-radius: 50%;
    color: var(--sdlc-text-primary);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    flex-shrink: 0;
    padding: 0;
    z-index: 10;
}

.carousel-nav:hover:not(:disabled) {
    background: var(--sdlc-hover-bg);
    border-color: rgba(102, 126, 234, 0.5);
    transform: scale(1.1);
}

.carousel-nav:disabled {
    opacity: 0.3;
    cursor: not-allowed;
}

.carousel-nav svg {
    width: 18px;
    height: 18px;
}

/* Hide carousel in minimized mode */
.slide-container.minimized .action-cards-carousel {
    display: none;
}

