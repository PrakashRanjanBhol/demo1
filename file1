// app.component.ts
import { Component } from '@angular/core';

interface LogEntry {
  timestamp: string;
  type: 'info' | 'warning' | 'error';
  message: string;
}

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  isLoggerOpen = false;
  logEntries: LogEntry[] = [
    { timestamp: '10:23:45', type: 'info', message: '[INFO] Application started successfully' },
    { timestamp: '10:23:46', type: 'info', message: '[INFO] Database connection established' },
    { timestamp: '10:24:12', type: 'warning', message: '[WARN] High memory usage detected (85%)' },
    { timestamp: '10:24:45', type: 'info', message: '[INFO] User authentication successful' },
    { timestamp: '10:25:03', type: 'error', message: '[ERROR] Failed to load configuration file' },
    { timestamp: '10:25:15', type: 'info', message: '[INFO] Fallback configuration loaded' },
    { timestamp: '10:25:30', type: 'info', message: '[INFO] System ready for requests' }
  ];

  private logMessages = [
    '[INFO] Processing user request',
    '[INFO] Cache updated successfully',
    '[WARN] Slow query detected',
    '[ERROR] Network timeout occurred',
    '[INFO] Background task completed',
    '[WARN] Disk space low (15% remaining)',
    '[INFO] Session cleanup completed'
  ];

  private logTypes: ('info' | 'warning' | 'error')[] = ['info', 'warning', 'error'];
  private intervalId: any;

  ngOnInit() {
    this.startAutoLogging();
  }

  ngOnDestroy() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
    }
  }

  toggleLogger(): void {
    this.isLoggerOpen = !this.isLoggerOpen;
  }

  private startAutoLogging(): void {
    this.intervalId = setInterval(() => {
      this.addRandomLogEntry();
    }, 3000);
  }

  private addRandomLogEntry(): void {
    const now = new Date();
    const timestamp = now.toTimeString().split(' ')[0];
    const randomType = this.logTypes[Math.floor(Math.random() * this.logTypes.length)];
    const randomMessage = this.logMessages[Math.floor(Math.random() * this.logMessages.length)];

    const newEntry: LogEntry = {
      timestamp,
      type: randomType,
      message: randomMessage
    };

    this.logEntries.push(newEntry);

    // Keep only last 50 entries
    if (this.logEntries.length > 50) {
      this.logEntries = this.logEntries.slice(-50);
    }

    // Auto-scroll to bottom after view update
    setTimeout(() => {
      const loggerContent = document.querySelector('.logger-content');
      if (loggerContent) {
        loggerContent.scrollTop = loggerContent.scrollHeight;
      }
    }, 0);
  }
}

// app.component.html
<div class="app-container">
  <!-- Main content area -->
  <div class="main-content">
    <h1 class="demo-title">Angular Sliding Logger Demo</h1>
    <p class="demo-description">
      This Angular component demonstrates a sidebar with a sliding logger container. 
      Click the logger icon at the bottom of the sidebar to slide up the logger panel 
      from bottom to top. The logger shows at 50% height as requested.
    </p>
  </div>

  <!-- Sidebar container -->
  <div class="sidebar">
    <!-- Main sidebar content -->
    <div class="sidebar-content">
      <h2 class="sidebar-title">Sidebar</h2>
      <div class="sidebar-item">Dashboard</div>
      <div class="sidebar-item">Analytics</div>
      <div class="sidebar-item">Reports</div>
      <div class="sidebar-item">Settings</div>
      <div class="sidebar-item">Profile</div>
      <div class="sidebar-item">Help & Support</div>
    </div>

    <!-- Logger trigger button -->
    <button class="logger-trigger" (click)="toggleLogger()">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
      </svg>
    </button>
  </div>

  <!-- Logger container -->
  <div class="logger-container" [class.active]="isLoggerOpen">
    <!-- Logger header -->
    <div class="logger-header">
      <div class="logger-title">
        <svg viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
        </svg>
        System Logger
      </div>
      <button class="collapse-btn" (click)="toggleLogger()">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M19 14l-7-7-7 7"/>
        </svg>
      </button>
    </div>

    <!-- Logger content -->
    <div class="logger-content">
      <div 
        *ngFor="let entry of logEntries" 
        class="log-entry"
        [ngClass]="entry.type">
        <span class="log-timestamp">{{ entry.timestamp }}</span>
        {{ entry.message }}
      </div>
    </div>
  </div>
</div>

// app.component.css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.app-container {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: #f0f2f5;
  height: 100vh;
  overflow-x: hidden;
}

/* Main content area */
.main-content {
  margin-right: 320px;
  padding: 40px;
  height: 100vh;
  background: #f0f2f5;
}

.demo-title {
  font-size: 32px;
  font-weight: 700;
  color: #1e293b;
  margin-bottom: 16px;
}

.demo-description {
  color: #64748b;
  font-size: 16px;
  line-height: 1.6;
}

/* Main sidebar container */
.sidebar {
  position: fixed;
  right: 0;
  top: 0;
  width: 320px;
  height: 100vh;
  background: #ffffff;
  border-left: 1px solid #e1e5e9;
  box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
  display: flex;
  flex-direction: column;
}

/* Main content of sidebar */
.sidebar-content {
  flex: 1;
  padding: 20px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.sidebar-title {
  font-size: 24px;
  font-weight: 600;
  margin-bottom: 20px;
}

.sidebar-item {
  padding: 12px 0;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  font-size: 14px;
  opacity: 0.9;
  cursor: pointer;
  transition: opacity 0.2s ease;
}

.sidebar-item:hover {
  opacity: 1;
}

/* Logger trigger button */
.logger-trigger {
  position: absolute;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  width: 50px;
  height: 50px;
  background: #2563eb;
  border: none;
  border-radius: 50%;
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
  transition: all 0.3s ease;
  z-index: 10;
}

.logger-trigger:hover {
  background: #1d4ed8;
  transform: translateX(-50%) translateY(-2px);
  box-shadow: 0 6px 20px rgba(37, 99, 235, 0.4);
}

.logger-trigger svg {
  width: 24px;
  height: 24px;
}

/* Logger container */
.logger-container {
  position: fixed;
  right: 0;
  bottom: 0;
  width: 320px;
  height: 50vh;
  background: #ffffff;
  border-top: 1px solid #e1e5e9;
  border-left: 1px solid #e1e5e9;
  box-shadow: -2px -2px 20px rgba(0, 0, 0, 0.15);
  transform: translateY(100%);
  transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  z-index: 20;
  display: flex;
  flex-direction: column;
}

.logger-container.active {
  transform: translateY(0);
}

/* Logger header */
.logger-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 16px 20px;
  background: #f8fafc;
  border-bottom: 1px solid #e1e5e9;
  min-height: 60px;
}

.logger-title {
  font-size: 16px;
  font-weight: 600;
  color: #1e293b;
  display: flex;
  align-items: center;
  gap: 8px;
}

.collapse-btn {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  color: #64748b;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.collapse-btn:hover {
  background: #e2e8f0;
  color: #334155;
}

.collapse-btn svg {
  width: 20px;
  height: 20px;
}

/* Logger content */
.logger-content {
  flex: 1;
  padding: 16px 20px;
  overflow-y: auto;
  background: #ffffff;
}

.log-entry {
  padding: 8px 12px;
  margin-bottom: 8px;
  border-radius: 6px;
  font-family: 'Monaco', 'Consolas', monospace;
  font-size: 12px;
  line-height: 1.4;
  border-left: 3px solid #e2e8f0;
  transition: all 0.2s ease;
}

.log-entry:hover {
  background-color: rgba(0, 0, 0, 0.02);
}

.log-entry.info {
  background: #f0f9ff;
  border-left-color: #0ea5e9;
  color: #0c4a6e;
}

.log-entry.warning {
  background: #fffbeb;
  border-left-color: #f59e0b;
  color: #92400e;
}

.log-entry.error {
  background: #fef2f2;
  border-left-color: #ef4444;
  color: #991b1b;
}

.log-timestamp {
  opacity: 0.6;
  font-size: 10px;
  margin-right: 8px;
  font-weight: 500;
}

/* Scrollbar styling */
.logger-content::-webkit-scrollbar {
  width: 6px;
}

.logger-content::-webkit-scrollbar-track {
  background: #f1f1f1;
}

.logger-content::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 3px;
}

.logger-content::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .main-content {
    margin-right: 0;
    padding: 20px;
  }
  
  .sidebar {
    width: 100vw;
    max-width: 320px;
  }
  
  .logger-container {
    width: 100vw;
    max-width: 320px;
  }
}

// app.module.ts (if needed)
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';

import { AppComponent } from './app.component';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    CommonModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
