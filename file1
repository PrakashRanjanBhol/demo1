import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';
import { html } from '@codemirror/lang-html';
import { css } from '@codemirror/lang-css';
import { javascript } from '@codemirror/lang-javascript';

@Component({
  selector: 'app-chat',
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.css']
})
export class ChatComponent implements OnChanges {
  @Input() chunk: string = '';

  htmlCode: string = '';
  cssCode: string = '';
  jsCode: string = '';

  htmlOptions: any;
  cssOptions: any;
  jsOptions: any;

  private currentLang: string | null = null;
  private isInsideBlock = false;
  private waitingForLang = false;

  constructor() {
    // default CodeMirror options for read-only + proper indentation
    this.htmlOptions = { value: '', extensions: [html()], lineNumbers: true, readOnly: true };
    this.cssOptions = { value: '', extensions: [css()], lineNumbers: true, readOnly: true };
    this.jsOptions = { value: '', extensions: [javascript()], lineNumbers: true, readOnly: true };
  }

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['chunk'] && this.chunk) {
      this.processChunk(this.chunk);
      this.updateEditorValues();
    }
  }

  private processChunk(chunk: string): void {
    const lines = chunk.split(/\r?\n/);

    for (let line of lines) {
      if (line.trim().startsWith('```')) {
        if (!this.isInsideBlock) {
          this.isInsideBlock = true;
          const lang = line.replace(/```/, '').trim().toLowerCase();
          if (lang) this.currentLang = lang;
          else this.waitingForLang = true;
        } else {
          this.isInsideBlock = false;
          this.currentLang = null;
          this.waitingForLang = false;
        }
        continue;
      }

      if (this.waitingForLang) {
        const lang = line.trim().toLowerCase();
        if (lang) {
          this.currentLang = lang;
          this.waitingForLang = false;
          continue;
        }
      }

      if (this.isInsideBlock && this.currentLang) {
        switch (this.currentLang) {
          case 'html':
            this.htmlCode += line + '\n';
            break;
          case 'css':
            this.cssCode += line + '\n';
            break;
          case 'js':
          case 'javascript':
            this.jsCode += line + '\n';
            break;
        }
      }
    }
  }

  private updateEditorValues(): void {
    this.htmlOptions = { ...this.htmlOptions, value: this.htmlCode };
    this.cssOptions = { ...this.cssOptions, value: this.cssCode };
    this.jsOptions = { ...this.jsOptions, value: this.jsCode };
  }
}
