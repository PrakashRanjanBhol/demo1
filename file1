// signup.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl, ValidationErrors } from '@angular/forms';

@Component({
  selector: 'app-signup',
  templateUrl: './signup.component.html',
  styleUrls: ['./signup.component.css']
})
export class SignupComponent implements OnInit {
  signupForm: FormGroup;
  isLoading = false;
  secretQuestions = [
    'What is your mother\'s maiden name?',
    'What was the name of your first pet?',
    'What city were you born in?',
    'What is your favorite book?',
    'What was your childhood nickname?'
  ];

  constructor(private fb: FormBuilder) {
    this.signupForm = this.fb.group({
      email: ['', [Validators.required, this.emailValidator]],
      username: [{ value: '', disabled: true }, Validators.required],
      password: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(12)]],
      confirmPassword: ['', Validators.required],
      secretQuestion: ['', Validators.required],
      secretAnswer: ['', Validators.required]
    }, { validators: this.passwordMatchValidator });
  }

  ngOnInit(): void {
    // Watch email changes to auto-fill username
    this.signupForm.get('email')?.valueChanges.subscribe(email => {
      if (email) {
        const username = email.split('@')[0];
        this.signupForm.get('username')?.setValue(username, { emitEvent: false });
      } else {
        this.signupForm.get('username')?.setValue('', { emitEvent: false });
      }
    });
  }

  // Custom email validator for specific domains
  emailValidator(control: AbstractControl): ValidationErrors | null {
    const email = control.value;
    if (!email) return null;

    const validDomains = ['@test.com', '@sample.test.com'];
    const isValid = validDomains.some(domain => email.endsWith(domain));
    
    return isValid ? null : { invalidDomain: true };
  }

  // Password match validator
  passwordMatchValidator(control: AbstractControl): ValidationErrors | null {
    const password = control.get('password')?.value;
    const confirmPassword = control.get('confirmPassword')?.value;

    if (!password || !confirmPassword) return null;

    return password === confirmPassword ? null : { passwordMismatch: true };
  }

  get isFormValid(): boolean {
    return this.signupForm.valid;
  }

  get emailErrors(): string {
    const emailControl = this.signupForm.get('email');
    if (emailControl?.hasError('required') && emailControl.touched) {
      return 'Email is required';
    }
    if (emailControl?.hasError('invalidDomain') && emailControl.touched) {
      return 'Email must be @test.com or @sample.test.com';
    }
    return '';
  }

  get passwordErrors(): string {
    const passwordControl = this.signupForm.get('password');
    if (passwordControl?.hasError('required') && passwordControl.touched) {
      return 'Password is required';
    }
    if (passwordControl?.hasError('minlength') && passwordControl.touched) {
      return 'Password must be at least 6 characters';
    }
    if (passwordControl?.hasError('maxlength') && passwordControl.touched) {
      return 'Password must not exceed 12 characters';
    }
    return '';
  }

  get confirmPasswordErrors(): string {
    const confirmPasswordControl = this.signupForm.get('confirmPassword');
    if (confirmPasswordControl?.hasError('required') && confirmPasswordControl.touched) {
      return 'Confirm password is required';
    }
    if (this.signupForm.hasError('passwordMismatch') && confirmPasswordControl?.touched) {
      return 'Passwords do not match';
    }
    return '';
  }

  onSignup(): void {
    if (!this.isFormValid) return;

    this.isLoading = true;

    const formData = {
      email: this.signupForm.get('email')?.value,
      username: this.signupForm.get('username')?.value,
      password: this.signupForm.get('password')?.value,
      secretQuestion: this.signupForm.get('secretQuestion')?.value,
      secretAnswer: this.signupForm.get('secretAnswer')?.value
    };

    // Simulate API call
    this.mockSignupApiCall(formData).then(
      (response) => {
        this.isLoading = false;
        console.log('Signup successful:', response);
        // Handle successful signup (e.g., navigate to login or dashboard)
      },
      (error) => {
        this.isLoading = false;
        console.error('Signup failed:', error);
        // Handle error
      }
    );
  }

  // Mock API call - Replace with actual HTTP service
  private mockSignupApiCall(data: any): Promise<any> {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        // Simulate successful signup
        resolve({ success: true, message: 'Account created successfully' });
      }, 2000);
    });
  }
}

// ============================================
// signup.component.html
// ============================================
<div class="signup-container">
  <div class="signup-card">
    <h1 class="signup-title">
      <span class="app-name">Test</span>
    </h1>
    <p class="signup-subtitle">Create your account</p>

    <form [formGroup]="signupForm" (ngSubmit)="onSignup()">
      <div class="form-row">
        <!-- Email Field -->
        <div class="form-group">
          <label for="email">
            Email
            <span class="required">*</span>
          </label>
          <input
            type="email"
            id="email"
            formControlName="email"
            [class.error]="emailErrors"
            placeholder="user@test.com"
          />
          <span class="error-text" *ngIf="emailErrors">{{ emailErrors }}</span>
        </div>

        <!-- Username Field (Read-only) -->
        <div class="form-group">
          <label for="username">
            Username
            <span class="required">*</span>
          </label>
          <input
            type="text"
            id="username"
            formControlName="username"
            placeholder="Auto-filled from email"
            readonly
          />
        </div>
      </div>

      <div class="form-row">
        <!-- Password Field -->
        <div class="form-group">
          <label for="password">
            Password
            <span class="required">*</span>
            <span class="info-icon" title="Password must be 6-12 characters">ℹ️</span>
          </label>
          <input
            type="password"
            id="password"
            formControlName="password"
            [class.error]="passwordErrors"
            placeholder="Enter password"
          />
          <span class="error-text" *ngIf="passwordErrors">{{ passwordErrors }}</span>
        </div>

        <!-- Confirm Password Field -->
        <div class="form-group">
          <label for="confirmPassword">
            Confirm Password
            <span class="required">*</span>
          </label>
          <input
            type="password"
            id="confirmPassword"
            formControlName="confirmPassword"
            [class.error]="confirmPasswordErrors"
            placeholder="Re-enter password"
          />
          <span class="error-text" *ngIf="confirmPasswordErrors">{{ confirmPasswordErrors }}</span>
        </div>
      </div>

      <div class="form-row">
        <!-- Secret Question Dropdown -->
        <div class="form-group">
          <label for="secretQuestion">
            Secret Question
            <span class="required">*</span>
          </label>
          <select
            id="secretQuestion"
            formControlName="secretQuestion"
            [class.error]="signupForm.get('secretQuestion')?.invalid && signupForm.get('secretQuestion')?.touched"
          >
            <option value="" disabled selected>Select a question</option>
            <option *ngFor="let question of secretQuestions" [value]="question">
              {{ question }}
            </option>
          </select>
        </div>

        <!-- Secret Answer Field -->
        <div class="form-group">
          <label for="secretAnswer">
            Secret Answer
            <span class="required">*</span>
          </label>
          <input
            type="text"
            id="secretAnswer"
            formControlName="secretAnswer"
            [class.error]="signupForm.get('secretAnswer')?.invalid && signupForm.get('secretAnswer')?.touched"
            placeholder="Enter your answer"
          />
        </div>
      </div>

      <!-- Signup Button -->
      <button
        type="submit"
        class="signup-btn"
        [disabled]="!isFormValid || isLoading"
      >
        <span class="spinner" *ngIf="isLoading"></span>
        {{ isLoading ? 'Signing Up...' : 'Sign Up' }}
      </button>
    </form>

    <p class="login-link">
      Already have an account? <a href="/login">Login here</a>
    </p>
  </div>
</div>

// ============================================
// signup.component.css
// ============================================
.signup-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: calc(100vh - 3.75rem);
  padding: 1.25rem;
}

.signup-card {
  background: #ffffff;
  border-radius: 0.75rem;
  padding: 1.875rem;
  width: 100%;
  max-width: 50rem;
  box-shadow: 0 0.25rem 1.5rem rgba(102, 126, 234, 0.08),
              0 0.125rem 0.5rem rgba(102, 126, 234, 0.06);
  animation: cardFloat 3s ease-in-out infinite;
}

@keyframes cardFloat {
  0%, 100% {
    box-shadow: 0 0.25rem 1.5rem rgba(102, 126, 234, 0.08),
                0 0.125rem 0.5rem rgba(102, 126, 234, 0.06);
    transform: translateY(0);
  }
  50% {
    box-shadow: 0 0.5rem 2rem rgba(102, 126, 234, 0.15),
                0 0.25rem 0.75rem rgba(102, 126, 234, 0.1);
    transform: translateY(-0.25rem);
  }
}

.signup-title {
  font-size: 1.5rem;
  font-weight: 700;
  color: #2d3748;
  margin: 0 0 0.375rem 0;
  text-align: center;
}

.app-name {
  color: #2d3748;
  font-size: 1.75rem;
  font-weight: 600;
  letter-spacing: 0.0625rem;
  position: relative;
  display: inline-block;
}

.signup-subtitle {
  font-size: 0.8125rem;
  color: #718096;
  margin: 0 0 1.5rem 0;
  text-align: center;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.25rem;
  margin-bottom: 1rem;
}

.form-group {
  display: flex;
  flex-direction: column;
}

.form-group label {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  font-size: 0.875rem;
  font-weight: 500;
  color: #4a5568;
  margin-bottom: 0.5rem;
}

.required {
  color: #f56565;
  font-size: 0.875rem;
}

.info-icon {
  font-size: 0.875rem;
  cursor: help;
  color: #667eea;
}

.form-group input[type="text"],
.form-group input[type="email"],
.form-group input[type="password"],
.form-group select {
  width: 100%;
  padding: 0.625rem 0.875rem;
  font-size: 0.875rem;
  border: 1.5px solid #cbd5e0;
  border-radius: 0.5rem;
  transition: all 0.3s ease;
  box-sizing: border-box;
  background-color: #ffffff;
}

.form-group input[readonly] {
  background-color: #f7fafc;
  color: #718096;
  cursor: not-allowed;
}

.form-group input[type="text"]:focus,
.form-group input[type="email"]:focus,
.form-group input[type="password"]:focus,
.form-group select:focus {
  outline: none;
  border-color: #667eea;
  border-width: 1.5px;
}

.form-group input.error,
.form-group select.error {
  border-color: #f56565;
  border-width: 1.5px;
}

.error-text {
  display: block;
  color: #f56565;
  font-size: 0.75rem;
  margin-top: 0.375rem;
  min-height: 1.125rem;
}

.signup-btn {
  width: auto;
  min-width: 12.5rem;
  padding: 0.625rem 2rem;
  font-size: 0.9375rem;
  font-weight: 600;
  color: #ffffff;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border: none;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin: 0.5rem auto 0;
}

.signup-btn:hover:not(:disabled) {
  transform: translateY(-0.125rem);
  box-shadow: 0 0.375rem 1.25rem rgba(102, 126, 234, 0.4);
}

.signup-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.spinner {
  width: 1rem;
  height: 1rem;
  border: 0.125rem solid #ffffff;
  border-top-color: transparent;
  border-radius: 50%;
  animation: spin 0.6s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.login-link {
  text-align: center;
  margin-top: 1.25rem;
  font-size: 0.875rem;
  color: #718096;
}

.login-link a {
  color: #667eea;
  text-decoration: none;
  font-weight: 600;
}

.login-link a:hover {
  text-decoration: underline;
}

@media (max-width: 48rem) {
  .form-row {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .signup-card {
    padding: 1.5rem;
  }
}
