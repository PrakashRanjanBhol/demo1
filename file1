// model-selector.component.ts
import { Component, EventEmitter, Output, HostListener, OnInit, Input } from '@angular/core';

@Component({
  selector: 'app-model-selector',
  template: `
    <div class="model-selector">
      <div class="dropdown-container">
        <div 
          class="dropdown-trigger" 
          [class.active]="isDropdownOpen"
          (click)="toggleDropdown()"
          tabindex="0"
          role="combobox"
          [attr.aria-expanded]="isDropdownOpen"
          aria-haspopup="listbox">
          
          <div class="model-name">
            <span class="model-icon"></span>
            <span>{{ selectedModel || 'Select Model' }}</span>
          </div>
          <span class="dropdown-arrow">â–¼</span>
        </div>
        
        <div 
          class="dropdown-menu" 
          [class.show]="isDropdownOpen"
          role="listbox">
          
          <div 
            *ngFor="let model of models; trackBy: trackByModel"
            class="dropdown-item"
            [class.selected]="model === selectedModel"
            (click)="selectModel(model)"
            role="option"
            [attr.aria-selected]="model === selectedModel">
            
            <div class="item-info">
              <span class="model-icon"></span>
              <span class="item-name">{{ model }}</span>
            </div>
          </div>
        </div>
      </div>
      
      <button 
        class="refresh-btn" 
        [class.spinning]="isRefreshing"
        (click)="refreshModels()"
        title="Refresh Models"
        type="button">
        <svg class="refresh-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/>
          <path d="M21 3v5h-5"/>
          <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/>
          <path d="M3 21v-5h5"/>
        </svg>
      </button>
    </div>
  `,
  styles: [`
    .model-selector {
      position: relative;
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .dropdown-container {
      position: relative;
      display: inline-block;
    }

    .dropdown-trigger {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 16px;
      background: rgba(26, 26, 29, 0.9);
      border: 1px solid #333;
      border-radius: 8px;
      color: #ffffff;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 0.9rem;
      min-width: 160px;
      justify-content: space-between;
      outline: none;
    }

    .dropdown-trigger:hover {
      border-color: #667eea;
      background: rgba(102, 126, 234, 0.1);
    }

    .dropdown-trigger:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
    }

    .dropdown-trigger.active {
      border-color: #667eea;
      box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
    }

    .model-name {
      display: flex;
      align-items: center;
      gap: 6px;
    }

    .model-icon {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: linear-gradient(135deg, #667eea, #764ba2);
    }

    .dropdown-arrow {
      transition: transform 0.2s ease;
      color: #888;
    }

    .dropdown-trigger.active .dropdown-arrow {
      transform: rotate(180deg);
    }

    .dropdown-menu {
      position: absolute;
      top: calc(100% + 4px);
      left: 0;
      right: 0;
      background: rgba(26, 26, 29, 0.95);
      border: 1px solid #333;
      border-radius: 8px;
      backdrop-filter: blur(12px);
      opacity: 0;
      visibility: hidden;
      transform: translateY(-8px);
      transition: all 0.2s ease;
      z-index: 1000;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
    }

    .dropdown-menu.show {
      opacity: 1;
      visibility: visible;
      transform: translateY(0);
    }

    .dropdown-item {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 12px 16px;
      cursor: pointer;
      transition: background 0.15s ease;
      border-bottom: 1px solid rgba(51, 51, 51, 0.5);
    }

    .dropdown-item:last-child {
      border-bottom: none;
    }

    .dropdown-item:hover {
      background: rgba(102, 126, 234, 0.1);
    }

    .dropdown-item.selected {
      background: rgba(102, 126, 234, 0.15);
      color: #667eea;
    }

    .item-info {
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .item-name {
      font-size: 0.9rem;
      font-weight: 500;
    }

    .refresh-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 36px;
      height: 36px;
      background: rgba(26, 26, 29, 0.9);
      border: 1px solid #333;
      border-radius: 8px;
      color: #888;
      cursor: pointer;
      transition: all 0.2s ease;
      outline: none;
    }

    .refresh-btn:hover {
      border-color: #667eea;
      color: #667eea;
      background: rgba(102, 126, 234, 0.1);
    }

    .refresh-btn:focus {
      border-color: #667eea;
      box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
    }

    .refresh-btn.spinning {
      animation: spin 1s linear;
    }

    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }

    .refresh-icon {
      width: 16px;
      height: 16px;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .dropdown-trigger {
        min-width: 140px;
        font-size: 0.85rem;
      }
    }
  `]
})
export class ModelSelectorComponent implements OnInit {
  @Input() models: string[] = ['gpt-4-turbo', 'gpt-5'];
  @Output() modelChanged = new EventEmitter<string>();
  @Output() modelsRefreshed = new EventEmitter<void>();

  selectedModel: string | null = null;
  isDropdownOpen = false;
  isRefreshing = false;

  ngOnInit(): void {
    // Set default selection to first model
    if (this.models.length > 0) {
      this.selectedModel = this.models[0];
    }
  }

  toggleDropdown(): void {
    this.isDropdownOpen = !this.isDropdownOpen;
  }

  selectModel(model: string): void {
    this.selectedModel = model;
    this.isDropdownOpen = false;
    this.modelChanged.emit(model);
  }

  refreshModels(): void {
    this.isRefreshing = true;
    
    // Simulate API call
    setTimeout(() => {
      this.isRefreshing = false;
      this.modelsRefreshed.emit();
      console.log('Models refreshed!');
    }, 1000);
  }

  trackByModel(index: number, model: string): string {
    return model;
  }

  // Close dropdown when clicking outside
  @HostListener('document:click', ['$event'])
  onDocumentClick(event: Event): void {
    const target = event.target as HTMLElement;
    if (!target.closest('.model-selector')) {
      this.isDropdownOpen = false;
    }
  }

  // Handle keyboard navigation
  @HostListener('keydown', ['$event'])
  onKeyDown(event: KeyboardEvent): void {
    if (event.key === 'Escape') {
      this.isDropdownOpen = false;
    }
  }
}

// ========================================
// USAGE EXAMPLE - app.component.ts
// ========================================

/*
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    <div class="app-header">
      <div class="logo">AI Assistant</div>
      
      <app-model-selector 
        [models]="availableModels"
        (modelChanged)="onModelChanged($event)"
        (modelsRefreshed)="onModelsRefreshed()">
      </app-model-selector>
    </div>
    
    <div class="app-content">
      <h2>Selected Model: {{ currentModel || 'None' }}</h2>
      <p>Available Models: {{ availableModels.length }}</p>
      
      <button (click)="addModel()" class="add-btn">Add Random Model</button>
    </div>
  `,
  styles: [`
    .app-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 16px 24px;
      background: rgba(26, 26, 29, 0.8);
      border-bottom: 1px solid #333;
      color: white;
    }

    .logo {
      font-size: 1.4rem;
      font-weight: 700;
      color: #667eea;
    }

    .app-content {
      padding: 40px 24px;
      color: white;
      text-align: center;
    }

    .add-btn {
      margin-top: 20px;
      padding: 8px 16px;
      background: #667eea;
      border: none;
      border-radius: 6px;
      color: white;
      cursor: pointer;
      transition: background 0.2s ease;
    }

    .add-btn:hover {
      background: #5a6fd8;
    }

    :host {
      display: block;
      background: #111113;
      min-height: 100vh;
    }
  `]
})
export class AppComponent {
  availableModels: string[] = ['gpt-4-turbo', 'gpt-5'];
  currentModel: string | null = null;

  onModelChanged(model: string): void {
    this.currentModel = model;
    console.log('Model changed to:', model);
    
    // Add your model change logic here
    // For example: this.apiService.setModel(model);
  }

  onModelsRefreshed(): void {
    console.log('Models refreshed');
    
    // Add your refresh logic here
    // For example: this.loadModelsFromAPI();
  }

  addModel(): void {
    const randomModels = ['claude-3.5-sonnet', 'gemini-pro', 'llama-3.1-70b'];
    const randomModel = randomModels[Math.floor(Math.random() * randomModels.length)];
    
    if (!this.availableModels.includes(randomModel)) {
      this.availableModels.push(randomModel);
    }
  }
}
*/

// ========================================
// SERVICE EXAMPLE - model.service.ts
// ========================================

/*
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class ModelService {
  private modelsSubject = new BehaviorSubject<string[]>(['gpt-4-turbo', 'gpt-5']);
  public models$ = this.modelsSubject.asObservable();

  private selectedModelSubject = new BehaviorSubject<string | null>(null);
  public selectedModel$ = this.selectedModelSubject.asObservable();

  constructor(private http: HttpClient) {}

  getModels(): Observable<string[]> {
    return this.models$;
  }

  setSelectedModel(model: string): void {
    this.selectedModelSubject.next(model);
  }

  refreshModels(): Observable<string[]> {
    // Replace with actual API call
    return this.http.get<string[]>('/api/models');
  }

  updateModels(models: string[]): void {
    this.modelsSubject.next(models);
  }
}
*/
