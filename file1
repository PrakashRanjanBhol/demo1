/* StreamingMarkdown.module.css */
.markdownContainer {
  line-height: 1.5; /* adjust as needed */
  font-size: 0.95rem;
  color: #e0e0e0;
  font-family: 'Segoe UI', sans-serif;
}

/* Remove extra margin between paragraphs and headings */
.markdownContainer p,
.markdownContainer pre,
.markdownContainer code,
.markdownContainer h1,
.markdownContainer h2,
.markdownContainer h3,
.markdownContainer h4,
.markdownContainer h5,
.markdownContainer h6 {
  margin: 0.5rem 0; /* tighten spacing */
}

/* Optional: Styling for pre/code blocks */
.markdownContainer pre {
  background: #1f1f1f;
  padding: 0.75rem;
  border-radius: 6px;
  overflow-x: auto;
  font-size: 0.9rem;
  line-height: 1.4;
}

.markdownContainer code {
  font-family: 'Fira Code', monospace;
  background: #2a2a2a;
  padding: 0.2rem 0.4rem;
  border-radius: 4px;
}

/* Tighten ul/ol spacing */
.markdownContainer ul,
.markdownContainer ol {
  margin: 0.5rem 0;
  padding-left: 1.2rem;
}



import React, { useEffect, useRef } from 'react';
import { marked } from 'marked';
import DOMPurify from 'dompurify';
import hljs from 'highlight.js';
import 'highlight.js/styles/atom-one-dark.css';
import styles from './StreamingMarkdown.module.css'; // Import your CSS

marked.setOptions({
  highlight: function (code, lang) {
    if (lang && hljs.getLanguage(lang)) {
      return hljs.highlight(code, { language: lang }).value;
    }
    return hljs.highlightAuto(code).value;
  },
  langPrefix: 'hljs language-',
});

const StreamingMarkdown = ({ content }) => {
  const containerRef = useRef(null);

  useEffect(() => {
    if (containerRef.current && content) {
      const html = DOMPurify.sanitize(marked.parse(content));
      containerRef.current.innerHTML = html;
    }
  }, [content]);

  return <div ref={containerRef} className={styles.markdownContainer} />;
};

export default StreamingMarkdown;








---------






import React, { useState } from 'react';
import ReactECharts from 'echarts-for-react';
import { Dropdown } from 'primereact/dropdown';
import { Dialog } from 'primereact/dialog';
import { PrimeIcons } from 'primereact/api';
import styles from './ScatterChart.module.css';

const ScatterChart = () => {
    const response = [
        { d_type: 'Test', 'd-category': 'Line A', xcoord: 120, ycoord: 440 },
        { d_type: 'Actual', 'd-category': 'Line A', xcoord: 130, ycoord: 430 },
        { d_type: 'Test', 'd-category': 'Line B', xcoord: 140, ycoord: 420 },
        { d_type: 'Actual', 'd-category': 'Line B', xcoord: 150, ycoord: 410 },
        { d_type: 'Estimate', 'd-category': 'Line A', xcoord: 160, ycoord: 400 },
        { d_type: 'Estimate', 'd-category': 'Line C', xcoord: 100, ycoord: 405 }
    ];

    const allTypes = Array.from(new Set(response.map(item => item.d_type)));
    const [selectedType, setSelectedType] = useState(allTypes[0]);
    const [visible, setVisible] = useState(false);

    const filteredData = response.filter(item => item.d_type === selectedType);

    const grouped = {};
    filteredData.forEach(item => {
        const category = item['d-category'];
        if (!grouped[category]) grouped[category] = [];
        grouped[category].push([item.xcoord, item.ycoord]);
    });

    const series = Object.entries(grouped).map(([category, data], index) => ({
        name: category,
        type: 'scatter',
        data,
        symbolSize: 12,
        itemStyle: {
            color: ['#91cc75', '#fac858', '#ee6666', '#73c0de'][index % 4]
        }
    }));

    const chartOption = {
        title: {
            text: `Scatter Plot - ${selectedType}`,
            left: 'center'
        },
        legend: { top: 30 },
        tooltip: {
            trigger: 'item',
            formatter: params =>
                `Category: ${params.seriesName}<br/>X: ${params.data[0]}<br/>Y: ${params.data[1]}`
        },
        xAxis: {
            type: 'value',
            name: 'X Coord',
            splitLine: { lineStyle: { type: 'dashed' } }
        },
        yAxis: {
            type: 'value',
            name: 'Y Coord',
            splitLine: { lineStyle: { type: 'dashed' } }
        },
        series
    };

    return (
        <>
            <div className={styles.container}>
                <div className={styles.chartWrapper}>
                    <i
                        className={`pi pi-window-maximize ${styles.expandIcon}`}
                        onClick={() => setVisible(true)}
                        title="Expand"
                    />
                    <ReactECharts option={chartOption} style={{ height: '100%' }} />
                </div>
                <div className={styles.dropdownWrapper}>
                    <Dropdown
                        value={selectedType}
                        options={allTypes.map(type => ({ label: type, value: type }))}
                        onChange={(e) => setSelectedType(e.value)}
                        placeholder="Select d_type"
                        className={styles.dropdown}
                    />
                </div>
            </div>

            <Dialog
                header={`Full View - ${selectedType}`}
                visible={visible}
                onHide={() => setVisible(false)}
                modal
                dismissableMask
                maximizable
                style={{ width: '90vw', height: '90vh' }}
                contentStyle={{ height: 'calc(100% - 3rem)' }}
            >
                <ReactECharts option={chartOption} style={{ height: '100%' }} />
            </Dialog>
        </>
    );
};

export default ScatterChart;
