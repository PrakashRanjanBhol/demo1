// vertical-splitter.component.ts
import { Component, ElementRef, ViewChild, AfterViewInit, OnDestroy } from '@angular/core';

@Component({
  selector: 'app-vertical-splitter',
  template: `
    <div class="splitter-container" #container>
      <div class="left-panel" [style.width.px]="leftPanelWidth">
        <div class="panel-content">
          <h3>Left Panel</h3>
          <p>This is the left panel content. You can put any content here.</p>
          <p>Width: {{leftPanelWidth}}px</p>
        </div>
      </div>
      
      <div 
        class="splitter" 
        #splitter
        (mousedown)="onMouseDown($event)"
        [class.dragging]="isDragging">
        <div class="splitter-handle"></div>
      </div>
      
      <div class="right-panel" [style.width.px]="rightPanelWidth">
        <div class="panel-content">
          <h3>Right Panel</h3>
          <p>This is the right panel content. You can put any content here.</p>
          <p>Width: {{rightPanelWidth}}px</p>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .splitter-container {
      display: flex;
      height: 100vh;
      width: 100%;
      overflow: hidden;
      background-color: #0a0a0b;
    }

    .left-panel, .right-panel {
      min-width: 0;
      overflow: auto;
    }

    .left-panel {
      background-color: #1a1a1b;
      border-right: 1px solid #333;
    }

    .right-panel {
      background-color: #0a0a0b;
      border-left: 1px solid #333;
    }

    .panel-content {
      padding: 20px;
    }

    .panel-content h3 {
      margin-top: 0;
      color: #ffffff;
      font-weight: 600;
    }

    .panel-content p {
      color: #b3b3b3;
      line-height: 1.5;
    }

    .splitter {
      width: 6px;
      background-color: #333;
      cursor: col-resize;
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.2s ease;
    }

    .splitter:hover {
      background-color: #444;
    }

    .splitter.dragging {
      background-color: #4299e1;
    }

    .splitter-handle {
      width: 2px;
      height: 40px;
      background-color: #666;
      border-radius: 1px;
      transition: background-color 0.2s ease;
    }

    .splitter:hover .splitter-handle {
      background-color: #888;
    }

    .splitter.dragging .splitter-handle {
      background-color: white;
    }

    /* Prevent text selection during drag */
    .splitter-container.no-select {
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
    }

    /* Custom scrollbar for panels - Dark theme */
    .left-panel::-webkit-scrollbar,
    .right-panel::-webkit-scrollbar {
      width: 8px;
    }

    .left-panel::-webkit-scrollbar-track,
    .right-panel::-webkit-scrollbar-track {
      background: #1a1a1b;
    }

    .left-panel::-webkit-scrollbar-thumb,
    .right-panel::-webkit-scrollbar-thumb {
      background: #444;
      border-radius: 4px;
    }

    .left-panel::-webkit-scrollbar-thumb:hover,
    .right-panel::-webkit-scrollbar-thumb:hover {
      background: #555;
    }
  `]
})
export class VerticalSplitterComponent implements AfterViewInit, OnDestroy {
  @ViewChild('container', { static: true }) containerRef!: ElementRef;
  @ViewChild('splitter', { static: true }) splitterRef!: ElementRef;

  leftPanelWidth: number = 300; // Default 300px
  rightPanelWidth: number = 0; // Will be calculated
  isDragging: boolean = false;
  
  private startX: number = 0;
  private startLeftWidth: number = 0;
  private containerWidth: number = 0;

  ngAfterViewInit() {
    this.initializePanels();
    window.addEventListener('resize', this.onWindowResize.bind(this));
  }

  ngOnDestroy() {
    window.removeEventListener('resize', this.onWindowResize.bind(this));
    this.removeGlobalListeners();
  }

  private initializePanels() {
    const container = this.containerRef.nativeElement;
    this.containerWidth = container.offsetWidth;
    const splitterWidth = 6;
    
    // Set right panel width based on available space
    this.rightPanelWidth = this.containerWidth - this.leftPanelWidth - splitterWidth;
  }

  onMouseDown(event: MouseEvent) {
    event.preventDefault();
    
    this.isDragging = true;
    this.startX = event.clientX;
    this.startLeftWidth = this.leftPanelWidth;
    this.containerWidth = this.containerRef.nativeElement.offsetWidth;
    
    // Add no-select class to prevent text selection
    this.containerRef.nativeElement.classList.add('no-select');
    
    // Add global mouse event listeners
    document.addEventListener('mousemove', this.onMouseMove.bind(this));
    document.addEventListener('mouseup', this.onMouseUp.bind(this));
    
    // Change cursor for entire document
    document.body.style.cursor = 'col-resize';
  }

  onMouseMove(event: MouseEvent) {
    if (!this.isDragging) return;
    
    event.preventDefault();
    
    const deltaX = event.clientX - this.startX;
    let newLeftWidth = this.startLeftWidth + deltaX;
    
    // Calculate splitter width (6px)
    const splitterWidth = 6;
    
    // Allow full range from 0 to full width (minus splitter)
    newLeftWidth = Math.max(newLeftWidth, 0);
    newLeftWidth = Math.min(newLeftWidth, this.containerWidth - splitterWidth);
    
    this.leftPanelWidth = newLeftWidth;
    this.rightPanelWidth = this.containerWidth - newLeftWidth - splitterWidth;
  }

  onMouseUp(event: MouseEvent) {
    if (!this.isDragging) return;
    
    this.isDragging = false;
    
    // Remove no-select class
    this.containerRef.nativeElement.classList.remove('no-select');
    
    // Remove global listeners
    this.removeGlobalListeners();
    
    // Reset cursor
    document.body.style.cursor = '';
  }

  private removeGlobalListeners() {
    document.removeEventListener('mousemove', this.onMouseMove.bind(this));
    document.removeEventListener('mouseup', this.onMouseUp.bind(this));
  }

  private onWindowResize() {
    this.updatePanelWidths();
  }

  private updatePanelWidths() {
    const container = this.containerRef.nativeElement;
    const newContainerWidth = container.offsetWidth;
    const splitterWidth = 6;
    
    if (newContainerWidth !== this.containerWidth) {
      // Maintain proportions on window resize
      const ratio = this.leftPanelWidth / (this.containerWidth - splitterWidth);
      this.containerWidth = newContainerWidth;
      
      // Calculate new left width maintaining ratio, but allow 0 to full width
      this.leftPanelWidth = Math.max(
        0,
        Math.min(
          ratio * (newContainerWidth - splitterWidth),
          newContainerWidth - splitterWidth
        )
      );
      this.rightPanelWidth = newContainerWidth - this.leftPanelWidth - splitterWidth;
    }
  }
}

/*
Usage in your module:

1. Add to your component declarations in app.module.ts or feature module:

import { VerticalSplitterComponent } from './vertical-splitter.component';

@NgModule({
  declarations: [
    VerticalSplitterComponent,
    // ... other components
  ],
  // ...
})

2. Use in your template:
<app-vertical-splitter></app-vertical-splitter>

3. Customize the content by modifying the template sections for left-panel and right-panel.

Features:
- Default 300px left panel width on load
- Full range resizing: 0px minimum to 100% maximum
- Dark theme with #0a0a0b background for right panel
- Smooth dragging with visual feedback
- Responsive behavior on window resize
- Visual hover and drag states
- Prevents text selection during drag
- Custom dark theme scrollbars
- TypeScript support with proper typing
*/
