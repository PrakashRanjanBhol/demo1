function downloadSVG(svgContent, fileName) {
            // Create DOM from the SVG string
            const parser = new DOMParser();
            const doc = parser.parseFromString(svgContent, "image/svg+xml");
            const svg = doc.querySelector("svg");

            // Inline computed styles for each element
            const allElements = svg.querySelectorAll("*");
            allElements.forEach(el => {
                const computedStyle = window.getComputedStyle(el);
                const style = [];
                // Copy fill/stroke/colors
                if (computedStyle.fill && computedStyle.fill !== "none") {
                    style.push(`fill:${computedStyle.fill}`);
                }
                if (computedStyle.stroke && computedStyle.stroke !== "none") {
                    style.push(`stroke:${computedStyle.stroke}`);
                }
                if (computedStyle.color && computedStyle.color !== "rgb(0, 0, 0)") {
                    style.push(`color:${computedStyle.color}`);
                }
                if (style.length > 0) {
                    el.setAttribute("style", style.join(";"));
                }
            });

            // Serialize back to string
            const serializer = new XMLSerializer();
            const svgString = serializer.serializeToString(svg);

            // Save as file
            const blob = new Blob([svgString], { type: "image/svg+xml" });
            const url = URL.createObjectURL(blob);
            const link = document.createElement("a");
            link.href = url;
            link.download = fileName;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        }
