const [showInstruction, setShowInstruction] = useState(false);
const [instruction, setInstruction] = useState('');


setShowInstruction(true); // Show the textarea now


const handleProcess = () => {
  // Simulated API call
  const payload = {
    ground_truth: rows.map(row => row.groundTruth),
    question: rows.map(row => row.question),
    instruction,
  };

  console.log('Processing with payload:', payload);

  const updated = rows.map(row => ({
    ...row,
    answer: `Answer for "${row.question}"`,
    accuracy: (Math.random() * 100).toFixed(2),
  }));

  setRows(updated);
  setInstruction('');
  setShowInstruction(false);
};



{showInstruction && (
  <div className={styles.instructionArea}>
    <textarea
      value={instruction}
      onChange={(e) => setInstruction(e.target.value)}
      placeholder="Please provide any instruction..."
    />
    <button
      className={styles.processButton}
      onClick={handleProcess}
      disabled={!instruction.trim()}
    >
      Processing
    </button>
  </div>
)}




.instructionArea {
  margin-top: 1rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.instructionArea textarea {
  min-height: 100px;
  padding: 0.75rem;
  background-color: #2c2c2c;
  border: 1px solid #555;
  border-radius: 8px;
  color: white;
  resize: vertical;
}

.processButton {
  align-self: flex-start;
  background: linear-gradient(to right, #ff9800, #f57c00);
  color: white;
  padding: 0.6rem 1.2rem;
  border: none;
  border-radius: 20px;
  cursor: pointer;
  font-weight: 500;
}

.processButton:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}
