const scatterData = [
  { d_type: 'Test', 'd-category': 'Line A', xcoord: 120, ycoord: 440 },
  { d_type: 'Actual', 'd-category': 'Line A', xcoord: 130, ycoord: 430 },
  { d_type: 'Test', 'd-category': 'Line B', xcoord: 140, ycoord: 420 },
  { d_type: 'Actual', 'd-category': 'Line B', xcoord: 150, ycoord: 410 },
  { d_type: 'Estimate', 'd-category': 'Line A', xcoord: 160, ycoord: 400 },
  { d_type: 'Estimate', 'd-category': 'Line C', xcoord: 100, ycoord: 405 }
];

const lineData = [
  [[10, 20], [30, 40]],
  [[100, 200], [150, 250]]
];

// Group scatter data by d_type
const grouped = scatterData.reduce((acc, item) => {
  const key = item.d_type;
  if (!acc[key]) acc[key] = [];
  acc[key].push([item.xcoord, item.ycoord]);
  return acc;
}, {});

// Define colors for each d_type
const colorMap: { [key: string]: string } = {
  'Test': '#91cc75',
  'Actual': '#fac858',
  'Estimate': '#ee6666'
};

// Create scatter series
const scatterSeries = Object.entries(grouped).map(([category, data]) => ({
  name: category,
  type: 'scatter',
  data,
  symbolSize: 12,
  itemStyle: { color: colorMap[category] || '#73c0de' }
}));

// Only add line series if lineData is not empty
const lineSeries = lineData.length > 0
  ? [{
      name: 'Line Defect',
      type: 'line',
      data: lineData.flat(),
      lineStyle: {
        type: 'dashed',
        width: 2,
        color: '#ffa500' // orange for black background
      },
      showSymbol: false
    }]
  : [];

// Final series array
const series = [...scatterSeries, ...lineSeries];
