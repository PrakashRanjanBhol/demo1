import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';

@Component({
  selector: 'app-code-catcher',
  template: `
    <div>
      <h3>HTML Code</h3>
      <pre>{{ htmlCode }}</pre>

      <h3>CSS Code</h3>
      <pre>{{ cssCode }}</pre>

      <h3>JS Code</h3>
      <pre>{{ jsCode }}</pre>
    </div>
  `
})
export class CodeCatcherComponent implements OnChanges {
  @Input() chunk: string = '';

  htmlCode: string = '';
  cssCode: string = '';
  jsCode: string = '';

  private currentBlock: 'html' | 'css' | 'js' | null = null;
  private buffer: string = ''; // to handle cut-off ``` fences

  ngOnChanges(changes: SimpleChanges) {
    if (changes['chunk'] && this.chunk) {
      this.processChunk(this.chunk);
    }
  }

  private processChunk(chunk: string) {
    this.buffer += chunk; // accumulate chunk

    // Check if there is a complete fence (```) in the buffer
    let fenceIndex: number;
    while ((fenceIndex = this.buffer.indexOf('```')) !== -1) {
      const beforeFence = this.buffer.substring(0, fenceIndex).trim();
      const afterFence = this.buffer.substring(fenceIndex + 3); // rest after fence

      if (beforeFence.length > 0) {
        // Append code to the current block
        this.appendToBlock(beforeFence + '\n');
      }

      // Detect language after ```
      const match = afterFence.match(/^(html|css|javascript|js)?/i);
      const lang = match ? match[0].toLowerCase() : '';

      if (lang === 'html') {
        this.currentBlock = 'html';
      } else if (lang === 'css') {
        this.currentBlock = 'css';
      } else if (lang === 'javascript' || lang === 'js') {
        this.currentBlock = 'js';
      } else {
        // Empty fence â†’ means close block
        this.currentBlock = null;
      }

      // Remove the matched language keyword if present
      this.buffer = afterFence.replace(/^(html|css|javascript|js)?/, '');
    }

    // If no fence found, just append to current block
    if (this.currentBlock && this.buffer.trim()) {
      this.appendToBlock(this.buffer);
      this.buffer = ''; // consumed
    }
  }

  private appendToBlock(content: string) {
    if (this.currentBlock === 'html') {
      this.htmlCode += content;
    } else if (this.currentBlock === 'css') {
      this.cssCode += content;
    } else if (this.currentBlock === 'js') {
      this.jsCode += content;
    }
  }
}
