import { Component, OnInit, ViewChild } from '@angular/core';
import { OverlayPanel } from 'primeng/overlaypanel';

interface FileNode {
  name: string;
  type: 'folder' | 'file';
  children?: FileNode[];
  isExpanded?: boolean;
  selected?: boolean;
  ticketKey?: string;
  queries?: string[];
}

interface RawProjectMap {
  [key: string]: {
    key: string;
    id: string;
    type: string;
    icon: string;
  };
}

interface Project {
  id: number;
  name: string;
  icon: string;
  isFavourite: boolean;
  structure: FileNode[];
}

@Component({
  selector: 'project-sidebar',
  templateUrl: './project-sidebar.component.html',
  styleUrls: ['./project-sidebar.component.scss']
})
export class ProjectSidebarComponent implements OnInit {
  @ViewChild('op') overlayPanel!: OverlayPanel;

  queryList: string[] = [];
  selectedFiles: FileNode[] = [];
  loadingProjectIds: number[] = [];
  favouriteLoadingIds: number[] = [];
  animateMap: { [id: number]: boolean } = {};

  rawAllProjects: RawProjectMap = {
    "1": { key: "Project Alpha", id: "1", type: "project", icon: "" },
    "2": { key: "Project Beta", id: "2", type: "project", icon: "" },
    "3": { key: "Project Gamma", id: "3", type: "project", icon: "" },
    "4": { key: "Project Delta", id: "4", type: "project", icon: "" },
    "5": { key: "Project Epsilon", id: "5", type: "project", icon: "" }
  };

  rawFavouriteProjects: RawProjectMap = {
    "1": { key: "Project Alpha", id: "1", type: "project", icon: "" },
    "2": { key: "Project Beta", id: "2", type: "project", icon: "" }
  };

  allProjects: Project[] = [];
  favouriteProjects: Project[] = [];
  expandedFavProject: Project | null = null;

  ngOnInit() {
    this.allProjects = this.normalizeProjects(this.rawAllProjects);
    const favIds = Object.keys(this.rawFavouriteProjects);
    this.favouriteProjects = this.allProjects.filter(p => favIds.includes(p.id.toString()));
    this.allProjects.forEach(p => p.isFavourite = favIds.includes(p.id.toString()));
  }

  normalizeProjects(data: RawProjectMap): Project[] {
    return Object.entries(data).map(([id, value]) => ({
      id: Number(id),
      name: value.key,
      icon: value.icon || 'https://cdn-icons-png.flaticon.com/512/1828/1828911.png',
      isFavourite: false,
      structure: [{ name: 'JIRA', type: 'folder', children: [], isExpanded: false }]
    }));
  }

  toggleExpand(project: Project) {
    const root = project.structure[0];
    if (root.isExpanded) {
      root.isExpanded = false;
      return;
    }

    root.isExpanded = true;

    if (!root.children || root.children.length === 0) {
      this.loadingProjectIds.push(project.id);
      root.children = undefined;

      this.animateMap[project.id] = true;
      setTimeout(() => this.animateMap[project.id] = false, 600);

      this.fetchJiraInfo(project.id).then(data => {
        root.children = this.transformJiraToNodes(data);
        this.loadingProjectIds = this.loadingProjectIds.filter(id => id !== project.id);
      });
    }
  }

  isLoading(projectId: number): boolean {
    return this.loadingProjectIds.includes(projectId);
  }

  transformJiraToNodes(data: any): FileNode[] {
    return Object.entries(data).map(([category, value]: any) => ({
      name: category,
      type: 'folder',
      isExpanded: false,
      queries: value.queries,
      children: value.tickets.map((ticket: any) => ({
        name: `${ticket.key}: ${ticket.summary}`,
        type: 'file',
        ticketKey: ticket.key,
        queries: value.queries
      }))
    }));
  }

  fetchJiraInfo(projectId: number): Promise<any> {
    return new Promise(resolve => {
      setTimeout(() => {
        resolve({
          Task: {
            tickets: [
              { type: 'Task', summary: 'Improve performance', key: `T-${projectId}-1` },
              { type: 'Task', summary: 'Fix bugs', key: `T-${projectId}-2` }
            ],
            queries: ['What are the open tasks?', 'Show task status.']
          },
          Epic: {
            tickets: [
              { type: 'Epic', summary: 'User onboarding', key: `E-${projectId}-1` },
              { type: 'Epic', summary: 'Upgrade backend', key: `E-${projectId}-2` }
            ],
            queries: ['List all epics', 'Epic completion rate']
          }
        });
      }, 1500);
    });
  }

  onFileToggle(file: FileNode) {
    if (!file.selected) {
      if (this.selectedFiles.length >= 5) {
        alert('You can select a maximum of 5 tickets.');
        return;
      }
      file.selected = true;
      this.selectedFiles.push(file);
    } else {
      file.selected = false;
      this.selectedFiles = this.selectedFiles.filter(f => f !== file);
    }
  }

  showOverlay(event: MouseEvent, node: FileNode) {
    event.preventDefault();
    this.queryList = node.queries ?? [];
    this.overlayPanel.toggle(event);
  }

  askQuery(query: string) {
    alert(`Ask: ${query}`);
    this.overlayPanel.hide();
  }

  isFavouriteLoading(projectId: number): boolean {
    return this.favouriteLoadingIds.includes(projectId);
  }

  onFavouriteClick(project: Project) {
    if (this.isFavouriteLoading(project.id)) return;

    this.favouriteLoadingIds.push(project.id);

    setTimeout(() => {
      project.isFavourite = !project.isFavourite;

      if (project.isFavourite) {
        this.favouriteProjects.push(project);
      } else {
        this.favouriteProjects = this.favouriteProjects.filter(p => p.id !== project.id);
      }

      this.animateMap[project.id] = true;
      setTimeout(() => this.animateMap[project.id] = false, 600);

      this.favouriteLoadingIds = this.favouriteLoadingIds.filter(id => id !== project.id);
    }, 1200);
  }

  onFavouriteProjectClick(proj: Project) {
    if (!proj.structure[0].children || proj.structure[0].children.length === 0) {
      this.loadingProjectIds.push(proj.id);
      this.fetchJiraInfo(proj.id).then(data => {
        proj.structure[0].children = this.transformJiraToNodes(data);
        this.loadingProjectIds = this.loadingProjectIds.filter(id => id !== proj.id);
        this.expandedFavProject = proj;
      });
    } else {
      this.expandedFavProject = proj;
    }
  }

  getTicketSummary(fullName: string): string {
    const parts = fullName.split(':');
    return parts.length > 1 ? parts.slice(1).join(':').trim() : fullName;
  }

}










<p-overlayPanel #op [dismissable]="true">
    <div *ngIf="queryList.length">
        <div class="query-title">Suggested Queries:</div>
        <ul>
            <li *ngFor="let query of queryList">
                <button (click)="askQuery(query)" class="query-button">{{ query }}</button>
            </li>
        </ul>
    </div>
</p-overlayPanel>

<div class="sidebar">
    <!-- Sidebar Header -->
    <div class="sidebar-header enhanced">
        <div class="jira-icon">🤖</div>
        <div class="jira-heading">
            <div class="jira-heading-title">Jira Assistant</div>
            <div class="jira-heading-sub">Ask anything related to Jira</div>
        </div>
    </div>

    <div class="sidebar-scroll">
        <!-- Expanded Favourite Project View -->
        <div *ngIf="expandedFavProject" class="favourite-project-panel">
            <div class="favourite-header">
                <span class="modern-back-icon" (click)="expandedFavProject = null" title="Back to Projects">
                    <i class="pi pi-arrow-left"></i>
                </span>

                <span class="fav-title">{{ expandedFavProject.name }}</span>

                <!-- Loader for expanded fav project -->
                <ng-container *ngIf="isLoading(expandedFavProject.id)">
                    <div class="inline-loader spinner" style="margin-left: 8px;"></div>
                </ng-container>
            </div>
            <div class="project-structure">
                <ng-container
                    *ngTemplateOutlet="recursiveList; context: { $implicit: expandedFavProject.structure[0].children }">
                </ng-container>
            </div>
        </div>

        <!-- Regular View with Accordion -->
        <p-accordion *ngIf="!expandedFavProject" [multiple]="true" styleClass="custom-accordion">
            <ng-container *ngFor="let section of [
                { key: 'all', title: 'All Projects', icon: '🗂️', subtitle: 'Browse all projects available to you', list: allProjects },
                { key: 'fav', title: 'Favourite Projects', icon: '⭐', subtitle: 'Projects you\'ve marked as favourite', list: favouriteProjects }
            ]">
                <p-accordionTab>
                    <ng-template pTemplate="header">
                        <div class="custom-header">
                            <div class="custom-header-icon">{{ section.icon }}</div>
                            <div class="custom-header-text">
                                <div class="custom-header-title">{{ section.title }}</div>
                                <div class="custom-header-sub">{{ section.subtitle }}</div>
                            </div>
                        </div>
                    </ng-template>

                    <div class="accordion-info-box">
                        <div class="info-icon">{{ section.icon }}</div>
                        <div class="info-text">
                            <div class="info-title">{{ section.title }}</div>
                            <div class="info-sub">{{ section.subtitle }}</div>
                        </div>
                    </div>

                    <div class="project-list">
                        <div *ngFor="let proj of section.list" class="project-item"
                            [class.loading]="isFavouriteLoading(proj.id) || isLoading(proj.id)"
                            [class.favourited]="animateMap[proj.id]">

                            <div class="project-left"
                                (click)="section.key === 'fav' ? onFavouriteProjectClick(proj) : null">
                                <img [src]="proj.icon || 'assets/default-icon.png'" class="project-icon" alt="icon" />
                                <div class="project-details">
                                    <div class="project-name">{{ proj.name }}</div>
                                    <div class="project-id">ID: {{ proj.id }}</div>
                                </div>
                            </div>

                            <div class="project-right">
                                <ng-container *ngIf="section.key === 'all'">
                                    <ng-container *ngIf="!isFavouriteLoading(proj.id); else loadingIcon">
                                        <i class="pi" [ngClass]="proj.isFavourite ? 'pi-star-fill' : 'pi-star'"
                                            (click)="onFavouriteClick(proj)"
                                            [ngStyle]="{ color: proj.isFavourite ? '#ffc107' : '#888' }"
                                            [class.disabled]="isFavouriteLoading(proj.id)"
                                            pTooltip="{{ proj.isFavourite ? 'Unfavourite' : 'Mark as favourite' }}"
                                            tooltipPosition="left"></i>
                                    </ng-container>
                                    <ng-template #loadingIcon>
                                        <div class="inline-loader spinner"></div>
                                    </ng-template>
                                </ng-container>

                                <!-- Chevron or loader in fav section -->
                                <ng-container *ngIf="section.key === 'fav'">
                                    <ng-container *ngIf="!isLoading(proj.id); else favLoader">
                                        <i class="pi pi-chevron-down" *ngIf="!proj.structure[0].isExpanded"></i>
                                        <i class="pi pi-chevron-up" *ngIf="proj.structure[0].isExpanded"></i>
                                    </ng-container>
                                    <ng-template #favLoader>
                                        <div class="inline-loader spinner"></div>
                                    </ng-template>
                                </ng-container>
                            </div>

                            <!-- Card blur loader -->
                            <div class="card-loader" *ngIf="isFavouriteLoading(proj.id) || isLoading(proj.id)">
                                <div class="spinner"></div>
                            </div>
                        </div>
                    </div>
                </p-accordionTab>
            </ng-container>
        </p-accordion>
    </div>

    <!-- Recursive Tree Template -->
    <ng-template #recursiveList let-nodes>
        <ul class="tree-list">
            <li *ngFor="let node of nodes">
                <div class="node" [style.paddingLeft.px]="node.type === 'file' ? 20 : 8">
                    <span *ngIf="node.type === 'folder'" (click)="node.isExpanded = !node.isExpanded"
                        [class.expanded]="node.isExpanded">
                        {{ node.name }} <small>{{ node.isExpanded ? '−' : '+' }}</small>
                    </span>

                    <label *ngIf="node.type === 'file'" class="ticket-node" (contextmenu)="showOverlay($event, node)">
                        <input type="checkbox" [checked]="node.selected"
                            [disabled]="!node.selected && selectedFiles.length >= 5" (change)="onFileToggle(node)" />
                        <span class="ticket-id">{{ node.ticketKey }}</span>
                        <span class="ticket-summary">{{ getTicketSummary(node.name) }}</span>
                    </label>
                </div>

                <ng-container *ngIf="node.children && node.isExpanded">
                    <ng-container *ngTemplateOutlet="recursiveList; context: { $implicit: node.children }">
                    </ng-container>
                </ng-container>
            </li>
        </ul>
    </ng-template>
</div>


















/* =============== GLOBAL WRAPPER =============== */
.sidebar {
  width: 380px;
  height: 100vh;
  background-color: #171717;
  color: #e0e0e0;
  font-family: 'Segoe UI', sans-serif;
  font-size: 0.85rem;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.sidebar-scroll {
  flex: 1;
  overflow-y: auto;
  padding: 0.5rem 1rem;
}

/* =============== HEADER =============== */
.sidebar-header.enhanced {
  display: flex;
  align-items: center;
  gap: 14px;
  background-color: #1d1d1d;
  padding: 1rem;
  border-bottom: 1px solid #2a2a2a;
  position: sticky;
  top: 0;
  z-index: 10;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
  animation: slideDown 0.4s ease;
}

.jira-icon {
  background: #2a2a2a;
  font-size: 1.5rem;
  padding: 8px;
  border-radius: 50%;
  box-shadow: 0 1px 6px rgba(255, 255, 255, 0.05);
  display: flex;
  align-items: center;
  justify-content: center;
  animation: bounceIn 0.5s ease;
}

.jira-heading {
  display: flex;
  flex-direction: column;
}

.jira-heading-title {
  font-size: 1.15rem;
  font-weight: 600;
  color: #fff;
}

.jira-heading-sub {
  font-size: 0.75rem;
  color: #aaa;
  opacity: 0.85;
  margin-top: 2px;
}

/* =============== ACCORDION =============== */
:host ::ng-deep .custom-accordion .p-accordion-header {
  background: #222 !important;
  color: #f1f1f1 !important;
  border: 1px solid #2a2a2a !important;
  padding: 10px 15px;
  font-weight: bold;
}

:host ::ng-deep .custom-accordion .p-accordion-content {
  background: #1e1e1e !important;
  border: 1px solid #2a2a2a;
  padding: 0;
  color: #ddd;
}

.custom-header {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 12px 18px;
  background: #222;
  border: 1px solid #2a2a2a;
  border-radius: 12px;
  transition: background 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  cursor: pointer;
  overflow: hidden;
  position: relative;
}

.custom-header:hover {
  background: #2b2b2b;
  transform: translateY(-2px);
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
}

.custom-header::after {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(to right, transparent, rgba(255, 255, 255, 0.03), transparent);
  transition: left 0.6s ease;
}

.custom-header:hover::after {
  left: 100%;
}

.custom-header-icon {
  font-size: 1.2rem;
  background: #2c2c2c;
  padding: 6px;
  border-radius: 50%;
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: inset 0 0 8px rgba(255, 255, 255, 0.03);
  animation: popIn 0.4s ease-in-out;
}

.custom-header-title {
  font-size: 0.875rem;
  font-weight: 600;
  color: #f1f1f1;
}

.custom-header-sub {
  font-size: 0.75rem;
  color: #aaa;
  opacity: 0.8;
  margin-top: 2px;
}

/* =============== INFO BOX =============== */
.accordion-info-box {
  display: flex;
  gap: 10px;
  background: #1d1d1d;
  padding: 10px 14px;
  margin: 8px 0;
  border-radius: 8px;
  font-size: 12px;
  color: #aaa;
}

/* =============== PROJECT LIST =============== */
.project-list {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-top: 10px;
  padding: 0 1rem;
}

.project-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  background: #1c1c1c;
  border: 1px solid #2b2f3a;
  padding: 10px 14px;
  border-radius: 8px;
  transition: all 0.3s ease;
  cursor: pointer;
  position: relative;
}

.project-item:hover {
  background: #242424;
}

.project-item.loading {
  opacity: 0.6;
  pointer-events: none;
}

.project-item.favourited {
  animation: boom 0.4s ease;
  border-left: 4px solid #ffc107;
  background: linear-gradient(135deg, #2e2e2e, #1e1e1e);
}

.project-left {
  display: flex;
  align-items: center;
  gap: 10px;
  flex: 1;
}

.project-icon {
  width: 28px;
  height: 28px;
  border-radius: 6px;
  object-fit: contain;
  background: #333;
}

.project-details {
  display: flex;
  flex-direction: column;
}

.project-name {
  font-weight: 500;
  font-size: 0.875rem;
}

.project-id {
  font-size: 11px;
  color: #888;
}

.project-right i {
  font-size: 1.1rem;
  cursor: pointer;
  transition: transform 0.2s ease;
}

.project-right i:hover {
  transform: scale(1.2) rotate(-10deg);
}

.card-loader {
  position: absolute;
  right: 16px;
  z-index: 2;
}

.spinner,
.inline-loader.spinner {
  width: 16px;
  height: 16px;
  border: 2px solid #666;
  border-top-color: #ffc107;
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
  margin-left: 4px;
}

/* =============== TREE VIEW =============== */
.tree-list {
  list-style: none;
  padding-left: 0;
  margin-top: 10px;
  font-size: 13px;
  color: #ccc;
}

.tree-list li {
  margin-bottom: 8px;
  transition: all 0.2s ease-in-out;
}

.node {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.node > span {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 6px 12px;
  background-color: #1d1d1d;
  border-radius: 6px;
  cursor: pointer;
  font-weight: 500;
  transition: background 0.2s ease, transform 0.2s ease;
  position: relative;
}

.node > span:hover {
  background-color: #292929;
  transform: translateX(2px);
}

.node > span small {
  margin-left: auto;
  font-size: 12px;
  opacity: 0.6;
}

.node > span::before {
  content: '📁';
  display: inline-block;
  transform: rotate(0deg);
  transition: transform 0.3s ease;
}

.node > span.expanded::before {
  transform: rotate(90deg);
}

.ticket-node {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 6px 12px;
  border-radius: 6px;
  background: #191919;
  cursor: pointer;
  transition: background 0.2s ease, transform 0.2s ease;
  overflow: hidden;
  color: #e0e0e0;
  margin-left: 8px;
  white-space: nowrap;
}

.ticket-node:hover {
  background: #232323;
  transform: translateX(2px);
}

.ticket-node input[type='checkbox'] {
  accent-color: #ffc107;
  margin-right: 6px;
}

.ticket-id {
  font-weight: 600;
  font-size: 12px;
  background-color: #ffc1071a;
  color: #ffc107;
  padding: 2px 6px;
  border-radius: 4px;
  max-width: 100px;
  white-space: nowrap;
  text-shadow: 0 0 4px rgba(255, 193, 7, 0.3);
}

.ticket-summary {
  color: #aaa;
  font-size: 12.5px;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 180px;
  white-space: nowrap;
}

/* =============== FAVOURITE PROJECT PANEL =============== */
.favourite-project-panel {
  background: #1e1e1e;
  padding: 1rem;
  border-radius: 8px;
  animation: fadeInSlide 0.3s ease;
  min-height: 100px;
}

.favourite-header {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 12px;
}

.favourite-header .back-button {
  font-size: 1.2rem;
  cursor: pointer;
  padding: 8px 10px;
  background: #232323;
  border-radius: 8px;
  transition: transform 0.2s ease, box-shadow 0.3s ease, background 0.2s ease;
  box-shadow: 0 0 4px rgba(255, 193, 7, 0.15);
}

.favourite-header .back-button:hover {
  background: #2c2c2c;
  transform: scale(1.08);
  box-shadow: 0 0 10px rgba(255, 193, 7, 0.3);
}

.fav-title {
  font-weight: 600;
  font-size: 15px;
}

.fav-tree-container {
  max-height: calc(100vh - 140px);
  overflow-y: auto;
}

/* =============== OVERLAY PANEL =============== */
:host ::ng-deep .p-overlaypanel {
  background-color: #1f1f1f;
  color: #eee;
  border: 1px solid #333;
  box-shadow: 0 2px 8px rgba(255, 255, 255, 0.05);
}

.query-title {
  font-weight: bold;
  margin-bottom: 6px;
  font-size: 0.8125rem;
  color: #fff;
}

.query-button {
  background: #007bff;
  color: #fff;
  border: none;
  border-radius: 4px;
  padding: 4px 10px;
  margin: 4px 0;
  font-size: 0.75rem;
  cursor: pointer;
  transition: background 0.2s ease;
}

.query-button:hover {
  background: #0056b3;
}

/* =============== ANIMATIONS =============== */
@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-8px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes bounceIn {
  0% {
    transform: scale(0.6);
    opacity: 0;
  }
  60% {
    transform: scale(1.2);
    opacity: 1;
  }
  100% {
    transform: scale(1);
  }
}

@keyframes popIn {
  0% {
    transform: scale(0.5) rotate(-20deg);
    opacity: 0;
  }
  60% {
    transform: scale(1.2) rotate(5deg);
    opacity: 1;
  }
  100% {
    transform: scale(1) rotate(0deg);
  }
}

@keyframes fadeInSlide {
  from {
    opacity: 0;
    transform: translateY(8px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@keyframes boom {
  0% {
    transform: scale(1);
    box-shadow: 0 0 0 transparent;
  }
  50% {
    transform: scale(1.05);
    box-shadow: 0 0 14px rgba(255, 193, 7, 0.35);
  }
  100% {
    transform: scale(1);
    box-shadow: none;
  }
}

.modern-back-icon {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-size: 1.2rem;
  width: 36px;
  height: 36px;
  background-color: #232323;
  color: #ffc107;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.2s ease, transform 0.2s ease, box-shadow 0.3s ease;
  box-shadow: 0 0 4px rgba(255, 193, 7, 0.15);
}

.modern-back-icon:hover {
  background-color: #2e2e2e;
  transform: scale(1.08);
  box-shadow: 0 0 10px rgba(255, 193, 7, 0.35);
}

