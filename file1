private consolidateCode(): string {
  return `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Live Preview</title>
  <style>
    body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
    ${this.cssCode}

    /* Loader styles */
    #loader {
      position: fixed;
      inset: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(255, 255, 255, 0.9);
      z-index: 9999;
      font-size: 18px;
      font-weight: bold;
      color: #007bff;
    }

    .spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #007bff;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin-right: 10px;
    }

    @keyframes spin {
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div id="loader">
    <div class="spinner"></div>
    Loading preview...
  </div>

  <div id="content" style="display:none;">
    ${this.htmlCode}
  </div>

  <script>
    function waitForResources() {
      const links = Array.from(document.querySelectorAll("link[rel='stylesheet']"));
      const scripts = Array.from(document.querySelectorAll("script[src]"));

      const promises = [];

      // Wait for stylesheets
      links.forEach(link => {
        promises.push(new Promise((resolve, reject) => {
          link.addEventListener("load", resolve);
          link.addEventListener("error", reject);
        }));
      });

      // Wait for external scripts
      scripts.forEach(script => {
        if (script.src) {
          promises.push(new Promise((resolve, reject) => {
            script.addEventListener("load", resolve);
            script.addEventListener("error", reject);
          }));
        }
      });

      return Promise.allSettled(promises);
    }

    async function init() {
      try {
        await waitForResources();

        // Run user JS
        try {
          ${this.jsCode}
        } catch (err) {
          document.body.insertAdjacentHTML('beforeend',
            '<div style="color:red;background:#ffe6e6;padding:10px;margin:10px 0;border:1px solid red;border-radius:4px;"><strong>JavaScript Error:</strong> ' + err.message + '</div>'
          );
        }

      } finally {
        // Hide loader & show content
        document.getElementById("loader").style.display = "none";
        document.getElementById("content").style.display = "block";
      }
    }

    window.addEventListener("load", init);
  </script>
</body>
</html>`;
}
