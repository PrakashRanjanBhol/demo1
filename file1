// ============================================
// app.component.ts (Single Component)
// ============================================
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

interface Task {
  id: number;
  title: string;
  description: string;
  created: string;
  isActive: boolean;
}

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, FormsModule],
  template: `
    <div class="sidebar">
      <div class="sidebar-header">
        <div class="sidebar-header-icon">
          <svg viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21.5 2v6h-6M2.5 22v-6h6M2 11.5a10 10 0 0 1 18.8-4.3M22 12.5a10 10 0 0 1-18.8 4.2" />
          </svg>
        </div>
        <div class="sidebar-header-content">
          <h1>SDLC Suite</h1>
          <p class="sidebar-header-subtitle">Manage your entire software development lifecycle</p>
        </div>
        <button class="theme-toggle" (click)="toggleTheme()" [attr.aria-label]="isLightMode ? 'Switch to dark mode' : 'Switch to light mode'">
          <svg *ngIf="!isLightMode" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="5"></circle>
            <line x1="12" y1="1" x2="12" y2="3"></line>
            <line x1="12" y1="21" x2="12" y2="23"></line>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
            <line x1="1" y1="12" x2="3" y2="12"></line>
            <line x1="21" y1="12" x2="23" y2="12"></line>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
          </svg>
          <svg *ngIf="isLightMode" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
          </svg>
        </button>
      </div>

      <div class="sidebar-content">
        <!-- Task List View -->
        <div class="view-container task-list-view" [class.hidden]="showCreateView">
          <div class="tasks-header-wrapper">
            <div class="section-header">
              <h3>Your Tasks</h3>
              <span class="task-count">{{ tasks.length }}</span>
            </div>
            <button class="plan-task-btn" (click)="showCreateTaskView()">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
              <span>Plan Task</span>
            </button>
          </div>

          <div class="tasks-section">
            <div class="tasks-list">
              <ng-container *ngIf="tasks.length > 0; else emptyState">
                <div 
                  *ngFor="let task of tasks; let i = index"
                  class="task-card"
                  [class.active]="task.isActive"
                  [style.animation-delay]="(i * 0.05) + 's'"
                  (click)="toggleTaskActive(task.id)">
                  <div class="task-title">{{ task.title }}</div>
                  <div class="task-description">{{ task.description }}</div>
                  <div class="task-meta">
                    <div class="task-date">
                      <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                        <line x1="16" y1="2" x2="16" y2="6"></line>
                        <line x1="8" y1="2" x2="8" y2="6"></line>
                        <line x1="3" y1="10" x2="21" y2="10"></line>
                      </svg>
                      {{ task.created }}
                    </div>
                  </div>
                </div>
              </ng-container>

              <ng-template #emptyState>
                <div class="empty-state">
                  <div class="empty-state-icon">ðŸ“‹</div>
                  <h4>No tasks yet</h4>
                  <p>Click "Plan Task" to create your first task</p>
                </div>
              </ng-template>
            </div>
          </div>
        </div>

        <!-- Create Task View -->
        <div class="view-container create-task-view" [class.active]="showCreateView">
          <div class="create-task-header">
            <button class="back-btn" (click)="showTaskListView()">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M19 12H5M12 19l-7-7 7-7" />
              </svg>
            </button>
            <h2>Create New Task</h2>
          </div>

          <div class="create-task-form">
            <form #taskForm="ngForm" (ngSubmit)="createTask()">
              <div class="form-group">
                <label for="taskTitle">Task Title</label>
                <input 
                  #titleInput
                  type="text" 
                  id="taskTitle" 
                  name="title"
                  [(ngModel)]="newTask.title"
                  placeholder="Enter task title" 
                  required>
              </div>
              <div class="form-group">
                <label for="taskDescription">Description</label>
                <textarea 
                  id="taskDescription"
                  name="description"
                  [(ngModel)]="newTask.description"
                  placeholder="Describe your task in detail"
                  rows="6">
                </textarea>
              </div>
              <div class="form-actions">
                <button type="button" class="cancel-btn" (click)="cancelCreate()">Cancel</button>
                <button type="submit" class="submit-btn" [disabled]="!taskForm.valid">
                  <span>Create Task</span>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  `,
  styles: [`
    /* CSS Variables for Dark Theme (Default) */
    :root {
      /* Background Colors */
      --sdlc-suite-bg-primary: #111113;
      --sdlc-suite-bg-secondary: #1c1c1f;
      --sdlc-suite-bg-tertiary: #252528;
      --sdlc-suite-bg-quaternary: #0a0a0b;
      --sdlc-suite-bg-hover: #2a2a2d;
      --sdlc-suite-bg-active: #0d0d0f;
      
      /* Border Colors */
      --sdlc-suite-border-primary: #2a2a2d;
      --sdlc-suite-border-secondary: #3a3a3d;
      --sdlc-suite-border-accent: #8b5cf6;
      --sdlc-suite-border-accent-light: rgba(139, 92, 246, 0.3);
      
      /* Text Colors */
      --sdlc-suite-text-primary: #e8e8e8;
      --sdlc-suite-text-secondary: #9ca3af;
      --sdlc-suite-text-tertiary: #6b7280;
      --sdlc-suite-text-muted: #d1d5db;
      
      /* Accent Colors */
      --sdlc-suite-accent-purple: #8b5cf6;
      --sdlc-suite-accent-purple-light: #c4b5fd;
      --sdlc-suite-accent-indigo: #6366f1;
      --sdlc-suite-accent-fuchsia: #a855f7;
      
      /* Gradients */
      --sdlc-suite-gradient-primary: linear-gradient(135deg, #6366f1, #8b5cf6, #a855f7);
      --sdlc-suite-gradient-hover: linear-gradient(135deg, #7c3aed, #a78bfa);
      --sdlc-suite-gradient-accent-bg: linear-gradient(135deg, rgba(99, 102, 241, 0.2), rgba(139, 92, 246, 0.2), rgba(168, 85, 247, 0.2));
      
      /* Box Shadows */
      --sdlc-suite-shadow-sm: 0 0.125rem 0.75rem rgba(139, 92, 246, 0.3);
      --sdlc-suite-shadow-md: 0 0.25rem 1rem rgba(139, 92, 246, 0.4);
      --sdlc-suite-shadow-focus: 0 0 0 0.1875rem rgba(139, 92, 246, 0.1);
      
      /* Scrollbar Colors */
      --sdlc-suite-scrollbar-thumb: #2a2a2d;
      --sdlc-suite-scrollbar-thumb-hover: #3a3a3d;
    }

    /* CSS Variables for Light Theme */
    :host-context(.light-theme) {
      /* Background Colors */
      --sdlc-suite-bg-primary: #ffffff;
      --sdlc-suite-bg-secondary: #f9fafb;
      --sdlc-suite-bg-tertiary: #f3f4f6;
      --sdlc-suite-bg-quaternary: #f5f5f7;
      --sdlc-suite-bg-hover: #e5e7eb;
      --sdlc-suite-bg-active: #d1d5db;
      
      /* Border Colors */
      --sdlc-suite-border-primary: #e5e7eb;
      --sdlc-suite-border-secondary: #d1d5db;
      --sdlc-suite-border-accent: #8b5cf6;
      --sdlc-suite-border-accent-light: rgba(139, 92, 246, 0.3);
      
      /* Text Colors */
      --sdlc-suite-text-primary: #1f2937;
      --sdlc-suite-text-secondary: #6b7280;
      --sdlc-suite-text-tertiary: #9ca3af;
      --sdlc-suite-text-muted: #4b5563;
      
      /* Accent Colors */
      --sdlc-suite-accent-purple: #8b5cf6;
      --sdlc-suite-accent-purple-light: #7c3aed;
      --sdlc-suite-accent-indigo: #6366f1;
      --sdlc-suite-accent-fuchsia: #a855f7;
      
      /* Gradients */
      --sdlc-suite-gradient-primary: linear-gradient(135deg, #6366f1, #8b5cf6, #a855f7);
      --sdlc-suite-gradient-hover: linear-gradient(135deg, #7c3aed, #a78bfa);
      --sdlc-suite-gradient-accent-bg: linear-gradient(135deg, rgba(99, 102, 241, 0.1), rgba(139, 92, 246, 0.1), rgba(168, 85, 247, 0.1));
      
      /* Box Shadows */
      --sdlc-suite-shadow-sm: 0 0.125rem 0.75rem rgba(139, 92, 246, 0.2);
      --sdlc-suite-shadow-md: 0 0.25rem 1rem rgba(139, 92, 246, 0.3);
      --sdlc-suite-shadow-focus: 0 0 0 0.1875rem rgba(139, 92, 246, 0.08);
      
      /* Scrollbar Colors */
      --sdlc-suite-scrollbar-thumb: #9ca3af;
      --sdlc-suite-scrollbar-thumb-hover: #6b7280;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :host {
      display: block;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background-color: var(--sdlc-suite-bg-primary);
      color: var(--sdlc-suite-text-primary);
      overflow: hidden;
      height: 100vh;
      font-size: 0.9rem;
    }

    .sidebar {
      width: 280px;
      background: var(--sdlc-suite-bg-primary);
      border-right: 1px solid var(--sdlc-suite-border-primary);
      display: flex;
      flex-direction: column;
      height: 100vh;
      overflow: hidden;
    }

    .sidebar-header {
      padding: 1rem;
      border-bottom: 1px solid var(--sdlc-suite-border-primary);
      background: var(--sdlc-suite-bg-secondary);
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .sidebar-header-icon {
      flex-shrink: 0;
      width: 2rem;
      height: 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--sdlc-suite-gradient-primary);
      border-radius: 0.5rem;
    }

    .sidebar-header-icon svg {
      width: 1.25rem;
      height: 1.25rem;
    }

    .sidebar-header-content {
      flex: 1;
    }

    .sidebar-header h1 {
      font-size: 1rem;
      font-weight: 700;
      background: var(--sdlc-suite-gradient-primary);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      line-height: 1.3;
      letter-spacing: -0.02em;
      margin-bottom: 0.125rem;
    }

    .sidebar-header-subtitle {
      font-size: 0.65rem;
      color: var(--sdlc-suite-text-secondary);
      line-height: 1.3;
      font-weight: 400;
    }

    .theme-toggle {
      width: 2rem;
      height: 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--sdlc-suite-bg-secondary);
      border: 1px solid var(--sdlc-suite-border-primary);
      border-radius: 0.375rem;
      color: var(--sdlc-suite-text-primary);
      cursor: pointer;
      transition: all 0.2s ease;
      flex-shrink: 0;
    }

    .theme-toggle:hover {
      background: var(--sdlc-suite-bg-tertiary);
      border-color: var(--sdlc-suite-border-accent);
      color: var(--sdlc-suite-accent-purple);
    }

    .theme-toggle svg {
      width: 1rem;
      height: 1rem;
    }

    .sidebar-content {
      flex: 1;
      display: flex;
      position: relative;
      overflow: hidden;
    }

    .view-container {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      padding: 1rem 1.25rem;
      overflow-y: auto;
      overflow-x: hidden;
      display: flex;
      flex-direction: column;
      transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.4s ease;
    }

    .task-list-view {
      transform: translateX(0);
      opacity: 1;
    }

    .task-list-view.hidden {
      transform: translateX(-100%);
      opacity: 0;
      pointer-events: none;
    }

    .create-task-view {
      transform: translateX(100%);
      opacity: 0;
      pointer-events: none;
    }

    .create-task-view.active {
      transform: translateX(0);
      opacity: 1;
      pointer-events: auto;
    }

    .tasks-header-wrapper {
      display: flex;
      justify-content: space-between;
      align-items: center;
      width: 100%;
      margin-bottom: 1rem;
    }

    .section-header {
      display: flex;
      align-items: center;
      gap: 0.375rem;
    }

    .section-header h3 {
      font-size: 0.875rem;
      font-weight: 700;
      color: var(--sdlc-suite-text-primary);
      text-transform: uppercase;
      letter-spacing: 0.05em;
      line-height: 1;
    }

    .task-count {
      background: var(--sdlc-suite-bg-quaternary);
      color: var(--sdlc-suite-accent-purple);
      padding: 0.25rem 0.5rem;
      border-radius: 0.25rem;
      font-size: 0.6875rem;
      font-weight: 500;
      line-height: 1;
      display: flex;
      align-items: center;
      border: 1px solid var(--sdlc-suite-border-primary);
    }

    .plan-task-btn {
      padding: 0.625rem 1rem;
      background: var(--sdlc-suite-gradient-primary);
      border: none;
      border-radius: 0.375rem;
      color: white;
      font-size: 0.875rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      position: relative;
      overflow: hidden;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .plan-task-btn svg {
      width: 16px;
      height: 16px;
      flex-shrink: 0;
    }

    .plan-task-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--sdlc-suite-gradient-hover);
      opacity: 0;
      transition: opacity 0.2s;
    }

    .plan-task-btn:hover::before {
      opacity: 1;
    }

    .plan-task-btn:hover {
      transform: translateY(-0.0625rem);
      box-shadow: var(--sdlc-suite-shadow-md);
      filter: brightness(1.1);
    }

    .plan-task-btn span {
      position: relative;
      z-index: 1;
    }

    .create-task-header {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin-bottom: 1.5rem;
    }

    .back-btn {
      width: 2rem;
      height: 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
      background: var(--sdlc-suite-bg-secondary);
      border: 1px solid var(--sdlc-suite-border-primary);
      border-radius: 0.375rem;
      color: var(--sdlc-suite-text-primary);
      cursor: pointer;
      transition: all 0.2s ease;
      flex-shrink: 0;
    }

    .back-btn:hover {
      background: var(--sdlc-suite-bg-tertiary);
      border-color: var(--sdlc-suite-border-accent);
      color: var(--sdlc-suite-accent-purple);
    }

    .back-btn svg {
      width: 1rem;
      height: 1rem;
    }

    .create-task-header h2 {
      font-size: 1.125rem;
      font-weight: 600;
      color: var(--sdlc-suite-text-primary);
      line-height: 1;
    }

    .create-task-form {
      flex: 1;
      display: flex;
      flex-direction: column;
    }

    .create-task-form form {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      animation: fadeInUp 0.5s ease-out 0.2s backwards;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 0.375rem;
    }

    .form-group label {
      font-size: 0.7rem;
      font-weight: 600;
      color: var(--sdlc-suite-text-label);
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }

    .form-group input,
    .form-group textarea {
      width: 100%;
      padding: 0.625rem 0.75rem;
      background-color: var(--sdlc-suite-bg-tertiary);
      border: 1px solid var(--sdlc-suite-border-tertiary);
      border-radius: 0.5rem;
      color: var(--sdlc-suite-text-primary);
      font-size: 0.8rem;
      font-family: inherit;
      transition: all 0.3s;
    }

    .form-group input:focus,
    .form-group textarea:focus {
      outline: none;
      border-color: var(--sdlc-suite-accent-primary);
      background-color: var(--sdlc-suite-bg-primary);
      box-shadow: var(--sdlc-suite-shadow-focus);
    }

    .form-group textarea {
      resize: vertical;
      min-height: 5rem;
    }

    .form-actions {
      display: flex;
      gap: 0.5rem;
      margin-top: 0.5rem;
    }

    .cancel-btn {
      flex: 1;
      padding: 0.625rem 1rem;
      background: var(--sdlc-suite-bg-tertiary);
      border: 1px solid var(--sdlc-suite-border-tertiary);
      border-radius: 0.5rem;
      color: var(--sdlc-suite-text-white);
      font-size: 0.8rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
    }

    .cancel-btn:hover {
      background: var(--sdlc-suite-bg-secondary);
      border-color: var(--sdlc-suite-border-hover);
    }

    .submit-btn {
      flex: 1;
      padding: 0.625rem 1rem;
      background: var(--sdlc-suite-gradient-primary);
      border: none;
      border-radius: 0.5rem;
      color: white;
      font-size: 0.8rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
      position: relative;
      overflow: hidden;
    }

    .submit-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .submit-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--sdlc-suite-gradient-hover);
      opacity: 0;
      transition: opacity 0.3s;
    }

    .submit-btn:not(:disabled):hover::before {
      opacity: 1;
    }

    .submit-btn span {
      position: relative;
      z-index: 1;
    }

    .tasks-section {
      flex: 1;
      display: flex;
      flex-direction: column;
      min-height: 0;
    }

    .tasks-list {
      display: flex;
      flex-direction: column;
      gap: 0;
    }

    .task-card {
      background: var(--sdlc-suite-bg-secondary);
      border: 1px solid var(--sdlc-suite-border-primary);
      border-radius: 0.5rem;
      padding: 1rem;
      margin-bottom: 0.75rem;
      cursor: pointer;
      position: relative;
      overflow: hidden;
      transition: all 0.2s ease;
      animation: fadeInUp 0.4s ease-out;
      animation-fill-mode: both;
    }

    .task-card:hover {
      border-color: var(--sdlc-suite-border-accent);
      box-shadow: var(--sdlc-suite-shadow-sm);
      transform: translateY(-0.125rem);
      background: var(--sdlc-suite-bg-tertiary);
    }

    .task-card.active {
      border-color: var(--sdlc-suite-border-accent);
      background: var(--sdlc-suite-bg-active);
    }

    .task-card::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      width: 0.1875rem;
      height: 100%;
      background: var(--sdlc-suite-gradient-primary);
      opacity: 0;
      transition: opacity 0.2s ease;
    }

    .task-card:hover::before {
      opacity: 1;
    }

    .task-card.active::before {
      opacity: 1;
    }

    .task-card::after {
      content: '';
      position: absolute;
      top: 0.75rem;
      right: 0.75rem;
      width: 0.4rem;
      height: 0.4rem;
      background: var(--sdlc-suite-accent-primary);
      border-radius: 50%;
      opacity: 0;
    }

    .task-card.active::after {
      opacity: 1;
      animation: blink 2s ease-in-out infinite;
    }

    .task-title {
      font-size: 0.8rem;
      font-weight: 600;
      color: var(--sdlc-suite-text-white);
      margin-bottom: 0.375rem;
      line-height: 1.3;
    }

    .task-description {
      color: var(--sdlc-suite-text-secondary);
      font-size: 0.725rem;
      line-height: 1.4;
      margin-bottom: 0.5rem;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .task-meta {
      display: flex;
      align-items: center;
      gap: 0.375rem;
      font-size: 0.625rem;
      color: var(--sdlc-suite-text-tertiary);
    }

    .task-date {
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    .empty-state {
      text-align: center;
      padding: 2rem 1rem;
      color: var(--sdlc-suite-text-tertiary);
      animation: fadeIn 0.5s ease-out;
    }

    .empty-state-icon {
      font-size: 2.5rem;
      margin-bottom: 0.75rem;
      opacity: 0.5;
    }

    .empty-state h4 {
      font-size: 0.85rem;
      color: var(--sdlc-suite-text-secondary);
      margin-bottom: 0.375rem;
    }

    .empty-state p {
      font-size: 0.725rem;
    }

    ::-webkit-scrollbar {
      width: 0.375rem;
    }

    ::-webkit-scrollbar-track {
      background: transparent;
    }

    ::-webkit-scrollbar-thumb {
      background: var(--sdlc-suite-scrollbar-thumb);
      border-radius: 0.1875rem;
    }

    ::-webkit-scrollbar-thumb:hover {
      background: var(--sdlc-suite-scrollbar-thumb-hover);
    }

    @keyframes blink {
      0%, 100% {
        opacity: 1;
        transform: scale(1);
      }
      50% {
        opacity: 0.3;
        transform: scale(0.8);
      }
    }

    @keyframes slideInCard {
      from {
        opacity: 0;
        transform: translateY(0.5rem);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(1.25rem);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  `]
})
export class AppComponent implements OnInit {
  tasks: Task[] = [];
  showCreateView = false;
  isLightMode = false;
  newTask = {
    title: '',
    description: ''
  };

  ngOnInit(): void {
    // Check for saved theme preference
    const savedTheme = localStorage.getItem('sdlc-theme');
    if (savedTheme === 'light') {
      this.isLightMode = true;
      document.body.classList.add('light-theme');
    }
  }

  toggleTheme(): void {
    this.isLightMode = !this.isLightMode;
    if (this.isLightMode) {
      document.body.classList.add('light-theme');
      localStorage.setItem('sdlc-theme', 'light');
    } else {
      document.body.classList.remove('light-theme');
      localStorage.setItem('sdlc-theme', 'dark');
    }
  }

  showCreateTaskView(): void {
    this.showCreateView = true;
  }

  showTaskListView(): void {
    this.showCreateView = false;
    this.resetForm();
  }

  createTask(): void {
    if (this.newTask.title.trim()) {
      const task: Task = {
        id: Date.now(),
        title: this.newTask.title.trim(),
        description: this.newTask.description.trim() || 'No description provided',
        created: new Date().toLocaleDateString('en-US', {
          month: 'short',
          day: 'numeric',
          year: 'numeric'
        }),
        isActive: false
      };

      this.tasks.unshift(task);
      this.showTaskListView();
    }
  }

  cancelCreate(): void {
    this.showTaskListView();
  }

  toggleTaskActive(taskId: number): void {
    this.tasks = this.tasks.map(task => ({
      ...task,
      isActive: task.id === taskId ? !task.isActive : false
    }));
  }

  private resetForm(): void {
    this.newTask = {
      title: '',
      description: ''
    };
  }
}

// ============================================
// main.ts (Bootstrap Configuration)
// ============================================
/*
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent)
  .catch(err => console.error(err));
*/
