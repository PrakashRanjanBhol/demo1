components/
  ImagePreviewGrid.jsx
  FullImageScrollModal.jsx
styles/
  ImagePreviewGrid.module.css
  FullImageScrollModal.module.css



import React, { useState } from 'react';
import { Dialog } from 'primereact/dialog';
import { Button } from 'primereact/button';
import FullImageScrollModal from './FullImageScrollModal';
import styles from '../styles/ImagePreviewGrid.module.css';

const ImagePreviewGrid = ({ imageList }) => {
  const [previewImage, setPreviewImage] = useState(null);
  const [showAll, setShowAll] = useState(false);

  const firstTen = imageList.slice(0, 10);
  const remainingCount = imageList.length - 10;

  return (
    <div>
      <div className={styles.grid}>
        {firstTen.map((img, idx) => (
          <img
            key={idx}
            src={img.img_path}
            alt="img"
            className={styles.thumb}
            onClick={() => setPreviewImage(img.img_path)}
          />
        ))}
        {remainingCount > 0 && (
          <Button
            label={`+${remainingCount} More Images`}
            className={`p-button-sm p-button-secondary ${styles.moreButton}`}
            onClick={() => setShowAll(true)}
          />
        )}
      </div>

      <Dialog
        header="Image Preview"
        visible={!!previewImage}
        onHide={() => setPreviewImage(null)}
        style={{ width: '50vw' }}
        modal
      >
        <img src={previewImage} alt="preview" style={{ width: '100%' }} />
      </Dialog>

      <FullImageScrollModal
        visible={showAll}
        onHide={() => setShowAll(false)}
        fullList={imageList}
      />
    </div>
  );
};

export default ImagePreviewGrid;







import React, { useEffect, useState } from 'react';
import { Dialog } from 'primereact/dialog';
import styles from '../styles/FullImageScrollModal.module.css';

const FullImageScrollModal = ({ visible, onHide, fullList }) => {
  const chunkSize = 20;
  const [displayedImages, setDisplayedImages] = useState([]);
  const [nextIndex, setNextIndex] = useState(0);

  useEffect(() => {
    if (visible) {
      setDisplayedImages([]);
      setNextIndex(0);
    }
  }, [visible]);

  useEffect(() => {
    if (visible && nextIndex === 0) {
      loadMoreImages(); // Load initial 20 on open
    }
  }, [nextIndex, visible]);

  const loadMoreImages = () => {
    const nextChunk = fullList.slice(nextIndex, nextIndex + chunkSize);
    setDisplayedImages((prev) => [...prev, ...nextChunk]);
    setNextIndex((prev) => prev + chunkSize);
  };

  const handleScroll = (e) => {
    const { scrollTop, scrollHeight, clientHeight } = e.target;
    if (scrollTop + clientHeight >= scrollHeight - 20) {
      if (nextIndex < fullList.length) {
        loadMoreImages();
      }
    }
  };

  return (
    <Dialog
      header="All Images"
      visible={visible}
      onHide={onHide}
      modal
      style={{ width: '70vw', maxHeight: '80vh' }}
    >
      <div className={styles.scrollContainer} onScroll={handleScroll}>
        <div className={styles.grid}>
          {displayedImages.map((img, idx) => (
            <img key={idx} src={img.img_path} alt="img" className={styles.thumb} />
          ))}
        </div>
        {nextIndex < fullList.length && (
          <p className={styles.loading}>Loading more images...</p>
        )}
      </div>
    </Dialog>
  );
};

export default FullImageScrollModal;










.grid {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  align-items: center;
}

.thumb {
  width: 120px;
  height: 80px;
  object-fit: cover;
  border-radius: 8px;
  cursor: pointer;
}

.moreButton {
  height: 80px;
  min-width: 120px;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
}










.scrollContainer {
  height: 60vh;
  overflow-y: auto;
  padding: 10px;
}

.grid {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}

.thumb {
  width: 140px;
  height: 100px;
  object-fit: cover;
  border-radius: 6px;
}

.loading {
  text-align: center;
  margin-top: 10px;
  font-style: italic;
  color: gray;
}







import React from 'react';
import ImagePreviewGrid from './components/ImagePreviewGrid';

const imageList = Array.from({ length: 55 }, (_, i) => ({
  img_path: `https://picsum.photos/seed/${i}/300/200`,
}));

const App = () => {
  return (
    <div className="App">
      <ImagePreviewGrid imageList={imageList} />
    </div>
  );
};

export default App;

