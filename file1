import { Injectable, OnDestroy } from '@angular/core';
import { webSocket, WebSocketSubject } from 'rxjs/webSocket';
import { Observable, Subject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class WebsocketService implements OnDestroy {
  private socket$?: WebSocketSubject<any>;
  private messagesSubject$ = new Subject<any>();
  public messages$: Observable<any> = this.messagesSubject$.asObservable();

  // Establish WebSocket connection and optionally send a message immediately
  connect(url: string, initialMessage?: any): void {
    if (this.socket$) {
      console.warn('WebSocket is already connected.');
      return;
    }

    this.socket$ = webSocket({
      url: url,
      deserializer: e => JSON.parse(e.data),
      serializer: value => JSON.stringify(value)
    });

    this.socket$.subscribe({
      next: (msg) => this.messagesSubject$.next(msg),
      error: (err) => console.error('WebSocket error:', err),
      complete: () => console.log('WebSocket connection closed.')
    });

    console.log('Connected to WebSocket:', url);

    // âœ… Send initial message if provided
    if (initialMessage) {
      this.sendMessage(initialMessage);
    }
  }

  sendMessage(msg: any): void {
    if (!this.socket$) {
      console.error('WebSocket is not connected.');
      return;
    }
    this.socket$.next(msg);
  }

  close(): void {
    if (this.socket$) {
      this.socket$.complete();
      this.socket$ = undefined;
      console.log('WebSocket connection closed manually.');
    }
  }

  ngOnDestroy(): void {
    this.close();
  }
}
