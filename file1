import React, { useState, useMemo, useRef } from 'react';
import styles from './CustomDataTable.module.css';
import { FaSort, FaSortUp, FaSortDown } from 'react-icons/fa';
import { Button } from 'primereact/button';
import { OverlayPanel } from 'primereact/overlaypanel';

const CustomDataTable = ({ data }) => {
  const [sortConfig, setSortConfig] = useState({ key: '', direction: '' });
  const [filters, setFilters] = useState({});
  const [hiddenCols, setHiddenCols] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const rowsPerPage = 5;
  const overlayRef = useRef(null);

  const columns = data.length ? Object.keys(data[0]) : [];

  const sortedData = useMemo(() => {
    let sorted = [...data];
    if (sortConfig.key) {
      sorted.sort((a, b) => {
        const aVal = a[sortConfig.key];
        const bVal = b[sortConfig.key];
        if (aVal < bVal) return sortConfig.direction === 'asc' ? -1 : 1;
        if (aVal > bVal) return sortConfig.direction === 'asc' ? 1 : -1;
        return 0;
      });
    }
    return sorted;
  }, [data, sortConfig]);

  const filteredData = useMemo(() => {
    return sortedData.filter((row) =>
      columns.every((col) =>
        !filters[col] || String(row[col]).toLowerCase().includes(filters[col].toLowerCase())
      )
    );
  }, [sortedData, filters]);

  const paginatedData = useMemo(() => {
    const start = (currentPage - 1) * rowsPerPage;
    return filteredData.slice(start, start + rowsPerPage);
  }, [filteredData, currentPage]);

  const totalPages = Math.ceil(filteredData.length / rowsPerPage);

  const handleSort = (key) => {
    let direction = 'asc';
    if (sortConfig.key === key && sortConfig.direction === 'asc') direction = 'desc';
    setSortConfig({ key, direction });
  };

  const toggleColumn = (col) => {
    setHiddenCols((prev) =>
      prev.includes(col) ? prev.filter((c) => c !== col) : [...prev, col]
    );
  };

  return (
    <div className={styles.tableWrapper}>
      <div className={styles.headerActions}>
        <span style={{ color: '#ccc' }}>
          Showing {filteredData.length} of {data.length} items
        </span>
        {columns.length > 1 && (
          <>
            <Button
              icon="pi pi-sliders-h"
              onClick={(e) => overlayRef.current.toggle(e)}
              className={styles.toggleBtn}
              tooltip="Manage Columns"
            />
            <OverlayPanel ref={overlayRef}>
              <div className={styles.columnToggle}>
                {columns.map((col) => (
                  <label key={col}>
                    <input
                      type="checkbox"
                      checked={!hiddenCols.includes(col)}
                      onChange={() => toggleColumn(col)}
                    />{' '}
                    {col}
                  </label>
                ))}
              </div>
            </OverlayPanel>
          </>
        )}
      </div>

      <table className={styles.table}>
        <thead>
          <tr>
            {columns.map((col) =>
              hiddenCols.includes(col) ? null : (
                <th key={col}>
                  <div className={styles.thContent} onClick={() => handleSort(col)}>
                    {col}
                    {sortConfig.key === col ? (
                      sortConfig.direction === 'asc' ? <FaSortUp /> : <FaSortDown />
                    ) : (
                      <FaSort />
                    )}
                  </div>
                  {filteredData.length > 1 && (
                    <input
                      className={styles.filterInput}
                      placeholder="Filter..."
                      value={filters[col] || ''}
                      onChange={(e) =>
                        setFilters({ ...filters, [col]: e.target.value })
                      }
                    />
                  )}
                </th>
              )
            )}
          </tr>
        </thead>
        <tbody>
          {paginatedData.length === 0 ? (
            <tr>
              <td colSpan={columns.length} style={{ textAlign: 'center', padding: '1rem' }}>
                No data found.
              </td>
            </tr>
          ) : (
            paginatedData.map((row, idx) => (
              <tr key={idx}>
                {columns.map((col) =>
                  hiddenCols.includes(col) ? null : <td key={col}>{row[col]}</td>
                )}
              </tr>
            ))
          )}
        </tbody>
      </table>

      {totalPages > 1 && (
        <div className={styles.pagination}>
          <Button
            label="Prev"
            disabled={currentPage === 1}
            onClick={() => setCurrentPage((prev) => prev - 1)}
            text
          />
          <span style={{ color: '#ccc' }}>
            Page {currentPage} of {totalPages}
          </span>
          <Button
            label="Next"
            disabled={currentPage === totalPages}
            onClick={() => setCurrentPage((prev) => prev + 1)}
            text
          />
        </div>
      )}
    </div>
  );
};

export default CustomDataTable;




.tableWrapper {
  background-color: #181818;
  color: #f0f0f0;
  padding: 1rem;
  border-radius: 8px;
  overflow-x: auto;
  box-shadow: 0 0 10px #00000044;
}

.headerActions {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.toggleBtn {
  background: transparent !important;
  border: none !important;
  color: #f0f0f0 !important;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
}

.columnToggle {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  color: #000;
}

.table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.85rem;
}

th, td {
  border: 1px solid #333;
  padding: 0.75rem;
  text-align: left;
}

th {
  background-color: #222;
  color: #fff;
}

tbody tr:hover {
  background-color: #2a2a2a;
  transition: background-color 0.2s ease;
}

.filterInput {
  margin-top: 4px;
  width: 100%;
  padding: 4px;
  background: #101010;
  border: 1px solid #444;
  color: #eee;
  border-radius: 4px;
  font-size: 0.75rem;
}

.thContent {
  display: flex;
  align-items: center;
  gap: 0.4rem;
  cursor: pointer;
}

.pagination {
  display: flex;
  justify-content: center;
  gap: 1.5rem;
  margin-top: 1rem;
}



import React from 'react';
import CustomDataTable from './components/CustomDataTable';

const data = [
  { id: 1, name: 'John', role: 'Engineer' },
  { id: 2, name: 'Jane', role: 'Manager' },
  { id: 3, name: 'Alice', role: 'Developer' },
  { id: 4, name: 'Bob', role: 'Tester' },
  { id: 5, name: 'Zara', role: 'Architect' },
  { id: 6, name: 'Tom', role: 'Analyst' },
];

function App() {
  return (
    <div style={{ padding: '2rem', background: '#121212', minHeight: '100vh' }}>
      <CustomDataTable data={data} />
    </div>
  );
}

export default App;
