// template-sidebar.component.ts
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

interface FormField {
  id: string;
  label: string;
  type: 'text' | 'textarea' | 'email' | 'number' | 'select' | 'date';
  placeholder?: string;
  options?: string[];
  required?: boolean;
}

interface Template {
  id: number;
  title: string;
  description: string;
  badge?: string;
  detailDescription?: string;
  formFields?: FormField[];
}

@Component({
  selector: 'app-template-sidebar',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './template-sidebar.component.html',
  styleUrls: ['./template-sidebar.component.css']
})
export class TemplateSidebarComponent {
  activeTab: 'predefined' | 'custom' = 'predefined';
  hasCustomTemplates: boolean = false;
  showDetailView: boolean = false;
  selectedTemplate: Template | null = null;
  formData: { [key: string]: any } = {};

  predefinedTemplates: Template[] = [
    {
      id: 1,
      title: 'Business Proposal',
      description: 'Professional template for business proposals and pitches',
      badge: 'Popular',
      detailDescription: 'Create a comprehensive business proposal with this professional template. Perfect for pitching new ideas, securing funding, or presenting strategic initiatives to stakeholders.',
      formFields: [
        { id: 'companyName', label: 'Company Name', type: 'text', placeholder: 'Enter company name', required: true },
        { id: 'projectName', label: 'Project Name', type: 'text', placeholder: 'Enter project name', required: true },
        { id: 'budget', label: 'Budget', type: 'number', placeholder: 'Enter estimated budget', required: false },
        { id: 'timeline', label: 'Timeline', type: 'select', options: ['1-3 months', '3-6 months', '6-12 months', '12+ months'], required: true },
        { id: 'description', label: 'Project Description', type: 'textarea', placeholder: 'Describe your project...', required: true }
      ]
    },
    {
      id: 2,
      title: 'Project Report',
      description: 'Comprehensive template for project documentation',
      detailDescription: 'Document your project progress, milestones, and outcomes with this detailed report template. Ideal for project managers and team leads.',
      formFields: [
        { id: 'projectTitle', label: 'Project Title', type: 'text', placeholder: 'Enter project title', required: true },
        { id: 'reportDate', label: 'Report Date', type: 'date', required: true },
        { id: 'status', label: 'Project Status', type: 'select', options: ['On Track', 'At Risk', 'Delayed', 'Completed'], required: true },
        { id: 'summary', label: 'Executive Summary', type: 'textarea', placeholder: 'Provide a brief summary...', required: true }
      ]
    },
    {
      id: 3,
      title: 'Meeting Notes',
      description: 'Organized structure for meeting minutes and action items',
      badge: 'Recommended',
      detailDescription: 'Capture meeting discussions, decisions, and action items efficiently. This template helps ensure nothing gets lost in communication.',
      formFields: [
        { id: 'meetingTitle', label: 'Meeting Title', type: 'text', placeholder: 'Enter meeting title', required: true },
        { id: 'meetingDate', label: 'Meeting Date', type: 'date', required: true },
        { id: 'attendees', label: 'Attendees', type: 'text', placeholder: 'List attendees', required: true },
        { id: 'agenda', label: 'Agenda', type: 'textarea', placeholder: 'Meeting agenda points...', required: true },
        { id: 'notes', label: 'Notes & Decisions', type: 'textarea', placeholder: 'Key discussion points and decisions...', required: true }
      ]
    },
    {
      id: 4,
      title: 'Marketing Plan',
      description: 'Strategic template for marketing campaigns and strategies',
      detailDescription: 'Plan and execute successful marketing campaigns with this comprehensive template. Includes sections for target audience, channels, and metrics.',
      formFields: [
        { id: 'campaignName', label: 'Campaign Name', type: 'text', placeholder: 'Enter campaign name', required: true },
        { id: 'targetAudience', label: 'Target Audience', type: 'text', placeholder: 'Define your target audience', required: true },
        { id: 'channels', label: 'Marketing Channels', type: 'select', options: ['Social Media', 'Email', 'Content Marketing', 'Paid Ads', 'SEO'], required: true },
        { id: 'goals', label: 'Campaign Goals', type: 'textarea', placeholder: 'What do you want to achieve?', required: true }
      ]
    },
    {
      id: 5,
      title: 'Invoice Template',
      description: 'Professional invoice layout for billing clients',
      detailDescription: 'Generate professional invoices for your clients with all necessary details and payment information.',
      formFields: [
        { id: 'clientName', label: 'Client Name', type: 'text', placeholder: 'Enter client name', required: true },
        { id: 'invoiceNumber', label: 'Invoice Number', type: 'text', placeholder: 'INV-001', required: true },
        { id: 'amount', label: 'Total Amount', type: 'number', placeholder: 'Enter amount', required: true },
        { id: 'dueDate', label: 'Due Date', type: 'date', required: true },
        { id: 'services', label: 'Services Provided', type: 'textarea', placeholder: 'List services or products...', required: true }
      ]
    },
    {
      id: 6,
      title: 'Resume Builder',
      description: 'Clean and modern resume template',
      detailDescription: 'Build a professional resume that stands out. This template includes all essential sections for a compelling CV.',
      formFields: [
        { id: 'fullName', label: 'Full Name', type: 'text', placeholder: 'Enter your full name', required: true },
        { id: 'email', label: 'Email', type: 'email', placeholder: 'your.email@example.com', required: true },
        { id: 'position', label: 'Desired Position', type: 'text', placeholder: 'e.g., Software Engineer', required: true },
        { id: 'experience', label: 'Years of Experience', type: 'number', placeholder: 'Enter years', required: false },
        { id: 'summary', label: 'Professional Summary', type: 'textarea', placeholder: 'Brief professional summary...', required: true }
      ]
    }
  ];

  customTemplates: Template[] = [
    {
      id: 1,
      title: 'My Custom Template',
      description: 'Personal template for specific needs',
      detailDescription: 'This is your personalized template designed for your specific workflow and requirements.',
      formFields: [
        { id: 'title', label: 'Title', type: 'text', placeholder: 'Enter title', required: true },
        { id: 'content', label: 'Content', type: 'textarea', placeholder: 'Enter content...', required: true }
      ]
    },
    {
      id: 2,
      title: 'Team Workflow',
      description: 'Custom workflow template for team collaboration',
      detailDescription: 'Streamline your team collaboration with this custom workflow template.',
      formFields: [
        { id: 'taskName', label: 'Task Name', type: 'text', placeholder: 'Enter task name', required: true },
        { id: 'assignee', label: 'Assigned To', type: 'text', placeholder: 'Team member name', required: true },
        { id: 'priority', label: 'Priority', type: 'select', options: ['Low', 'Medium', 'High', 'Urgent'], required: true },
        { id: 'details', label: 'Task Details', type: 'textarea', placeholder: 'Describe the task...', required: true }
      ]
    }
  ];

  switchTab(tab: 'predefined' | 'custom'): void {
    this.activeTab = tab;
    this.showDetailView = false;
    this.selectedTemplate = null;
  }

  selectTemplate(template: Template): void {
    this.selectedTemplate = template;
    this.showDetailView = true;
    this.formData = {};
  }

  goBack(): void {
    this.showDetailView = false;
    this.selectedTemplate = null;
    this.formData = {};
  }

  onSubmit(): void {
    if (this.selectedTemplate) {
      console.log('Form submitted for:', this.selectedTemplate.title);
      console.log('Form data:', this.formData);
      // Add your form submission logic here
      alert('Form submitted successfully!');
    }
  }

  createNewTemplate(): void {
    console.log('Create new template');
    // Add your template creation logic here
  }
}


// template-sidebar.component.html
<div class="sidebar">
  <!-- Main View -->
  <div *ngIf="!showDetailView">
    <div class="sidebar-header">
      <div class="header-title">
        <div class="header-icon">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
            <polyline points="14 2 14 8 20 8"/>
            <line x1="16" y1="13" x2="8" y2="13"/>
            <line x1="16" y1="17" x2="8" y2="17"/>
            <polyline points="10 9 9 9 8 9"/>
          </svg>
        </div>
        <div class="header-text">
          <h2>Templates</h2>
          <p class="header-subtitle">Ask anything related to the template</p>
        </div>
      </div>
    </div>

    <div class="sidebar-tabs">
      <div class="tab-buttons">
        <button 
          class="tab-btn" 
          [class.active]="activeTab === 'predefined'"
          (click)="switchTab('predefined')">
          Predefined
        </button>
        <button 
          class="tab-btn" 
          [class.active]="activeTab === 'custom'"
          (click)="switchTab('custom')">
          Custom
        </button>
      </div>
    </div>

    <div class="content-area">
      <!-- Predefined Templates -->
      <div *ngIf="activeTab === 'predefined'" class="tab-content">
        <div 
          class="template-card" 
          *ngFor="let template of predefinedTemplates; let i = index"
          [style.animation-delay]="(i * 0.05) + 's'"
          (click)="selectTemplate(template)">
          <h3>{{ template.title }}</h3>
          <p>{{ template.description }}</p>
          <span class="template-badge" *ngIf="template.badge">{{ template.badge }}</span>
        </div>
      </div>

      <!-- Custom Templates (Empty State) -->
      <div *ngIf="activeTab === 'custom' && !hasCustomTemplates" class="tab-content">
        <div class="empty-state">
          <div class="empty-state-icon">📄</div>
          <h3>No Custom Templates</h3>
          <p>You haven't created any custom templates yet. Start by creating your first one!</p>
          <button class="create-btn" (click)="createNewTemplate()">+ Create New Template</button>
        </div>
      </div>

      <!-- Custom Templates (With Templates) -->
      <div *ngIf="activeTab === 'custom' && hasCustomTemplates" class="tab-content">
        <div style="margin-bottom: 16px;">
          <button class="create-btn" style="width: 100%;" (click)="createNewTemplate()">+ Create New Template</button>
        </div>
        
        <div 
          class="template-card" 
          *ngFor="let template of customTemplates; let i = index"
          [style.animation-delay]="(i * 0.05) + 's'"
          (click)="selectTemplate(template)">
          <h3>{{ template.title }}</h3>
          <p>{{ template.description }}</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Detail View -->
  <div *ngIf="showDetailView && selectedTemplate" class="detail-view">
    <div class="detail-header">
      <button class="back-btn" (click)="goBack()">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="19" y1="12" x2="5" y2="12"></line>
          <polyline points="12 19 5 12 12 5"></polyline>
        </svg>
      </button>
      <h2 class="detail-title">{{ selectedTemplate.title }}</h2>
    </div>

    <div class="detail-content">
      <div class="detail-description">
        <h3>About this template</h3>
        <p>{{ selectedTemplate.detailDescription }}</p>
      </div>

      <div class="detail-form">
        <h3>Fill in the details</h3>
        <form (ngSubmit)="onSubmit()">
          <div *ngFor="let field of selectedTemplate.formFields" class="form-group">
            <label [for]="field.id">
              {{ field.label }}
              <span *ngIf="field.required" class="required">*</span>
            </label>

            <!-- Text Input -->
            <input 
              *ngIf="field.type === 'text' || field.type === 'email' || field.type === 'number' || field.type === 'date'"
              [type]="field.type"
              [id]="field.id"
              [placeholder]="field.placeholder || ''"
              [(ngModel)]="formData[field.id]"
              [name]="field.id"
              [required]="field.required"
              class="form-input">

            <!-- Textarea -->
            <textarea 
              *ngIf="field.type === 'textarea'"
              [id]="field.id"
              [placeholder]="field.placeholder || ''"
              [(ngModel)]="formData[field.id]"
              [name]="field.id"
              [required]="field.required"
              rows="4"
              class="form-input form-textarea"></textarea>

            <!-- Select -->
            <select 
              *ngIf="field.type === 'select'"
              [id]="field.id"
              [(ngModel)]="formData[field.id]"
              [name]="field.id"
              [required]="field.required"
              class="form-input">
              <option value="" disabled selected>Select an option</option>
              <option *ngFor="let option of field.options" [value]="option">{{ option }}</option>
            </select>
          </div>

          <button type="submit" class="submit-btn">Ask</button>
        </form>
      </div>
    </div>
  </div>
</div>


// template-sidebar.component.css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.sidebar {
  width: 320px;
  height: 100vh;
  background: #111113;
  border-right: 1px solid #2a2a2d;
  display: flex;
  flex-direction: column;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

.sidebar-header {
  padding: 1.25rem;
  border-bottom: 1px solid #2a2a2d;
}

.header-title {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.header-text {
  display: flex;
  flex-direction: column;
  gap: 0.125rem;
}

.header-icon {
  width: 2.5rem;
  height: 2.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #6366f1, #8b5cf6, #a855f7);
  border-radius: 0.625rem;
  color: white;
  flex-shrink: 0;
}

.header-icon svg {
  width: 1.375rem;
  height: 1.375rem;
}

.sidebar-header h2 {
  font-size: 1.25rem;
  font-weight: 600;
  color: #e8e8e8;
  margin: 0;
  line-height: 1.2;
}

.header-subtitle {
  font-size: 0.75rem;
  color: #9ca3af;
  margin: 0;
  line-height: 1.3;
}

.sidebar-tabs {
  padding: 1rem 1.25rem;
  border-bottom: 1px solid #2a2a2d;
}

.tab-buttons {
  display: flex;
  gap: 0.5rem;
}

.tab-btn {
  flex: 1;
  padding: 0.625rem 1rem;
  border: none;
  background: #1c1c1f;
  color: #9ca3af;
  font-size: 0.875rem;
  font-weight: 500;
  border-radius: 0.375rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.tab-btn:hover {
  background: #252528;
  color: #d1d5db;
}

.tab-btn.active {
  background: linear-gradient(135deg, #6366f1, #8b5cf6, #a855f7);
  color: white;
}

.content-area {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  position: relative;
}

.tab-content {
  animation: fadeInUp 0.4s ease-out;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(1.25rem);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.template-card {
  background: #1c1c1f;
  border: 1px solid #2a2a2d;
  border-radius: 0.5rem;
  padding: 1rem;
  margin-bottom: 0.75rem;
  cursor: pointer;
  transition: all 0.2s ease;
  animation: fadeInUp 0.4s ease-out;
  animation-fill-mode: both;
}

.template-card:hover {
  border-color: #8b5cf6;
  box-shadow: 0 0.125rem 0.75rem rgba(139, 92, 246, 0.3);
  transform: translateY(-0.125rem);
  background: #252528;
}

.template-card h3 {
  font-size: 0.9375rem;
  font-weight: 600;
  color: #e8e8e8;
  margin-bottom: 0.375rem;
}

.template-card p {
  font-size: 0.8125rem;
  color: #9ca3af;
  line-height: 1.4;
}

.template-badge {
  display: inline-block;
  padding: 0.25rem 0.5rem;
  background: linear-gradient(135deg, rgba(99, 102, 241, 0.2), rgba(139, 92, 246, 0.2), rgba(168, 85, 247, 0.2));
  color: #c4b5fd;
  font-size: 0.6875rem;
  font-weight: 500;
  border-radius: 0.25rem;
  margin-top: 0.5rem;
  border: 1px solid rgba(139, 92, 246, 0.3);
}

.empty-state {
  text-align: center;
  padding: 2.5rem 1.25rem;
}

.empty-state-icon {
  width: 5rem;
  height: 5rem;
  margin: 0 auto 1rem;
  background: #1c1c1f;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2.25rem;
}

.empty-state h3 {
  font-size: 1rem;
  font-weight: 600;
  color: #e8e8e8;
  margin-bottom: 0.5rem;
}

.empty-state p {
  font-size: 0.875rem;
  color: #9ca3af;
  margin-bottom: 1.25rem;
  line-height: 1.5;
}

.create-btn {
  background: linear-gradient(135deg, #6366f1, #8b5cf6, #a855f7);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.create-btn:hover {
  transform: translateY(-0.0625rem);
  box-shadow: 0 0.25rem 1rem rgba(139, 92, 246, 0.4);
  filter: brightness(1.1);
}

.content-area::-webkit-scrollbar {
  width: 0.375rem;
}

.content-area::-webkit-scrollbar-track {
  background: transparent;
}

.content-area::-webkit-scrollbar-thumb {
  background: #d0d0d0;
  border-radius: 0.1875rem;
}

.content-area::-webkit-scrollbar-thumb:hover {
  background: #b0b0b0;
}

/* Detail View Styles */
.detail-view {
  display: flex;
  flex-direction: column;
  height: 100%;
  animation: slideInRight 0.3s ease-out;
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(1.25rem);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.detail-header {
  padding: 1.25rem;
  border-bottom: 1px solid #2a2a2d;
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.back-btn {
  background: #1c1c1f;
  border: 1px solid #2a2a2d;
  color: #e8e8e8;
  width: 2rem;
  height: 2rem;
  border-radius: 0.375rem;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
  flex-shrink: 0;
}

.back-btn:hover {
  background: #252528;
  border-color: #8b5cf6;
  color: #8b5cf6;
}

.detail-title {
  font-size: 1.125rem;
  font-weight: 600;
  color: #e8e8e8;
  margin: 0;
}

.detail-content {
  flex: 1;
  overflow-y: auto;
  padding: 1.25rem;
}

.detail-description {
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: #1c1c1f;
  border-radius: 0.5rem;
  border: 1px solid #2a2a2d;
}

.detail-description h3 {
  font-size: 0.875rem;
  font-weight: 600;
  color: #e8e8e8;
  margin-bottom: 0.5rem;
}

.detail-description p {
  font-size: 0.8125rem;
  color: #9ca3af;
  line-height: 1.5;
}

.detail-form h3 {
  font-size: 0.875rem;
  font-weight: 600;
  color: #e8e8e8;
  margin-bottom: 1rem;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  font-size: 0.8125rem;
  font-weight: 500;
  color: #e8e8e8;
  margin-bottom: 0.375rem;
}

.required {
  color: #ef4444;
  margin-left: 0.125rem;
}

.form-input {
  width: 100%;
  padding: 0.625rem 0.75rem;
  background: #1c1c1f;
  border: 1px solid #2a2a2d;
  border-radius: 0.375rem;
  color: #e8e8e8;
  font-size: 0.875rem;
  transition: all 0.2s ease;
  font-family: inherit;
}

.form-input:focus {
  outline: none;
  border-color: #8b5cf6;
  box-shadow: 0 0 0 0.1875rem rgba(139, 92, 246, 0.1);
}

.form-input::placeholder {
  color: #6b7280;
}

.form-textarea {
  resize: vertical;
  min-height: 4rem;
}

.submit-btn {
  width: 100%;
  background: linear-gradient(135deg, #6366f1, #8b5cf6, #a855f7);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  margin-top: 1rem;
}

.submit-btn:hover {
  transform: translateY(-0.0625rem);
  box-shadow: 0 0.25rem 1rem rgba(139, 92, 246, 0.4);
  filter: brightness(1.1);
}

.detail-content::-webkit-scrollbar {
  width: 0.375rem;
}

.detail-content::-webkit-scrollbar-track {
  background: transparent;
}

.detail-content::-webkit-scrollbar-thumb {
  background: #d0d0d0;
  border-radius: 0.1875rem;
}

.detail-content::-webkit-scrollbar-thumb:hover {
  background: #b0b0b0;
}
