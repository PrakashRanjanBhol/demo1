<div class="settings-container">
    <h2>Settings</h2>

    <div class="radio-group">
        <div *ngFor="let option of options" class="radio-label-wrapper">
            <p-radioButton name="settingsOption" [value]="option.value" [(ngModel)]="selectedValue"
                (onClick)="onOptionChange(option.value)" [disabled]="loading && activeOption === option.value">
            </p-radioButton>

            <!-- Label with states -->
            <label [ngClass]="{
        'loading-label': loading && activeOption === option.value,
        'success-label': success && activeOption === option.value
      }">
                {{ option.label }}

                <!-- Loading dots -->
                <span class="dots" *ngIf="loading && activeOption === option.value">
                    <span>.</span><span>.</span><span>.</span>
                </span>

                <!-- Success check -->
                <i *ngIf="success && activeOption === option.value" class="pi pi-check"></i>
            </label>
        </div>
    </div>
</div>













.radio-group {
    display: flex;
    flex-direction: column;
    gap: 14px;
}

.radio-label-wrapper {
    display: flex;
    align-items: center;
    gap: 8px;
}

/* Normal Label */
.radio-label-wrapper label {
    font-size: 15px;
    font-family: "Poppins", sans-serif;
    color: #ddd;
    transition: color 0.3s ease;
}

/* Loading State */
.loading-label {
    color: #007ad9;
    font-weight: 500;
    display: flex;
    align-items: center;
}

.dots {
    display: inline-flex;
    margin-left: 4px;
}

.dots span {
    animation: bounce 1s infinite;
    opacity: 0.5;
    font-weight: bold;
    margin-left: 1px;
}

.dots span:nth-child(2) {
    animation-delay: 0.2s;
}

.dots span:nth-child(3) {
    animation-delay: 0.4s;
}

@keyframes bounce {

    0%,
    100% {
        transform: translateY(0);
        opacity: 0.5;
    }

    50% {
        transform: translateY(-3px);
        opacity: 1;
    }
}

/* Success State */
.success-label {
    color: #28a745 !important;
    font-weight: 600;
    display: flex;
    align-items: center;
}

.success-label i {
    margin-left: 6px;
    font-size: 14px;
    color: #28a745;
}



















import { Component } from '@angular/core';

@Component({
  selector: 'app-settings',
  templateUrl: './settings.component.html',
  styleUrls: ['./settings.component.scss']
})
export class SettingsComponent {
  options = [
    { label: 'Option A', value: 'A' },
    { label: 'Option B', value: 'B' },
    { label: 'Option C', value: 'C' }
  ];

  selectedValue: string | null = null;
  loading = false;
  success = false;
  activeOption: string | null = null;

  onOptionChange(value: string) {
    this.activeOption = value;
    this.loading = true;
    this.success = false;

    // Simulate API call
    setTimeout(() => {
      this.loading = false;
      this.success = true;

      setTimeout(() => this.success = false, 2000); // Reset success after 2s
    }, 2000);
  }
}


