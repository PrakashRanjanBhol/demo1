import React, { useEffect, useState } from 'react';
import axios from 'axios';
import styles from './ConfluenceExplorer.module.css';

const ConfluenceExplorer = () => {
    const [spaces, setSpaces] = useState([]);
    const [pageData, setPageData] = useState({});
    const [expandedSpace, setExpandedSpace] = useState(null);
    const [expandedPages, setExpandedPages] = useState({});
    const [selectedSpaces, setSelectedSpaces] = useState([]);
    const [selectedPageIds, setSelectedPageIds] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            try {
                const { data: spaceList } = await axios.get('/api/spaces');
                const pagesPromises = spaceList.map(space =>
                    axios.get(`/api/spaces/${space.key}/pages`)
                );
                const pageResponses = await Promise.all(pagesPromises);

                const pagesBySpace = {};
                spaceList.forEach((space, idx) => {
                    pagesBySpace[space.key] = pageResponses[idx].data;
                });

                setSpaces(spaceList);
                setPageData(pagesBySpace);
            } catch (error) {
                console.error('Failed to load:', error);
            } finally {
                setLoading(false);
            }
        };
        fetchData();
    }, []);

    const toggleSpaceSelection = (spaceKey) => {
        setSelectedPageIds([]);
        setSelectedSpaces(prev =>
            prev.includes(spaceKey) ? prev.filter(k => k !== spaceKey) : [...prev, spaceKey]
        );
    };

    const getAllNestedPageIds = (page) => {
        let ids = [page.page_id];
        if (page.children) {
            for (const child of page.children) {
                ids = [...ids, ...getAllNestedPageIds(child)];
            }
        }
        return ids;
    };

    const handleCheckboxClick = (e, page) => {
        e.stopPropagation();
        const nestedIds = getAllNestedPageIds(page);
        const alreadySelected = nestedIds.every(id => selectedPageIds.includes(id));
        if (alreadySelected) {
            setSelectedPageIds([]);
        } else {
            setSelectedSpaces([]);
            setSelectedPageIds(nestedIds);
        }
    };

    const handlePageClick = (page) => {
        setExpandedPages(prev => ({
            ...prev,
            [page.page_id]: !prev[page.page_id],
        }));
    };

    const isChecked = (page) => selectedPageIds.includes(page.page_id);

    const renderPages = (pages, level = 0) => (
        <ul className={styles.pageList}>
            {pages.map((page, idx) => {
                const hasChildren = page.children?.length > 0;
                const isExpanded = expandedPages[page.page_id] ?? false;
                const isLastChild = idx === pages.length - 1;

                return (
                    <li key={page.page_id}>
                        <div
                            className={`${styles.pageItem} ${!isLastChild ? styles.hasLine : ''}`}
                            style={{ paddingLeft: `${level * 20}px` }}
                            onClick={() => handlePageClick(page)}
                        >
                            <div className={styles.pageLabel}>
                                <input
                                    type="checkbox"
                                    checked={isChecked(page)}
                                    onChange={(e) => handleCheckboxClick(e, page)}
                                    onClick={(e) => e.stopPropagation()}
                                />
                                <span className={styles.pageTitle}>{page.title}</span>
                            </div>
                        </div>
                        <div
                            className={`${styles.nestedWrapper} ${
                                hasChildren ? (isExpanded ? styles.expanded : styles.collapsed) : ''
                            }`}
                        >
                            {hasChildren && renderPages(page.children, level + 1)}
                        </div>
                    </li>
                );
            })}
        </ul>
    );

    if (loading) {
        return (
            <div className={styles.loader}>
                <div className={styles.emoji}>ðŸ˜Š</div>
                <div className={styles.message}>Hang tight! Loading your Confluence data...</div>
            </div>
        );
    }

    return (
        <div className={styles.container}>
            <h3 className={styles.heading}>Confluence Explorer</h3>
            <div className={styles.spaceList}>
                {spaces.map(space => (
                    <div key={space.key} className={styles.spaceItem}>
                        <label className={styles.spaceLabel}>
                            <input
                                type="checkbox"
                                checked={selectedSpaces.includes(space.key)}
                                onChange={() => toggleSpaceSelection(space.key)}
                            />
                            {space.name}
                        </label>
                        <button
                            className={styles.expandButton}
                            onClick={() => setExpandedSpace(expandedSpace === space.key ? null : space.key)}
                        >
                            {expandedSpace === space.key ? 'âˆ’' : '+'}
                        </button>

                        {expandedSpace === space.key && (
                            <div className={styles.pageTree}>
                                {renderPages(pageData[space.key] || [])}
                            </div>
                        )}
                    </div>
                ))}
            </div>

            <div className={styles.result}>
                <h4>Selected:</h4>
                <pre>
                    {selectedSpaces.length > 0
                        ? JSON.stringify(selectedSpaces, null, 2)
                        : JSON.stringify(selectedPageIds, null, 2)}
                </pre>
            </div>
        </div>
    );
};

export default ConfluenceExplorer;
