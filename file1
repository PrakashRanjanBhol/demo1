<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Mermaid Diagrams</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mermaid/10.6.1/mermaid.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }

        .container {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .buttons {
            text-align: center;
            margin: 20px 0;
        }

        button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            margin: 5px;
            border-radius: 5px;
            cursor: pointer;
        }

        button:hover {
            background: #0056b3;
        }

        .download-btn {
            background: #28a745;
        }

        .download-btn:hover {
            background: #1e7e34;
        }

        .download-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }

        .zoom-btn {
            background: #6c757d;
            font-size: 18px;
            padding: 8px 15px;
        }

        .zoom-btn:hover {
            background: #5a6268;
        }

        .zoom-btn:disabled {
            background: #adb5bd;
            cursor: not-allowed;
        }

        /* üî• Updated container for drag-to-pan */
        #diagram-container {
            border: 2px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
            min-height: 200px;
            background: #fafafa;
            text-align: center;
            overflow: hidden;
            /* ‚ùå no scrollbars */
            position: relative;
            cursor: grab;
        }

        #diagram-container.dragging {
            cursor: grabbing;
        }

        #diagram-wrapper {
            display: inline-block;
            transform-origin: 0 0;
            transition: transform 0.1s linear;
        }

        .zoom-controls {
            text-align: center;
            margin: 10px 0;
            display: none;
        }

        .zoom-controls.show {
            display: block;
        }

        .zoom-level {
            display: inline-block;
            margin: 0 10px;
            padding: 5px 10px;
            background: #e9ecef;
            border-radius: 4px;
            font-weight: bold;
            min-width: 60px;
        }

        .status {
            background: #e9ecef;
            padding: 10px;
            border-radius: 5px;
            margin-top: 10px;
            text-align: center;
        }

        textarea {
            width: 100%;
            height: 100px;
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-family: monospace;
        }

        .download-options {
            text-align: center;
            margin: 10px 0;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 5px;
            display: none;
        }

        .download-options.show {
            display: block;
        }

        .format-group {
            margin: 5px 0;
        }

        select {
            padding: 5px 10px;
            margin: 0 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .reset-btn {
            background: #17a2b8;
        }

        .reset-btn:hover {
            background: #138496;
        }
    </style>
</head>

<body>
    <div class="container">
        <h1>Mermaid Diagrams with JavaScript</h1>

        <div class="buttons">
            <button onclick="showFlowchart()">Flowchart</button>
            <button onclick="showSequence()">Sequence Diagram</button>
            <button onclick="showPieChart()">Pie Chart</button>
            <button onclick="showGantt()">Gantt Chart</button>
            <button onclick="clearDiagram()">Clear</button>
        </div>

        <div>
            <h3>Custom Diagram:</h3>
            <textarea id="custom-input" placeholder="Enter Mermaid code here...">graph TD
A[Start] --> B[Process]
B --> C[End]</textarea>
            <button onclick="renderCustom()">Render Custom</button>
        </div>

        <div class="zoom-controls" id="zoom-controls">
            <button class="zoom-btn" id="zoom-out-btn" onclick="zoomOut()">‚àí</button>
            <span class="zoom-level" id="zoom-level">100%</span>
            <button class="zoom-btn" id="zoom-in-btn" onclick="zoomIn()">+</button>
            <button class="reset-btn" onclick="resetZoom()">Reset View</button>
        </div>

        <div id="diagram-container">
            <div id="diagram-wrapper">
                <p>Click a button above to display a diagram</p>
            </div>
        </div>

        <div class="download-options" id="download-options">
            <div class="format-group">
                <label>Download Format:</label>
                <select id="download-format">
                    <option value="svg">SVG</option>
                    <option value="png">PNG</option>
                </select>
                <button class="download-btn" onclick="downloadDiagram()">Download Diagram</button>
            </div>
        </div>

        <div class="status">
            <span>Status: </span><span id="status-text">Ready</span> |
            <span>Diagrams rendered: </span><span id="counter">0</span>
        </div>
    </div>

    <script>
        // Initialize Mermaid
        mermaid.initialize({ startOnLoad: false });

        let diagramCount = 0;
        let currentSvg = null;
        let currentDiagramName = '';
        let currentZoom = 1.0;
        const minZoom = 0.1;
        const maxZoom = 5.0;
        const zoomStep = 0.2;

        // üî• Pan state
        let isDragging = false;
        let startX, startY;
        let translateX = 0;
        let translateY = 0;

        const container = document.getElementById("diagram-container");
        const wrapper = document.getElementById("diagram-wrapper");

        function applyTransform() {
            wrapper.style.transform = `translate(${translateX}px, ${translateY}px) scale(${currentZoom})`;
        }

        // Drag-to-pan
        container.addEventListener("mousedown", (e) => {
            isDragging = true;
            startX = e.clientX - translateX;
            startY = e.clientY - translateY;
            container.classList.add("dragging");
        });

        container.addEventListener("mousemove", (e) => {
            if (!isDragging) return;
            translateX = e.clientX - startX;
            translateY = e.clientY - startY;
            applyTransform();
        });

        container.addEventListener("mouseup", () => {
            isDragging = false;
            container.classList.remove("dragging");
        });

        container.addEventListener("mouseleave", () => {
            isDragging = false;
            container.classList.remove("dragging");
        });

        function sanitizeMermaidCode(code) {
            code = code.replace(/\[(.*?)\]/g, (match, p1) => `[${p1.replace(/[()]/g, '')}]`);
            code = code.replace(/\((.*?)\)/g, (match, p1) => `(${p1.replace(/[()]/g, '')})`);
            code = code.replace(/subgraph\s+([^\n]*)/g, (match, p1) => `subgraph ${p1.replace(/[()]/g, '').trim()}`);
            code = code.replace(/%%\{.*?\}%%/gs, '');
            code = code.replace(/^\s*style .*$/gmi, '');
            code = code.replace(/^\s*classDef .*$/gmi, '');
            return code.replace(/\t+/g, ' ').replace(/ {2,}/g, ' ').trim();
        }

        function updateZoomDisplay() {
            const zoomLevel = document.getElementById('zoom-level');
            const zoomInBtn = document.getElementById('zoom-in-btn');
            const zoomOutBtn = document.getElementById('zoom-out-btn');

            zoomLevel.textContent = Math.round(currentZoom * 100) + '%';
            applyTransform();

            zoomInBtn.disabled = currentZoom >= maxZoom;
            zoomOutBtn.disabled = currentZoom <= minZoom;
        }

        function zoomIn() {
            if (currentZoom < maxZoom) {
                currentZoom = Math.min(currentZoom + zoomStep, maxZoom);
                updateZoomDisplay();
            }
        }

        function zoomOut() {
            if (currentZoom > minZoom) {
                currentZoom = Math.max(currentZoom - zoomStep, minZoom);
                updateZoomDisplay();
            }
        }

        function resetZoom() {
            currentZoom = 1.0;
            translateX = 0;
            translateY = 0;
            updateZoomDisplay();
        }

        function renderDiagram(code, name) {
            const statusText = document.getElementById('status-text');
            const counter = document.getElementById('counter');
            const downloadOptions = document.getElementById('download-options');
            const zoomControls = document.getElementById('zoom-controls');

            code = sanitizeMermaidCode(code);

            wrapper.innerHTML = '<p>Rendering diagram...</p>';
            statusText.innerHTML = 'Rendering ' + name;
            downloadOptions.classList.remove('show');
            zoomControls.classList.remove('show');

            const diagramId = 'diagram-' + Date.now();

            mermaid.render(diagramId, code)
                .then(function (result) {
                    wrapper.innerHTML = result.svg;
                    currentSvg = result.svg;
                    currentDiagramName = name.replace(/\s+/g, '_').toLowerCase();

                    currentZoom = 1.0;
                    translateX = 0;
                    translateY = 0;
                    updateZoomDisplay();

                    diagramCount++;
                    statusText.innerHTML = name + ' rendered successfully';
                    counter.innerHTML = diagramCount;

                    downloadOptions.classList.add('show');
                    zoomControls.classList.add('show');
                })
                .catch(function (error) {
                    console.error("Mermaid render error:", error);
                    wrapper.innerHTML = `<p style="color: red;">Oops! Could not render your diagram.<br><strong>Reason:</strong> ${error.message}</p>`;
                    statusText.innerHTML = 'Error rendering ' + name;
                    downloadOptions.classList.remove('show');
                    zoomControls.classList.remove('show');
                });
        }

        function downloadDiagram() {
            if (!currentSvg) {
                alert('No diagram to download. Please render a diagram first.');
                return;
            }

            const format = document.getElementById('download-format').value;
            const fileName = currentDiagramName + '_' + new Date().toISOString().slice(0, 10);

            if (format === 'svg') downloadSVG(currentSvg, fileName + '.svg');
            else if (format === 'png') downloadPNG(currentSvg, fileName + '.png');
        }

        function downloadSVG(svgContent, fileName) {
            // Create DOM from the SVG string
            const parser = new DOMParser();
            const doc = parser.parseFromString(svgContent, "image/svg+xml");
            const svg = doc.querySelector("svg");

            // Inline computed styles for each element
            const allElements = svg.querySelectorAll("*");
            allElements.forEach(el => {
                const computedStyle = window.getComputedStyle(el);
                const style = [];
                // Copy fill/stroke/colors
                if (computedStyle.fill && computedStyle.fill !== "none") {
                    style.push(`fill:${computedStyle.fill}`);
                }
                if (computedStyle.stroke && computedStyle.stroke !== "none") {
                    style.push(`stroke:${computedStyle.stroke}`);
                }
                if (computedStyle.color && computedStyle.color !== "rgb(0, 0, 0)") {
                    style.push(`color:${computedStyle.color}`);
                }
                if (style.length > 0) {
                    el.setAttribute("style", style.join(";"));
                }
            });

            // Serialize back to string
            const serializer = new XMLSerializer();
            const svgString = serializer.serializeToString(svg);

            // Save as file
            const blob = new Blob([svgString], { type: "image/svg+xml" });
            const url = URL.createObjectURL(blob);
            const link = document.createElement("a");
            link.href = url;
            link.download = fileName;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            URL.revokeObjectURL(url);
        }


        function downloadPNG(svgContent, fileName) {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();
            const svgBlob = new Blob([svgContent], { type: 'image/svg+xml' });
            const url = URL.createObjectURL(svgBlob);

            img.onload = function () {
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.fillStyle = 'white';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.drawImage(img, 0, 0);
                canvas.toBlob(function (blob) {
                    const pngUrl = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = pngUrl;
                    link.download = fileName;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(pngUrl);
                });
                URL.revokeObjectURL(url);
            };

            img.onerror = function () {
                alert('Error converting to PNG.');
                URL.revokeObjectURL(url);
            };

            img.src = url;
        }

        function showFlowchart() {
            renderDiagram(`
        graph TD
          A[Start] --> B{Decision?}
          B -->|Yes| C[Do Something]
          B -->|No| D[Do Something Else]
          C --> E[End]
          D --> E
      `, 'Flowchart');
        }

        function showSequence() {
            renderDiagram(`
        sequenceDiagram
          participant A as Alice
          participant B as Bob
          A->>B: Hello Bob, how are you?
          B-->>A: Great!
          A->>B: See you later!
      `, 'Sequence Diagram');
        }

        function showPieChart() {
            renderDiagram(`
        pie title My Pie Chart
          "Apples" : 42.96
          "Oranges" : 50.05
          "Bananas" : 10.01
      `, 'Pie Chart');
        }

        function showGantt() {
            renderDiagram(`
        gantt
          title A Simple Gantt
          dateFormat YYYY-MM-DD
          section Section
          Task 1 :a1, 2024-01-01, 30d
          Task 2 :after a1, 20d
          Task 3 :2024-01-12, 12d
      `, 'Gantt Chart');
        }

        function renderCustom() {
            const customInput = document.getElementById('custom-input');
            const code = customInput.value;
            if (code.trim() === '') {
                alert('Please enter some Mermaid code');
                return;
            }
            renderDiagram(code, 'Custom Diagram');
        }

        function clearDiagram() {
            wrapper.innerHTML = '<p>Click a button above to display a diagram</p>';
            document.getElementById('status-text').innerHTML = 'Ready';
            document.getElementById('download-options').classList.remove('show');
            document.getElementById('zoom-controls').classList.remove('show');
            currentSvg = null;
            currentDiagramName = '';
            currentZoom = 1.0;
            translateX = 0;
            translateY = 0;
            updateZoomDisplay();
        }

        // Keyboard shortcuts for zoom
        document.addEventListener('keydown', function (e) {
            if (!currentSvg) return;
            if (e.ctrlKey || e.metaKey) {
                if (e.key === '+' || e.key === '=') {
                    e.preventDefault();
                    zoomIn();
                } else if (e.key === '-') {
                    e.preventDefault();
                    zoomOut();
                } else if (e.key === '0') {
                    e.preventDefault();
                    resetZoom();
                }
            }
        });
    </script>
</body>

</html>
