interface Template {
  id: number;
  title: string;
  description: string;
  badge?: string;
  detailDescription?: string;
  formFields?: FormField[];
  category?: string;  // Change this from union type to string
  outputFormat?: string;
}


// Add these properties
customCategories: string[] = [];
selectedCustomCategory: string = 'ALL';

// Update the categories array to be computed dynamically
get allCategories(): string[] {
  const baseCategories = ['ALL', 'Code Generation', 'Documentation', 'Analysis', 'Testing', 'API'];
  // Combine base categories with custom categories, remove duplicates
  return [...new Set([...baseCategories, ...this.customCategories])];
}

// Update filtered templates for custom tab
get filteredCustomTemplates(): Template[] {
  if (this.selectedCustomCategory === 'ALL') {
    return this.customTemplates;
  }
  return this.customTemplates.filter(t => t.category === this.selectedCustomCategory);
}



newTemplate = {
  title: '',
  description: '',
  detailDescription: '',
  formFields: [] as FormField[],
  outputFormat: '',
  category: 'Base'  // Add this line
};

newCategoryInput: string = '';  // Add this property for adding new categories
showCategoryInput: boolean = false;  // Add this property



addNewCategory(): void {
  if (this.newCategoryInput.trim() && !this.customCategories.includes(this.newCategoryInput.trim())) {
    this.customCategories.push(this.newCategoryInput.trim());
    this.newTemplate.category = this.newCategoryInput.trim();
    this.newCategoryInput = '';
    this.showCategoryInput = false;
  }
}

toggleCategoryInput(): void {
  this.showCategoryInput = !this.showCategoryInput;
  if (!this.showCategoryInput) {
    this.newCategoryInput = '';
  }
}

selectCustomCategory(category: string): void {
  this.selectedCustomCategory = category;
}




resetTemplateBuilder(): void {
  this.newTemplate = {
    title: '',
    description: '',
    detailDescription: '',
    formFields: [],
    outputFormat: '',
    category: 'Base'  // Add this line
  };
  this.currentField = {
    id: '',
    label: '',
    type: 'text',
    placeholder: '',
    required: false
  };
  this.selectOptions = '';
  this.newCategoryInput = '';  // Add this line
  this.showCategoryInput = false;  // Add this line
}






saveTemplate(): void {
  if (!this.newTemplate.title.trim()) {
    alert('Please enter a template title');
    return;
  }
  
  if (!this.newTemplate.description.trim()) {
    alert('Please enter a template description');
    return;
  }
  
  if (this.newTemplate.formFields.length === 0) {
    alert('Please add at least one field to the template');
    return;
  }
  
  if (!this.newTemplate.outputFormat.trim()) {
    alert('Please enter an output format');
    return;
  }
  
  const outputFormatField: FormField = {
    id: 'outputFormat',
    label: 'Output Format',
    type: 'text',
    placeholder: '',
    required: true,
    disabled: true,
    value: this.newTemplate.outputFormat
  };
  
  const template: Template = {
    id: this.customTemplates.length + 1,
    title: this.newTemplate.title,
    description: this.newTemplate.description,
    detailDescription: this.newTemplate.detailDescription || this.newTemplate.description,
    formFields: [...this.newTemplate.formFields, outputFormatField],
    outputFormat: this.newTemplate.outputFormat,
    category: this.newTemplate.category  // Add this line
  };
  
  // Add custom category to the list if not already present
  if (this.newTemplate.category && 
      this.newTemplate.category !== 'Base' && 
      !this.customCategories.includes(this.newTemplate.category)) {
    this.customCategories.push(this.newTemplate.category);
  }
  
  this.customTemplates.push(template);
  this.hasCustomTemplates = true;
  
  console.log('Template created:', template);
  alert('Template created successfully!');
  
  this.showCreateTemplateModal = false;
  this.resetTemplateBuilder();
}





switchTab(tab: 'predefined' | 'custom'): void {
  this.activeTab = tab;
  this.showDetailView = false;
  this.selectedTemplate = null;
  this.formData = {};
  this.selectedCategory = 'ALL';
  this.selectedCustomCategory = 'ALL';  // Add this line
}






<div class="form-group">
  <label for="outputFormat">Output Format <span class="required">*</span></label>
  <input 
    type="text" 
    id="outputFormat" 
    [(ngModel)]="newTemplate.outputFormat"
    placeholder="e.g., comma-separated, JSON, bullet points, numbered list, etc."
    class="form-input">
  <small class="field-hint">Specify how you want the output to be formatted</small>
</div>

<!-- Add this new category section -->
<div class="form-group">
  <label for="templateCategory">Category <span class="required">*</span></label>
  <div class="category-selection-wrapper">
    <select 
      id="templateCategory" 
      [(ngModel)]="newTemplate.category"
      class="form-input"
      style="flex: 1;">
      <option value="Base">Base</option>
      <option *ngFor="let cat of customCategories" [value]="cat">{{ cat }}</option>
    </select>
    <button 
      type="button" 
      class="add-category-btn" 
      (click)="toggleCategoryInput()"
      [title]="showCategoryInput ? 'Cancel' : 'Add new category'">
      <svg *ngIf="!showCategoryInput" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="12" y1="5" x2="12" y2="19"></line>
        <line x1="5" y1="12" x2="19" y2="12"></line>
      </svg>
      <svg *ngIf="showCategoryInput" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
  </div>
  
  <div *ngIf="showCategoryInput" class="new-category-input" style="margin-top: 0.5rem;">
    <input 
      type="text" 
      [(ngModel)]="newCategoryInput"
      placeholder="Enter new category name"
      class="form-input"
      style="margin-bottom: 0.5rem;">
    <button 
      type="button" 
      class="add-field-btn" 
      (click)="addNewCategory()"
      style="margin-top: 0;">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <polyline points="20 6 9 17 4 12"></polyline>
      </svg>
      Add Category
    </button>
  </div>
</div>





<!-- Custom Templates (With Templates) -->
<div *ngIf="activeTab === 'custom' && hasCustomTemplates" class="tab-content">
  <div style="margin-bottom: 1rem;">
    <button class="create-btn" style="width: 100%;" (click)="createNewTemplate()">+ Create New Template</button>
  </div>
  
  <!-- Add Category Filter for Custom Templates -->
  <div class="category-filter-wrapper">
    <button class="carousel-btn carousel-btn-left" (click)="scrollCategories('left')">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <polyline points="15 18 9 12 15 6"></polyline>
      </svg>
    </button>
    
    <div class="category-filter" #categoryScroll>
      <button 
        *ngFor="let category of allCategories"
        class="category-btn"
        [class.active]="selectedCustomCategory === category"
        (click)="selectCustomCategory(category)">
        {{ category }}
      </button>
    </div>
    
    <button class="carousel-btn carousel-btn-right" (click)="scrollCategories('right')">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <polyline points="9 18 15 12 9 6"></polyline>
      </svg>
    </button>
  </div>
  
  <div 
    class="template-card" 
    *ngFor="let template of filteredCustomTemplates; let i = index"
    [style.animation-delay]="(i * 0.05) + 's'"
    (click)="selectTemplate(template)">
    <div class="card-header">
      <h3>{{ template.title }}</h3>
      <span class="category-badge" *ngIf="template.category">{{ template.category }}</span>
    </div>
    <p>{{ template.description }}</p>
  </div>
  
  <!-- No Results Message -->
  <div *ngIf="filteredCustomTemplates.length === 0" class="no-results">
    <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="11" cy="11" r="8"></circle>
      <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
    </svg>
    <p>No templates found in this category</p>
  </div>
</div>







.category-selection-wrapper {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

.add-category-btn {
  background: var(--prompt-template-bg-tertiary);
  color: var(--prompt-template-text-primary);
  border: 1px solid var(--prompt-template-border-primary);
  width: 2.5rem;
  height: 2.5rem;
  border-radius: 0.375rem;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
  padding: 0;
  flex-shrink: 0;
}

.add-category-btn:hover {
  background: var(--prompt-template-bg-hover);
  border-color: var(--prompt-template-border-accent);
  color: var(--prompt-template-accent-purple);
}

.new-category-input {
  animation: fadeInUp 0.3s ease-out;
}



