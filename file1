// sdlc-management.component.ts
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

interface Task {
  id: number;
  title: string;
  description: string;
  createdDate: string;
  active: boolean;
  project?: string;
}

interface Project {
  id: number;
  name: string;
}

@Component({
  selector: 'app-sdlc-management',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './sdlc-management.component.html',
  styleUrls: ['./sdlc-management.component.css']
})
export class SdlcManagementComponent {
  currentView: 'list' | 'create' = 'list';
  taskTitle: string = '';
  taskDescription: string = '';
  selectedProject: string = '';
  projectSearchTerm: string = '';
  isProjectDropdownOpen: boolean = false;
  
  projects: Project[] = [
    { id: 1, name: 'E-Commerce Platform' },
    { id: 2, name: 'Mobile Banking App' },
    { id: 3, name: 'CRM System' },
    { id: 4, name: 'Analytics Dashboard' },
    { id: 5, name: 'HR Management Portal' },
    { id: 6, name: 'Inventory Tracking' },
    { id: 7, name: 'Customer Support Platform' }
  ];
  
  tasks: Task[] = [
    {
      id: 1,
      title: 'Design Database Schema',
      description: 'Create ERD for the new feature',
      createdDate: 'Oct 19, 2025',
      active: true,
      project: 'E-Commerce Platform'
    },
    {
      id: 2,
      title: 'API Development',
      description: 'Build REST endpoints for user management',
      createdDate: 'Oct 18, 2025',
      active: false,
      project: 'Mobile Banking App'
    },
    {
      id: 3,
      title: 'Code Review',
      description: 'Review pull request #234',
      createdDate: 'Oct 17, 2025',
      active: false,
      project: 'CRM System'
    }
  ];

  get filteredProjects(): Project[] {
    if (!this.projectSearchTerm.trim()) {
      return this.projects;
    }
    const searchLower = this.projectSearchTerm.toLowerCase();
    return this.projects.filter(project => 
      project.name.toLowerCase().includes(searchLower)
    );
  }

  showCreateView(): void {
    this.currentView = 'create';
  }

  showListView(): void {
    this.currentView = 'list';
    this.taskTitle = '';
    this.taskDescription = '';
    this.selectedProject = '';
    this.projectSearchTerm = '';
    this.isProjectDropdownOpen = false;
  }

  toggleProjectDropdown(): void {
    this.isProjectDropdownOpen = !this.isProjectDropdownOpen;
  }

  selectProject(project: Project): void {
    this.selectedProject = project.name;
    this.projectSearchTerm = '';
    this.isProjectDropdownOpen = false;
  }

  onProjectSearchFocus(): void {
    this.isProjectDropdownOpen = true;
  }

  createTask(): void {
    if (this.taskTitle.trim() && this.taskDescription.trim() && this.selectedProject) {
      const now = new Date();
      const dateStr = now.toLocaleDateString('en-US', { 
        month: 'short', 
        day: 'numeric', 
        year: 'numeric' 
      });

      const newTask: Task = {
        id: Date.now(),
        title: this.taskTitle,
        description: this.taskDescription,
        createdDate: dateStr,
        active: false,
        project: this.selectedProject
      };

      this.tasks.push(newTask);
      this.showListView();
    }
  }

  setActiveCard(task: Task): void {
    this.tasks.forEach(t => t.active = false);
    task.active = true;
  }

  get hasNoTasks(): boolean {
    return this.tasks.length === 0;
  }

  get isFormValid(): boolean {
    return this.taskTitle.trim().length > 0 && 
           this.taskDescription.trim().length > 0 &&
           this.selectedProject.length > 0;
  }
}


// sdlc-management.component.html
<div class="sidebar">
  <!-- Header -->
  <div class="header">
    <div class="header-content">
      <div class="icon-box">
        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
            d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      </div>
      <div class="header-text">
        <h1>SDLC Manager</h1>
        <p>Manage your entire Software Development Lifecycle</p>
      </div>
    </div>
  </div>

  <!-- Content Area -->
  <div class="content-area">
    <!-- List View -->
    <div class="view list-view" [class.hidden]="currentView === 'create'">
      <div class="view-content">
        <button class="create-btn" (click)="showCreateView()">+ Create Task</button>
        
        <div class="task-list" *ngIf="!hasNoTasks">
          <div class="task-card" 
               *ngFor="let task of tasks" 
               [class.active]="task.active"
               (click)="setActiveCard(task)">
            <h3>{{ task.title }}</h3>
            <p>{{ task.description }}</p>
            <div class="task-footer">
              <span class="task-project" *ngIf="task.project">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                        d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
                </svg>
                {{ task.project }}
              </span>
              <div class="task-date">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                    d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                {{ task.createdDate }}
              </div>
            </div>
          </div>
        </div>

        <div class="empty-state" *ngIf="hasNoTasks">
          <div class="empty-state-icon">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
            </svg>
          </div>
          <h3>No tasks yet</h3>
          <p>Get started by creating your first task to manage your SDLC workflow</p>
        </div>
      </div>
    </div>

    <!-- Create View -->
    <div class="view create-view" [class.active]="currentView === 'create'">
      <div class="view-content">
        <div class="back-header">
          <button class="back-btn" (click)="showListView()">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
              <path stroke-linecap="round" stroke-linejoin="round" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
          </button>
          <h2>Create New Task</h2>
        </div>

        <div class="form-group">
          <label>Task Title <span class="required">*</span></label>
          <input type="text" 
                 [(ngModel)]="taskTitle" 
                 placeholder="Enter task title"
                 required>
        </div>

        <div class="form-group">
          <label>Project <span class="required">*</span></label>
          <div class="project-dropdown">
            <div class="dropdown-trigger" (click)="toggleProjectDropdown()">
              <span [class.placeholder]="!selectedProject">
                {{ selectedProject || 'Select a project' }}
              </span>
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" 
                   [class.rotated]="isProjectDropdownOpen">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                      d="M19 9l-7 7-7-7" />
              </svg>
            </div>
            <div class="dropdown-menu" *ngIf="isProjectDropdownOpen">
              <div class="dropdown-search">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
                <input type="text" 
                       [(ngModel)]="projectSearchTerm" 
                       (focus)="onProjectSearchFocus()"
                       placeholder="Search projects..."
                       (click)="$event.stopPropagation()">
              </div>
              <div class="dropdown-list">
                <div class="dropdown-item" 
                     *ngFor="let project of filteredProjects"
                     (click)="selectProject(project)"
                     [class.selected]="selectedProject === project.name">
                  <span>{{ project.name }}</span>
                  <svg *ngIf="selectedProject === project.name" 
                       fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M5 13l4 4L19 7" />
                  </svg>
                </div>
                <div class="dropdown-empty" *ngIf="filteredProjects.length === 0">
                  No projects found
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="form-group">
          <label>Description <span class="required">*</span></label>
          <textarea [(ngModel)]="taskDescription" 
                    placeholder="Enter task description" 
                    rows="6"
                    required></textarea>
        </div>

        <button class="submit-btn" 
                (click)="createTask()" 
                [disabled]="!isFormValid"
                [class.disabled]="!isFormValid">Create Task</button>
      </div>
    </div>
  </div>
</div>


// sdlc-management.component.css
:host {
  /* Dark Theme Variables */
  --sdlc-management-bg-primary: #111113;
  --sdlc-management-bg-secondary: #1a1a1c;
  --sdlc-management-bg-tertiary: #2a2a2c;
  --sdlc-management-text-primary: #ffffff;
  --sdlc-management-text-secondary: #9ca3af;
  --sdlc-management-text-tertiary: #6b7280;
  --sdlc-management-text-light: #d1d5db;
  --sdlc-management-border-primary: #2a2a2c;
  --sdlc-management-border-secondary: #4a4a4c;
  --sdlc-management-gradient-start: #6366f1;
  --sdlc-management-gradient-end: #8b5cf6;
  --sdlc-management-accent-glow: rgba(99, 102, 241, 0.3);
  --sdlc-management-accent-bg: rgba(99, 102, 241, 0.1);
  --sdlc-management-accent-bg-end: rgba(139, 92, 246, 0.1);
  --sdlc-management-error-color: #ef4444;
  --sdlc-management-success-color: #10b981;
  --sdlc-management-disabled-bg: #4a4a4c;
}

:host(.light-theme) {
  /* Light Theme Variables */
  --sdlc-management-bg-primary: #ffffff;
  --sdlc-management-bg-secondary: #f9fafb;
  --sdlc-management-bg-tertiary: #f3f4f6;
  --sdlc-management-text-primary: #111827;
  --sdlc-management-text-secondary: #6b7280;
  --sdlc-management-text-tertiary: #9ca3af;
  --sdlc-management-text-light: #374151;
  --sdlc-management-border-primary: #e5e7eb;
  --sdlc-management-border-secondary: #d1d5db;
  --sdlc-management-gradient-start: #6366f1;
  --sdlc-management-gradient-end: #8b5cf6;
  --sdlc-management-accent-glow: rgba(99, 102, 241, 0.2);
  --sdlc-management-accent-bg: rgba(99, 102, 241, 0.05);
  --sdlc-management-accent-bg-end: rgba(139, 92, 246, 0.05);
  --sdlc-management-error-color: #ef4444;
  --sdlc-management-success-color: #10b981;
  --sdlc-management-disabled-bg: #d1d5db;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.sidebar {
  width: 20rem;
  height: 100vh;
  background: var(--sdlc-management-bg-primary);
  color: var(--sdlc-management-text-primary);
  display: flex;
  flex-direction: column;
}

.header {
  padding: 1.5rem;
  border-bottom: 1px solid var(--sdlc-management-bg-tertiary);
}

.header-content {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.icon-box {
  width: 2.5rem;
  height: 2.5rem;
  border-radius: 0.5rem;
  background: linear-gradient(135deg, var(--sdlc-management-gradient-start), var(--sdlc-management-gradient-end));
  display: flex;
  align-items: center;
  justify-content: center;
}

.icon-box svg {
  width: 1.5rem;
  height: 1.5rem;
}

.header-text h1 {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 0.125rem;
}

.header-text p {
  font-size: 0.75rem;
  color: var(--sdlc-management-text-secondary);
}

.content-area {
  flex: 1;
  position: relative;
  overflow: hidden;
}

.view {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  transition: transform 0.3s ease-in-out;
}

.list-view {
  transform: translateX(0);
}

.list-view.hidden {
  transform: translateX(-100%);
}

.create-view {
  transform: translateX(100%);
}

.create-view.active {
  transform: translateX(0);
}

.view-content {
  padding: 1.5rem;
}

.create-btn {
  width: 100%;
  padding: 0.75rem;
  border: none;
  border-radius: 0.5rem;
  background: linear-gradient(135deg, var(--sdlc-management-gradient-start), var(--sdlc-management-gradient-end));
  color: var(--sdlc-management-text-primary);
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  margin-bottom: 1rem;
  transition: transform 0.2s;
}

.create-btn:hover {
  transform: scale(1.02);
}

.task-list {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.task-card {
  background: var(--sdlc-management-bg-secondary);
  border: 1.5px solid var(--sdlc-management-border-primary);
  border-radius: 0.75rem;
  padding: 1.125rem;
  cursor: pointer;
  transition: all 0.3s ease;
  height: 6.25rem;
  display: flex;
  flex-direction: column;
  position: relative;
  overflow: hidden;
}

.task-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 3px;
  height: 100%;
  background: linear-gradient(135deg, var(--sdlc-management-gradient-start), var(--sdlc-management-gradient-end));
  opacity: 0;
  transition: opacity 0.3s ease;
}

.task-card:hover {
  border-color: var(--sdlc-management-gradient-start);
  transform: translateX(0.25rem);
}

.task-card:hover::before {
  opacity: 1;
}

.task-card.active {
  background: linear-gradient(135deg, var(--sdlc-management-accent-bg), var(--sdlc-management-accent-bg-end));
  border-color: var(--sdlc-management-gradient-start);
  box-shadow: 0 0 1.25rem var(--sdlc-management-accent-glow);
}

.task-card.active::before {
  opacity: 1;
}

.task-card h3 {
  font-size: 0.875rem;
  font-weight: 500;
  margin-bottom: 0.375rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.task-card p {
  font-size: 0.8125rem;
  color: var(--sdlc-management-text-secondary);
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  line-height: 1.4;
  flex: 1;
  margin-bottom: 0.5rem;
}

.task-footer {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 0.5rem;
  margin-top: auto;
}

.task-project {
  font-size: 0.6875rem;
  color: var(--sdlc-management-gradient-start);
  display: flex;
  align-items: center;
  gap: 0.25rem;
  flex: 1;
  overflow: hidden;
}

.task-project span {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.task-project svg {
  width: 0.75rem;
  height: 0.75rem;
  flex-shrink: 0;
}

.task-date {
  font-size: 0.6875rem;
  color: var(--sdlc-management-text-tertiary);
  display: flex;
  align-items: center;
  gap: 0.25rem;
  flex-shrink: 0;
}

.task-date svg {
  width: 0.75rem;
  height: 0.75rem;
}

.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2.5rem 1.25rem;
  text-align: center;
}

.empty-state-icon {
  width: 5rem;
  height: 5rem;
  border-radius: 50%;
  background: linear-gradient(135deg, var(--sdlc-management-accent-bg), var(--sdlc-management-accent-bg-end));
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 1rem;
}

.empty-state-icon svg {
  width: 2.5rem;
  height: 2.5rem;
  color: var(--sdlc-management-gradient-start);
}

.empty-state h3 {
  font-size: 1rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: var(--sdlc-management-text-light);
}

.empty-state p {
  font-size: 0.8125rem;
  color: var(--sdlc-management-text-secondary);
  line-height: 1.5;
}

.back-header {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 1.5rem;
}

.back-btn {
  width: 2.25rem;
  height: 2.25rem;
  border: none;
  background: linear-gradient(135deg, var(--sdlc-management-gradient-start), var(--sdlc-management-gradient-end));
  color: var(--sdlc-management-text-primary);
  cursor: pointer;
  border-radius: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.2s;
}

.back-btn:hover {
  transform: scale(1.05);
}

.back-btn svg {
  width: 1.25rem;
  height: 1.25rem;
}

.back-header h2 {
  font-size: 1.125rem;
  font-weight: 600;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  font-size: 0.8125rem;
  font-weight: 500;
  color: var(--sdlc-management-text-light);
  margin-bottom: 0.5rem;
}

.form-group label .required {
  color: var(--sdlc-management-error-color);
  margin-left: 0.125rem;
}

.form-group input,
.form-group textarea {
  width: 100%;
  background: var(--sdlc-management-bg-secondary);
  border: 1px solid var(--sdlc-management-border-primary);
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  color: var(--sdlc-management-text-primary);
  font-size: 0.875rem;
  font-family: inherit;
  transition: border-color 0.2s;
}

.form-group input:focus,
.form-group textarea:focus {
  outline: none;
  border-color: var(--sdlc-management-gradient-start);
}

.form-group textarea {
  resize: none;
  min-height: 7.5rem;
}

.form-group input::placeholder,
.form-group textarea::placeholder {
  color: var(--sdlc-management-text-tertiary);
}

.submit-btn {
  width: 100%;
  padding: 0.75rem;
  border: none;
  border-radius: 0.5rem;
  background: linear-gradient(135deg, var(--sdlc-management-gradient-start), var(--sdlc-management-gradient-end));
  color: var(--sdlc-management-text-primary);
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  margin-top: 0.5rem;
  transition: transform 0.2s;
}

.submit-btn:hover:not(:disabled) {
  transform: scale(1.02);
}

.submit-btn:disabled,
.submit-btn.disabled {
  opacity: 0.5;
  cursor: not-allowed;
  background: var(--sdlc-management-disabled-bg);
}

/* Project Dropdown Styles */
.project-dropdown {
  position: relative;
}

.dropdown-trigger {
  width: 100%;
  background: var(--sdlc-management-bg-secondary);
  border: 1px solid var(--sdlc-management-border-primary);
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  cursor: pointer;
  transition: border-color 0.2s;
}

.dropdown-trigger:hover {
  border-color: var(--sdlc-management-gradient-start);
}

.dropdown-trigger span {
  font-size: 0.875rem;
  color: var(--sdlc-management-text-primary);
}

.dropdown-trigger span.placeholder {
  color: var(--sdlc-management-text-tertiary);
}

.dropdown-trigger svg {
  width: 1.25rem;
  height: 1.25rem;
  color: var(--sdlc-management-text-secondary);
  transition: transform 0.2s;
}

.dropdown-trigger svg.rotated {
  transform: rotate(180deg);
}

.dropdown-menu {
  position: absolute;
  top: calc(100% + 0.5rem);
  left: 0;
  right: 0;
  background: var(--sdlc-management-bg-secondary);
  border: 1px solid var(--sdlc-management-border-primary);
  border-radius: 0.5rem;
  z-index: 1000;
  max-height: 15rem;
  display: flex;
  flex-direction: column;
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.3);
}

.dropdown-search {
  padding: 0.75rem;
  border-bottom: 1px solid var(--sdlc-management-border-primary);
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.dropdown-search svg {
  width: 1rem;
  height: 1rem;
  color: var(--sdlc-management-text-tertiary);
  flex-shrink: 0;
}

.dropdown-search input {
  flex: 1;
  background: transparent;
  border: none;
  color: var(--sdlc-management-text-primary);
  font-size: 0.875rem;
  outline: none;
}

.dropdown-search input::placeholder {
  color: var(--sdlc-management-text-tertiary);
}

.dropdown-list {
  overflow-y: auto;
  max-height: 12rem;
}

.dropdown-item {
  padding: 0.75rem 1rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: space-between;
  transition: background 0.2s;
}

.dropdown-item:hover {
  background: var(--sdlc-management-bg-tertiary);
}

.dropdown-item.selected {
  background: linear-gradient(135deg, var(--sdlc-management-accent-bg), var(--sdlc-management-accent-bg-end));
  color: var(--sdlc-management-gradient-start);
}

.dropdown-item span {
  font-size: 0.875rem;
  color: var(--sdlc-management-text-primary);
}

.dropdown-item.selected span {
  color: var(--sdlc-management-gradient-start);
  font-weight: 500;
}

.dropdown-item svg {
  width: 1rem;
  height: 1rem;
  color: var(--sdlc-management-gradient-start);
}

.dropdown-empty {
  padding: 1.5rem 1rem;
  text-align: center;
  font-size: 0.875rem;
  color: var(--sdlc-management-text-tertiary);
}
