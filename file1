import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';

@Component({
  selector: 'app-chat',
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.css']
})
export class ChatComponent implements OnChanges {
  @Input() chunk: string = '';   // streamed chunk from parent

  htmlCode: string = '';
  cssCode: string = '';
  jsCode: string = '';

  private currentLang: string | null = null;
  private isInsideBlock = false;
  private waitingForLang = false;  // when ``` comes without a language

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['chunk'] && this.chunk) {
      this.processChunk(this.chunk);
    }
  }

  private processChunk(chunk: string): void {
    const lines = chunk.split(/\r?\n/);

    for (let line of lines) {
      // Case: Fence detected
      if (line.trim().startsWith('```')) {
        if (!this.isInsideBlock) {
          // Opening block
          this.isInsideBlock = true;
          const lang = line.replace(/```/, '').trim().toLowerCase();

          if (lang) {
            this.currentLang = lang;
          } else {
            // Language comes in next line
            this.waitingForLang = true;
          }
        } else {
          // Closing block
          this.isInsideBlock = false;
          this.currentLang = null;
          this.waitingForLang = false;
        }
        continue;
      }

      // If we are waiting for language declaration
      if (this.waitingForLang) {
        const lang = line.trim().toLowerCase();
        if (lang) {
          this.currentLang = lang;
          this.waitingForLang = false;
          continue; // donâ€™t treat this as code
        }
      }

      // Append code into correct bucket
      if (this.isInsideBlock && this.currentLang) {
        switch (this.currentLang) {
          case 'html':
            this.htmlCode += line + '\n';
            break;
          case 'css':
            this.cssCode += line + '\n';
            break;
          case 'js':
          case 'javascript':
            this.jsCode += line + '\n';
            break;
        }
      }
    }
  }
}
