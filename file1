import { Component } from '@angular/core';

@Component({
  selector: 'app-feedback-portal',
  templateUrl: './feedback-portal.component.html',
  styleUrls: ['./feedback-portal.component.scss']
})
export class FeedbackPortalComponent {
  feedbackItems = [
    {
      id: 123,
      category: 'Feature Request',
      labelClass: 'feature',
      title: 'Dark mode implementation',
      description: 'We should implement a dark mode option for the application to reduce eye strain during nighttime usage and to match system preferences.',
      comments: 14,
      votes: 42,
      created: '2 days ago',
      author: 'Sarah Johnson'
    },
    {
      id: 122,
      category: 'Bug Report',
      labelClass: 'bug',
      title: 'Dashboard data not loading on mobile',
      description: 'When accessing the dashboard from mobile devices (iOS and Android), the data fails to load approximately 50% of the time. Error message: "Network Error".',
      comments: 8,
      votes: 27,
      created: '5 days ago',
      author: 'Mike Chen'
    },
    {
      id: 121,
      category: 'Discussion',
      labelClass: 'discussion',
      title: 'Should we add a chat feature to the platform?',
      description: 'I\'ve noticed many users are requesting real-time communication features. Before we consider implementation, let\'s discuss the pros and cons, potential use cases, and whether this aligns with our product roadmap.',
      comments: 23,
      votes: 35,
      created: '1 week ago',
      author: 'Alex Rodriguez'
    }
  ];

  // Filters
  searchText: string = '';
  selectedCategory: string | null = null;
  selectedSort: string | null = 'newest';

  categoryOptions = [
    { label: 'All Categories', value: null },
    { label: 'Feature Request', value: 'Feature Request' },
    { label: 'Bug Report', value: 'Bug Report' },
    { label: 'Discussion', value: 'Discussion' }
  ];

  sortOptions = [
    { label: 'Newest First', value: 'newest' },
    { label: 'Oldest First', value: 'oldest' },
    { label: 'Most Comments', value: 'comments' },
    { label: 'Most Votes', value: 'votes' }
  ];

  // Pagination
  first = 0;
  rows = 3;

  get filteredItems() {
    let items = [...this.feedbackItems];

    if (this.searchText) {
      const text = this.searchText.toLowerCase();
      items = items.filter(item =>
        item.title.toLowerCase().includes(text) ||
        item.description.toLowerCase().includes(text)
      );
    }

    if (this.selectedCategory) {
      items = items.filter(item => item.category === this.selectedCategory);
    }

    switch (this.selectedSort) {
      case 'oldest':
        items.reverse();
        break;
      case 'comments':
        items.sort((a, b) => b.comments - a.comments);
        break;
      case 'votes':
        items.sort((a, b) => b.votes - a.votes);
        break;
      case 'newest':
      default:
        break; // default order
    }

    return items;
  }

  get paginatedItems() {
    return this.filteredItems.slice(this.first, this.first + this.rows);
  }

  onPageChange(event: any) {
    this.first = event.first;
    this.rows = event.rows;
  }
}

































<div class="container">
    <div class="header">
        <h2>Welcome to our Feedback Portal!</h2>
        <p>Share your ideas, report issues, or start discussions to help us improve.</p>
        <button class="create-btn"><i class="fa fa-plus"></i> Create New</button>
    </div>

    <!-- Filters -->
    <div class="filters">
        <div class="search-container">
            <i class="fa fa-search search-icon"></i>
            <input type="text" pInputText [(ngModel)]="searchText" placeholder="Search issues..."
                class="styled-search" />
        </div>

        <p-dropdown [options]="categoryOptions" [(ngModel)]="selectedCategory" placeholder="All Categories"
            class="dropdown" optionLabel="label" optionValue="value"></p-dropdown>

        <p-dropdown [options]="sortOptions" [(ngModel)]="selectedSort" placeholder="Sort by: Newest" class="dropdown"
            optionLabel="label" optionValue="value"></p-dropdown>
    </div>

    <!-- Feedback Items -->
    <div *ngFor="let item of paginatedItems" class="card">
        <div class="card-top">
            <div class="left">
                <span class="label" [ngClass]="item.labelClass">
                    <i *ngIf="item.labelClass === 'feature'" class="fa fa-lightbulb"></i>
                    <i *ngIf="item.labelClass === 'bug'" class="fa fa-bug"></i>
                    <i *ngIf="item.labelClass === 'discussion'" class="fa fa-comments"></i>
                    {{ item.category }}
                </span>
                <span class="id">#{{ item.id }}</span>
            </div>
            <div class="right">
                <div>Created {{ item.created }} by <strong>{{ item.author }}</strong></div>
                <div class="stats">
                    <span><i class="fa fa-comment"></i> {{ item.comments }} comments</span>
                    <span><i class="fa fa-thumbs-up"></i> {{ item.votes }} votes</span>
                </div>
            </div>
        </div>

        <h3>{{ item.title }}</h3>
        <p>{{ item.description }}</p>

        <div class="footer">
            <span class="action"><i class="fa fa-comment"></i> Comment</span>
            <span class="action"><i class="fa fa-thumbs-up"></i> Vote</span>
        </div>
    </div>

    <!-- Pagination -->
    <p-paginator [rows]="rows" [totalRecords]="filteredItems.length" [first]="first" [rowsPerPageOptions]="[3, 5, 10]"
        (onPageChange)="onPageChange($event)"></p-paginator>
</div>
