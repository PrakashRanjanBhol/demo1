import { Component, ElementRef, OnInit, Renderer2, ViewChild, AfterViewInit } from '@angular/core';
import { marked } from 'marked';
import hljs from 'highlight.js';

interface TocItem {
  id: string;
  text: string;
  level: number;
}

@Component({
  selector: 'app-documentation',
  templateUrl: './documentation.component.html',
  styleUrls: ['./documentation.component.scss']
})
export class DocumentationComponent implements OnInit, AfterViewInit {
  @ViewChild('content', { static: true }) contentElement!: ElementRef;
  @ViewChild('tocContainer', { static: true }) tocContainer!: ElementRef;

  htmlContent: any = '';
  tocItems: TocItem[] = [];
  activeSection = 0;
  isLoading = true;
  loadingError = '';

  // Image modal properties
  showImageModal = false;
  selectedImage = '';
  selectedImageAlt = '';

  // Language properties
  currentLanguage: 'en' | 'ko' = 'en';

  markdownFiles = {
    en: [
      { folder: 'Page1', file: 'page1.md' },
      { folder: 'Page2', file: 'page2.md' },
      { folder: 'Page3', file: 'page3.md' },
      { folder: 'Page4', file: 'page4.md' }
    ],
    ko: [
      { folder: 'Page1_ko', file: 'page1_ko.md' },
      { folder: 'Page2_ko', file: 'page2_ko.md' },
      { folder: 'Page3_ko', file: 'page3_ko.md' },
      { folder: 'Page4_ko', file: 'page4_ko.md' }
    ]
  };

  constructor(private renderer: Renderer2) { }

  ngOnInit(): void {
    // Load saved language preference
    const savedLang = localStorage.getItem('doc-language') as 'en' | 'ko';
    if (savedLang && (savedLang === 'en' || savedLang === 'ko')) {
      this.currentLanguage = savedLang;
    }

    marked.setOptions({
      gfm: true,
      breaks: false,
      pedantic: false
    });

    this.loadAllMarkdownFiles();

    // Scroll listener
    this.renderer.listen(this.contentElement.nativeElement, 'scroll', () => {
      this.updateActiveSection();
    });

    // Resize listener
    window.addEventListener('resize', () => {
      setTimeout(() => this.updateActiveSection(), 100);
    });
  }

  ngAfterViewInit(): void {
    // Setup image click handlers after view is initialized
    setTimeout(() => {
      this.setupImageClickHandlers();
      // Ensure initial active section is set correctly
      this.updateActiveSection();
    }, 500);
  }

  async loadAllMarkdownFiles() {
    this.isLoading = true;
    this.loadingError = '';
    this.updateLoadingState();

    try {
      const currentFiles = this.markdownFiles[this.currentLanguage];
      const filePromises = currentFiles.map(({ folder, file }) =>
        this.loadMarkdownFile(folder, file)
      );

      const markdownFiles = await Promise.all(filePromises);
      this.processMarkdownFiles(markdownFiles);

      this.isLoading = false;

      setTimeout(() => {
        this.generateTOC();
        this.applySyntaxHighlighting();
        this.setupImageClickHandlers();
      }, 100);
    } catch (error) {
      console.error('Error loading markdown files:', error);
      this.loadingError = this.currentLanguage === 'en'
        ? 'Failed to load documentation files'
        : '문서 파일 로드에 실패했습니다';
      this.isLoading = false;
      this.updateLoadingState();
    }
  }

  async loadMarkdownFile(folder: string, file: string) {
    const path = `assets/markdown/${folder}/${file}`;
    try {
      const response = await fetch(path);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const content = await response.text();
      return { folderName: folder, fileName: file, content, path };
    } catch (error) {
      console.warn(`Failed to load ${path}:`, error);
      return {
        folderName: folder,
        fileName: file,
        content: `# Error Loading Content\n\nFailed to load content from ${path}`,
        path
      };
    }
  }

  processMarkdownFiles(markdownFiles: any[]) {
    let combinedMarkdown = '';

    markdownFiles.forEach((file, index) => {
      if (index > 0) combinedMarkdown += '\n\n';
      combinedMarkdown += file.content.trim();
    });

    this.htmlContent = marked.parse(combinedMarkdown);
  }

  updateLoadingState() {
    const loadingText = this.currentLanguage === 'en' ? 'Loading documentation...' : '문서 로딩 중...';
    const errorTitle = this.currentLanguage === 'en' ? 'Error Loading Content' : '콘텐츠 로딩 오류';
    const tocLoadingText = this.currentLanguage === 'en' ? 'Loading TOC...' : '목차 로딩 중...';
    const tocErrorText = this.currentLanguage === 'en' ? 'Failed to load TOC' : '목차 로드 실패';

    if (this.isLoading) {
      this.htmlContent = `<div class="loading-content"><div class="spinner"></div><p>${loadingText}</p></div>`;
      this.tocContainer.nativeElement.innerHTML = '<div class="loading-toc"><div class="skeleton-item"></div><div class="skeleton-item"></div><div class="skeleton-item"></div></div>';
    } else if (this.loadingError) {
      this.htmlContent = `<div class="error-content"><div class="error-icon">⚠️</div><h3>${errorTitle}</h3><p>${this.loadingError}</p></div>`;
      this.tocContainer.nativeElement.innerHTML = `<div class="error-toc">${tocErrorText}</div>`;
    }
  }

  generateTOC() {
    const headers = this.contentElement.nativeElement.querySelectorAll('h1, h2, h3, h4, h5, h6');
    this.tocItems = [];

    headers.forEach((header: HTMLElement, index: number) => {
      const level = parseInt(header.tagName.charAt(1));
      const text = (header.textContent || '').trim();
      const id = 'heading-' + index;
      header.id = id;
      header.classList.add('doc-heading');
      this.tocItems.push({ id, text, level });
    });

    // Don't auto-scroll initially - let user see the TOC from the top
  }

  applySyntaxHighlighting() {
    this.contentElement.nativeElement.querySelectorAll('pre code').forEach((block: HTMLElement) => {
      hljs.highlightElement(block);
    });
  }

  setupImageClickHandlers() {
    const images = this.contentElement.nativeElement.querySelectorAll('img');
    images.forEach((img: HTMLImageElement) => {
      // Make images smaller by default
      img.classList.add('doc-image');

      // Add click handler for modal
      this.renderer.listen(img, 'click', () => {
        this.openImageModal(img.src, img.alt);
      });

      // Add hover effect
      img.style.cursor = 'pointer';
      img.title = this.currentLanguage === 'en' ? 'Click to view full size' : '전체 크기로 보려면 클릭하세요';
    });
  }

  switchLanguage(lang: 'en' | 'ko') {
    if (this.currentLanguage !== lang) {
      this.currentLanguage = lang;
      localStorage.setItem('doc-language', lang);
      this.loadAllMarkdownFiles();
    }
  }

  updateActiveSection() {
    const headers = this.contentElement.nativeElement.querySelectorAll('h1, h2, h3, h4, h5, h6');
    let currentSection = 0;
    const scrollPos = this.contentElement.nativeElement.scrollTop;
    const offset = 100; // Offset for better detection

    // Special case: if we're at the very top (first 100px), always select the first section
    if (scrollPos < 100) {
      currentSection = 0;
    } else {
      // Find the current section based on scroll position
      // We need to handle both scrolling up and down properly
      for (let i = headers.length - 1; i >= 0; i--) {
        const header = headers[i] as HTMLElement;
        if (header.offsetTop <= scrollPos + offset) {
          currentSection = i;
          break;
        }
      }
    }

    // Only update if the section actually changed
    if (this.activeSection !== currentSection) {
      this.activeSection = currentSection;

      // Add a small delay to ensure the DOM is updated before scrolling TOC
      setTimeout(() => {
        this.scrollTocToActiveSection(currentSection);
      }, 50);
    }
  }

  scrollTocToActiveSection(activeIndex: number) {
    // Use a more specific selector to get the correct TOC navigation container
    const tocNavElement = document.querySelector('.sidebar .toc-nav') as HTMLElement;

    if (!tocNavElement || this.tocItems.length === 0 || activeIndex >= this.tocItems.length || activeIndex < 0) {
      return;
    }

    // Get all TOC items within the nav container
    const tocItems = tocNavElement.querySelectorAll('.toc-item');
    const activeTocItem = tocItems[activeIndex] as HTMLElement;

    if (!activeTocItem) {
      return;
    }

    // Special case: If we're at the first section (index 0), scroll TOC to the top
    if (activeIndex === 0) {
      tocNavElement.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
      return;
    }

    // Get container dimensions and scroll position
    const containerScrollTop = tocNavElement.scrollTop;
    const containerHeight = tocNavElement.clientHeight;

    // Get active item position relative to the container
    const itemOffsetTop = activeTocItem.offsetTop;
    const itemHeight = activeTocItem.offsetHeight;

    // Calculate visible boundaries
    const visibleTop = containerScrollTop;
    const visibleBottom = containerScrollTop + containerHeight;
    const itemTop = itemOffsetTop;
    const itemBottom = itemOffsetTop + itemHeight;

    // Use different padding for up vs down scrolling
    const topPadding = 30; // More padding when scrolling up
    const bottomPadding = 30; // Consistent padding when scrolling down

    let newScrollTop = containerScrollTop;
    let shouldScroll = false;

    // Check if item is above visible area (scrolling up case)
    if (itemTop < visibleTop + topPadding) {
      shouldScroll = true;
      newScrollTop = Math.max(0, itemTop - topPadding);
    }
    // Check if item is below visible area (scrolling down case)
    else if (itemBottom > visibleBottom - bottomPadding) {
      shouldScroll = true;
      newScrollTop = Math.max(0, itemBottom - containerHeight + bottomPadding);
    }

    // Only scroll if the item is actually outside the visible area
    if (shouldScroll) {
      tocNavElement.scrollTo({
        top: newScrollTop,
        behavior: 'smooth'
      });
    }
  }

  scrollToSection(id: string, index: number, event: Event) {
    event.preventDefault();
    const element = document.getElementById(id);
    if (element) {
      this.contentElement.nativeElement.scrollTo({
        top: element.offsetTop - 20,
        behavior: 'smooth'
      });
    }

    // Update the active section immediately for manual clicks
    this.activeSection = index;

    // Don't auto-scroll TOC for manual clicks - user clicked it intentionally
    // The TOC item is already visible since they clicked on it
  }

  openImageModal(src: string, alt: string) {
    this.selectedImage = src;
    this.selectedImageAlt = alt;
    this.showImageModal = true;
    document.body.style.overflow = 'hidden';
  }

  closeImageModal() {
    this.showImageModal = false;
    document.body.style.overflow = 'auto';
  }

  reloadContent() {
    this.loadAllMarkdownFiles();
  }
}



































<div class="documentation-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="sidebar-header">
            <h3>{{ currentLanguage === 'en' ? 'Table of Contents' : '목차' }}</h3>

            <!-- Language Toggle -->
            <div class="language-toggle">
                <div class="toggle-track" [class.korean]="currentLanguage === 'ko'">
                    <div class="toggle-thumb" [class.korean]="currentLanguage === 'ko'"></div>
                    <button class="lang-option english" [class.active]="currentLanguage === 'en'"
                        (click)="switchLanguage('en')" title="Switch to English">
                        <span class="lang-flag">🇺🇸</span>
                        <span class="lang-text">EN</span>
                    </button>
                    <button class="lang-option korean" [class.active]="currentLanguage === 'ko'"
                        (click)="switchLanguage('ko')" title="한국어로 전환">
                        <span class="lang-flag">🇰🇷</span>
                        <span class="lang-text">한국</span>
                    </button>
                </div>
            </div>
        </div>

        <div #tocContainer class="toc-container">
            <div class="loading">Loading TOC...</div>
        </div>

        <nav class="toc-nav">
            <a *ngFor="let item of tocItems; let i = index" href="#" (click)="scrollToSection(item.id, i, $event)"
                [class.active]="activeSection === i" class="toc-item" [ngClass]="'level-' + item.level">
                <span class="toc-bullet"></span>
                <span class="toc-text">{{ item.text }}</span>
            </a>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="content-header">
            <div class="content-title">
                <h1>{{ currentLanguage === 'en' ? 'Documentation' : '문서' }}</h1>
                <p class="subtitle">{{ currentLanguage === 'en' ? 'Comprehensive guide and reference' : '종합적인 가이드 및 참조'
                    }}</p>
            </div>

            <!-- Additional Language Info -->
            <div class="language-info">
                <div class="current-lang">
                    <span class="lang-flag">{{ currentLanguage === 'en' ? '🇺🇸' : '🇰🇷' }}</span>
                    <span class="lang-name">{{ currentLanguage === 'en' ? 'English' : '한국어' }}</span>
                </div>
            </div>
        </div>

        <div class="content-body" #content [innerHTML]="htmlContent"></div>
    </div>

    <!-- Image Modal -->
    <div class="image-modal" [class.active]="showImageModal" (click)="closeImageModal()">
        <div class="modal-content" (click)="$event.stopPropagation()">
            <button class="modal-close" (click)="closeImageModal()">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
            </button>
            <img [src]="selectedImage" [alt]="selectedImageAlt" class="modal-image">
            <div class="modal-caption" *ngIf="selectedImageAlt">{{ selectedImageAlt }}</div>
        </div>
    </div>
</div>
























/* Main container */
.documentation-container {
  display: flex;
  height: 100vh;
  background-color: #111113;
  color: #e8e8ea;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  overflow: hidden;
}

/* Sidebar styles */
.sidebar {
  width: 18.75rem;
  background: linear-gradient(135deg, #1a1a1c 0%, #242426 100%);
  border-right: 1px solid #333335;
  display: flex;
  flex-direction: column;
  box-shadow: 2px 0 10px rgba(0, 0, 0, 0.3);
}

.sidebar .sidebar-header {
  padding: 1.5rem 1.25rem 1rem;
  border-bottom: 1px solid #333335;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.sidebar .sidebar-header h3 {
  margin: 0;
  font-size: 1.125rem;
  font-weight: 600;
  color: #e8e8ea;
  background: linear-gradient(135deg, #4c9eff 0%, #7c3aed 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.sidebar .sidebar-header .language-toggle {
  position: relative;
}

.sidebar .sidebar-header .language-toggle .toggle-track {
  background: #242426;
  border: 2px solid #333335;
  border-radius: 1.5625rem;
  padding: 0.125rem;
  display: flex;
  position: relative;
  width: 6.25rem;
  height: 2.5rem;
  transition: all 0.3s ease;
  overflow: hidden;
}

.sidebar .sidebar-header .language-toggle .toggle-track:hover {
  border-color: #4c9eff;
  box-shadow: 0 0 0.9375rem rgba(76, 158, 255, 0.2);
}

.sidebar .sidebar-header .language-toggle .toggle-track.korean .toggle-thumb {
  transform: translateX(3.125rem);
  background: linear-gradient(135deg, #4c9eff 0%, #7c3aed 100%);
  border: 2px solid rgba(76, 158, 255, 0.3);
  box-shadow: 0 0.125rem 0.5rem rgba(76, 158, 255, 0.4), 0 0 1rem rgba(124, 58, 237, 0.2);
}

.sidebar .sidebar-header .language-toggle .toggle-track:hover.korean .toggle-thumb {
  box-shadow: 0 0.125rem 0.75rem rgba(76, 158, 255, 0.6), 0 0 1.25rem rgba(124, 58, 237, 0.3);
}

.sidebar .sidebar-header .language-toggle .toggle-track .toggle-thumb {
  position: absolute;
  top: 0.125rem;
  left: 0.125rem;
  width: 2.875rem;
  height: 2rem;
  background: linear-gradient(135deg, #002868 0%, #bf0a30 100%);
  border-radius: 1.25rem;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 0.125rem 0.5rem rgba(0, 0, 0, 0.3);
  z-index: 1;
  border: 2px solid rgba(255, 255, 255, 0.1);
}

.sidebar .sidebar-header .language-toggle .toggle-track .lang-option {
  flex: 1;
  background: transparent;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.25rem;
  padding: 0.5rem;
  border-radius: 1.125rem;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  z-index: 2;
}

.sidebar .sidebar-header .language-toggle .toggle-track .lang-option .lang-flag {
  font-size: 0.875rem;
  line-height: 1;
}

.sidebar .sidebar-header .language-toggle .toggle-track .lang-option .lang-text {
  font-size: 0.6875rem;
  font-weight: 600;
  letter-spacing: 0.03125rem;
  transition: all 0.3s ease;
}

.sidebar .sidebar-header .language-toggle .toggle-track .lang-option.english .lang-text {
  color: #68686a;
}

.sidebar .sidebar-header .language-toggle .toggle-track .lang-option.english.active .lang-text {
  color: white;
  text-shadow: 0 0.0625rem 0.125rem rgba(0, 0, 0, 0.8), 0 0 0.5rem rgba(191, 10, 48, 0.3);
  font-weight: 600;
}

.sidebar .sidebar-header .language-toggle .toggle-track .lang-option.korean .lang-text {
  color: #68686a;
  font-family: 'Malgun Gothic', 'Apple SD Gothic Neo', 'Noto Sans KR', sans-serif;
  font-weight: 700;
}

.sidebar .sidebar-header .language-toggle .toggle-track .lang-option.korean.active .lang-text {
  color: white;
  text-shadow: 0 0.0625rem 0.125rem rgba(76, 158, 255, 0.8), 0 0 0.5rem rgba(124, 58, 237, 0.4);
  font-weight: 700;
}

.sidebar .sidebar-header .language-toggle .toggle-track .lang-option:hover:not(.active) .lang-text {
  color: #4c9eff;
}

.sidebar .toc-container {
  padding: 1rem 1.25rem;
  min-height: 3.125rem;
}

.sidebar .toc-container .loading-toc .skeleton-item {
  height: 0.75rem;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
  border-radius: 0.25rem;
  margin-bottom: 0.5rem;
  animation: skeleton-loading 1.5s infinite;
}

.sidebar .toc-container .loading-toc .skeleton-item:nth-child(1) {
  width: 80%;
}

.sidebar .toc-container .loading-toc .skeleton-item:nth-child(2) {
  width: 60%;
}

.sidebar .toc-container .loading-toc .skeleton-item:nth-child(3) {
  width: 70%;
}

.sidebar .toc-container .error-toc {
  color: #ef4444;
  font-size: 0.875rem;
  text-align: center;
  padding: 1rem 0;
}

.sidebar .toc-nav {
  flex: 1;
  overflow-y: auto;
  padding: 0 0.75rem 1.25rem;
  scroll-behavior: smooth;
}

.sidebar .toc-nav::-webkit-scrollbar {
  width: 0.25rem;
}

.sidebar .toc-nav::-webkit-scrollbar-track {
  background: transparent;
  border-radius: 0.125rem;
}

.sidebar .toc-nav::-webkit-scrollbar-thumb {
  background: #333335;
  border-radius: 0.125rem;
  transition: background 0.2s ease;
}

.sidebar .toc-nav::-webkit-scrollbar-thumb:hover {
  background: #68686a;
}

.sidebar .toc-item {
  display: flex;
  align-items: center;
  padding: 0.5rem 0.75rem;
  margin: 0.125rem 0;
  color: #a8a8aa;
  text-decoration: none;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  line-height: 1.4;
  transition: all 0.2s ease;
  position: relative;
}

.sidebar .toc-item .toc-bullet {
  width: 0.25rem;
  height: 0.25rem;
  border-radius: 50%;
  background: #68686a;
  margin-right: 0.75rem;
  flex-shrink: 0;
  transition: all 0.2s ease;
}

.sidebar .toc-item .toc-text {
  flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.sidebar .toc-item:hover {
  color: #e8e8ea;
  background: rgba(76, 158, 255, 0.1);
}

.sidebar .toc-item:hover .toc-bullet {
  background: #4c9eff;
  transform: scale(1.2);
}

.sidebar .toc-item.active {
  color: #4c9eff;
  background: linear-gradient(135deg, rgba(76, 158, 255, 0.15) 0%, rgba(124, 58, 237, 0.15) 100%);
  font-weight: 500;
  transform: translateX(0.25rem);
  border-left: 0.1875rem solid #4c9eff;
  border-radius: 0 0.5rem 0.5rem 0;
}

.sidebar .toc-item.active .toc-bullet {
  background: #4c9eff;
  transform: scale(1.3);
  box-shadow: 0 0 0.5rem rgba(76, 158, 255, 0.5);
}

/* Level indentation */
.sidebar .toc-item.level-1 {
  padding-left: 0.75rem;
}

.sidebar .toc-item.level-2 {
  padding-left: 1.5rem;
}

.sidebar .toc-item.level-3 {
  padding-left: 2.25rem;
}

.sidebar .toc-item.level-4 {
  padding-left: 3rem;
}

.sidebar .toc-item.level-5 {
  padding-left: 3.75rem;
}

.sidebar .toc-item.level-6 {
  padding-left: 4.5rem;
}

/* Main content styles */
.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.main-content .content-header {
  background: linear-gradient(135deg, #1a1a1c 0%, #242426 100%);
  border-bottom: 1px solid #333335;
  padding: 1.5rem 2rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.main-content .content-header .content-title {
  flex: 1;
}

.main-content .content-header .content-title h1 {
  margin: 0 0 0.25rem 0;
  font-size: 1.75rem;
  font-weight: 700;
  background: linear-gradient(135deg, #4c9eff 0%, #7c3aed 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.main-content .content-header .content-title .subtitle {
  margin: 0;
  color: #a8a8aa;
  font-size: 16px;
}

.main-content .content-header .language-info {
  display: flex;
  align-items: center;
}

.main-content .content-header .language-info .current-lang {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  background: rgba(76, 158, 255, 0.1);
  padding: 0.5rem 1rem;
  border-radius: 1.25rem;
  border: 1px solid rgba(76, 158, 255, 0.2);
}

.main-content .content-header .language-info .current-lang .lang-flag {
  font-size: 1.125rem;
  line-height: 1;
}

.main-content .content-header .language-info .current-lang .lang-name {
  font-size: 0.875rem;
  font-weight: 500;
  color: #4c9eff;
  white-space: nowrap;
}

.main-content .content-body {
  flex: 1;
  overflow-y: auto;
  padding: 2rem;
  line-height: 1.7;
}

.main-content .content-body::-webkit-scrollbar {
  width: 0.5rem;
}

.main-content .content-body::-webkit-scrollbar-track {
  background: #1a1a1c;
}

.main-content .content-body::-webkit-scrollbar-thumb {
  background: #333335;
  border-radius: 0.25rem;
}

.main-content .content-body::-webkit-scrollbar-thumb:hover {
  background: #68686a;
}

/* Loading and error states */
.main-content .content-body .loading-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 18.75rem;
  color: #a8a8aa;
}

.main-content .content-body .loading-content .spinner {
  width: 2rem;
  height: 2rem;
  border: 0.1875rem solid #333335;
  border-top: 0.1875rem solid #4c9eff;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 1rem;
}

.main-content .content-body .loading-content p {
  margin: 0;
  font-size: 1rem;
}

.main-content .content-body .error-content {
  text-align: center;
  padding: 2.5rem;
  color: #ef4444;
}

.main-content .content-body .error-content .error-icon {
  font-size: 3rem;
  margin-bottom: 1rem;
}

.main-content .content-body .error-content h3 {
  margin: 0 0 0.5rem 0;
  color: #e8e8ea;
}

.main-content .content-body .error-content p {
  margin: 0;
  color: #a8a8aa;
}

/* Markdown content styles */
.main-content .content-body .doc-heading {
  color: #e8e8ea;
  font-weight: 600;
  margin-top: 2rem;
  margin-bottom: 1rem;
  padding-bottom: 0.5rem;
  border-bottom: 1px solid #333335;
}

.main-content .content-body .doc-heading:first-child {
  margin-top: 0;
}

.main-content .content-body h1 {
  font-size: 2.25rem;
  background: linear-gradient(135deg, #4c9eff 0%, #7c3aed 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.main-content .content-body h2 {
  font-size: 1.875rem;
  color: #4c9eff;
}

.main-content .content-body h3 {
  font-size: 1.5rem;
  color: #e8e8ea;
}

.main-content .content-body h4 {
  font-size: 1.25rem;
  color: #e8e8ea;
}

.main-content .content-body h5,
.main-content .content-body h6 {
  font-size: 1.125rem;
  color: #a8a8aa;
}

.main-content .content-body p {
  margin-bottom: 1rem;
  color: #a8a8aa;
}

/* Lists */
.main-content .content-body ul,
.main-content .content-body ol {
  margin-bottom: 1rem;
  padding-left: 2rem;
}

.main-content .content-body ul li,
.main-content .content-body ol li {
  margin-bottom: 0.5rem;
  color: #a8a8aa;
}

.main-content .content-body ul li::marker,
.main-content .content-body ol li::marker {
  color: #4c9eff;
}

.main-content .content-body ul ul,
.main-content .content-body ul ol,
.main-content .content-body ol ul,
.main-content .content-body ol ol {
  margin-top: 0.5rem;
  margin-bottom: 0.5rem;
}

/* Links */
.main-content .content-body a {
  color: #4c9eff;
  text-decoration: none;
  border-bottom: 1px solid transparent;
  transition: all 0.2s ease;
}

.main-content .content-body a:hover {
  border-bottom-color: #4c9eff;
}

/* Code blocks */
.main-content .content-body code {
  background: #242426;
  color: #4c9eff;
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
  font-size: 0.875rem;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
}

.main-content .content-body pre {
  background: #242426;
  border: 1px solid #333335;
  border-radius: 8px;
  padding: 1.5rem;
  margin: 1.5rem 0;
  overflow-x: auto;
  position: relative;
}

.main-content .content-body pre::-webkit-scrollbar {
  height: 6px;
}

.main-content .content-body pre::-webkit-scrollbar-track {
  background: transparent;
}

.main-content .content-body pre::-webkit-scrollbar-thumb {
  background: #333335;
  border-radius: 3px;
}

.main-content .content-body pre code {
  background: none;
  padding: 0;
  color: #e8e8ea;
  font-size: 0.875rem;
  line-height: 1.5;
}

/* Images */
.main-content .content-body .doc-image {
  max-width: 400px;
  max-height: 300px;
  width: auto;
  height: auto;
  border-radius: 8px;
  border: 1px solid #333335;
  cursor: pointer;
  transition: all 0.3s ease;
  margin: 1rem 0;
  display: block;
}

.main-content .content-body .doc-image:hover {
  transform: scale(1.02);
  border-color: #4c9eff;
  box-shadow: 0 4px 20px rgba(76, 158, 255, 0.2);
}

/* Tables */
.main-content .content-body table {
  width: 100%;
  border-collapse: collapse;
  margin: 1.5rem 0;
  background: #1a1a1c;
  border-radius: 0.5rem;
  overflow: hidden;
}

.main-content .content-body table th,
.main-content .content-body table td {
  padding: 1rem;
  text-align: left;
  border-bottom: 1px solid #333335;
}

.main-content .content-body table th {
  background: #242426;
  color: #e8e8ea;
  font-weight: 600;
}

.main-content .content-body table td {
  color: #a8a8aa;
}

.main-content .content-body table tr:hover {
  background: rgba(76, 158, 255, 0.05);
}

/* Blockquotes */
.main-content .content-body blockquote {
  background: linear-gradient(135deg, rgba(76, 158, 255, 0.1) 0%, rgba(124, 58, 237, 0.1) 100%);
  border-left: 0.25rem solid #4c9eff;
  padding: 1rem 1.5rem;
  margin: 1.5rem 0;
  border-radius: 0 0.5rem 0.5rem 0;
  color: #e8e8ea;
  font-style: italic;
}

.main-content .content-body blockquote p:last-child {
  margin-bottom: 0;
}

/* Horizontal rules */
.main-content .content-body hr {
  border: none;
  height: 1px;
  background: linear-gradient(90deg, transparent, #333335, transparent);
  margin: 2rem 0;
}

/* Image modal */
.image-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(5px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s ease;
}

.image-modal.active {
  opacity: 1;
  visibility: visible;
}

.image-modal .modal-content {
  position: relative;
  max-width: 90vw;
  max-height: 90vh;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.image-modal .modal-content .modal-close {
  position: absolute;
  top: -3.125rem;
  right: 0;
  background: rgba(0, 0, 0, 0.7);
  border: none;
  color: white;
  padding: 0.625rem;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.2s ease;
  z-index: 1001;
}

.image-modal .modal-content .modal-close:hover {
  background: #ef4444;
}

.image-modal .modal-content .modal-image {
  max-width: 100%;
  max-height: calc(90vh - 6.25rem);
  object-fit: contain;
  border-radius: 0.5rem;
  box-shadow: 0 0.5rem 2.5rem rgba(0, 0, 0, 0.5);
}

.image-modal .modal-content .modal-caption {
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 0.75rem 1.25rem;
  border-radius: 1.25rem;
  margin-top: 1rem;
  font-size: 0.875rem;
  max-width: 37.5rem;
  text-align: center;
}

/* Animations */
@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes skeleton-loading {
  0% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
  100% {
    opacity: 1;
  }
}

/* Responsive design */
@media (max-width: 1024px) {
  .sidebar {
    width: 15.625rem;
  }

  .main-content .content-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .main-content .content-header .language-info {
    align-self: flex-end;
  }
}

@media (max-width: 768px) {
  .documentation-container {
    flex-direction: column;
  }

  .sidebar {
    width: 100%;
    height: auto;
    max-height: 13.75rem;
    border-right: none;
    border-bottom: 1px solid #333335;
  }

  .sidebar .sidebar-header {
    padding: 1rem;
  }

  .sidebar .sidebar-header h3 {
    font-size: 1rem;
  }

  .sidebar .sidebar-header .language-toggle .toggle-track {
    width: 5.625rem;
    height: 2.25rem;
  }

  .sidebar .sidebar-header .language-toggle .toggle-track .toggle-thumb {
    width: 2.625rem;
    height: 1.75rem;
  }

  .sidebar .sidebar-header .language-toggle .toggle-track.korean .toggle-thumb {
    transform: translateX(2.8125rem);
    background: linear-gradient(135deg, #4c9eff 0%, #7c3aed 100%);
    border: 2px solid rgba(76, 158, 255, 0.3);
    box-shadow: 0 0.125rem 0.5rem rgba(76, 158, 255, 0.4);
  }

  .sidebar .sidebar-header .language-toggle .toggle-track .lang-option .lang-text {
    font-size: 0.625rem;
  }

  .sidebar .toc-nav {
    max-height: 7.5rem;
  }

  .main-content .content-header {
    padding: 1rem;
    flex-direction: column;
    align-items: flex-start;
    gap: 0.75rem;
  }

  .main-content .content-header .content-title h1 {
    font-size: 1.5rem;
  }

  .main-content .content-header .language-info {
    align-self: center;
  }

  .main-content .content-header .language-info .current-lang {
    padding: 0.375rem 0.75rem;
  }

  .main-content .content-header .language-info .current-lang .lang-name {
    font-size: 0.8125rem;
  }

  .main-content .content-body {
    padding: 1rem;
  }

  .image-modal .modal-content {
    max-width: 95vw;
    max-height: 95vh;
  }
}

/* Dark theme specific syntax highlighting */
pre code .hljs-keyword {
  color: #ff7b72;
}

pre code .hljs-string {
  color: #a5d6ff;
}

pre code .hljs-number {
  color: #79c0ff;
}

pre code .hljs-comment {
  color: #8b949e;
}

pre code .hljs-function {
  color: #d2a8ff;
}

pre code .hljs-variable {
  color: #ffa657;
}

pre code .hljs-tag {
  color: #7ee787;
}

pre code .hljs-attr {
  color: #79c0ff;
}
