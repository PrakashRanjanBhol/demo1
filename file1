import React, { useState } from 'react';
import { InputText } from 'primereact/inputtext';
import { Password } from 'primereact/password';
import { Button } from 'primereact/button';
import { Message } from 'primereact/message';
import { ProgressSpinner } from 'primereact/progressspinner';

import styles from './ConfluencePanel.module.css';

const ConfluencePanel = () => {
    const [url, setUrl] = useState('');
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [connected, setConnected] = useState(false);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');
    const [formErrors, setFormErrors] = useState({});

    const validate = () => {
        const errors = {};
        if (!url.trim()) errors.url = 'Confluence URL is required';
        if (!username.trim()) errors.username = 'Username is required';
        if (!password.trim()) errors.password = 'Password is required';
        setFormErrors(errors);
        return Object.keys(errors).length === 0;
    };

    const handleConnect = () => {
        if (!validate()) return;

        setLoading(true);
        setError('');

        setTimeout(() => {
            if (url.includes('confluence') && username === 'admin' && password === 'admin123') {
                setConnected(true);
            } else {
                setError('Invalid credentials or URL');
            }
            setLoading(false);
        }, 1200);
    };

    return (
        <div className={styles.panel}>
            {!connected ? (
                <div className={styles.form}>
                    <h3 className={styles.title}>Connect to Confluence</h3>

                    <div className={styles.field}>
                        <label htmlFor="url">Confluence URL</label>
                        <InputText
                            id="url"
                            value={url}
                            onChange={(e) => setUrl(e.target.value)}
                            className={formErrors.url ? 'p-invalid' : ''}
                            placeholder="https://example.atlassian.net/wiki"
                        />
                        {formErrors.url && <small className="p-error">{formErrors.url}</small>}
                    </div>

                    <div className={styles.field}>
                        <label htmlFor="username">Username</label>
                        <InputText
                            id="username"
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                            className={formErrors.username ? 'p-invalid' : ''}
                        />
                        {formErrors.username && <small className="p-error">{formErrors.username}</small>}
                    </div>

                    <div className={styles.field}>
                        <label htmlFor="password">Password / API Token</label>
                        <Password
                            id="password"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                            toggleMask
                            feedback={false}
                            className={formErrors.password ? 'p-invalid' : ''}
                        />
                        {formErrors.password && <small className="p-error">{formErrors.password}</small>}
                    </div>

                    <div className={styles.buttonWrapper}>
                        <Button
                            label="Connect"
                            icon="pi pi-link"
                            onClick={handleConnect}
                            disabled={loading}
                            className={styles.connectButton}
                        />
                    </div>

                    {loading && (
                        <div className={styles.loading}>
                            <ProgressSpinner style={{ width: '32px', height: '32px' }} strokeWidth="4" />
                        </div>
                    )}
                    {error && <Message severity="error" text={error} style={{ marginTop: '12px' }} />}
                </div>
            ) : (
                <div className={styles.successContent}>
                    <h4>âœ… Connected Successfully!</h4>
                    <p>You are now connected to: <strong>{url}</strong></p>
                    <p>Logged in as: <strong>{username}</strong></p>
                </div>
            )}
        </div>
    );
};

export default ConfluencePanel;








.panel {
  position: fixed;
  top: 0;
  right: 0;
  width: 400px;
  height: 100%;
  background-color: #f9fafc;
  box-shadow: -2px 0 10px rgba(0, 0, 0, 0.15);
  padding: 20px;
  animation: slideIn 0.4s ease;
  overflow-y: auto;
  z-index: 9999;
  font-size: 15px;
}

@keyframes slideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.title {
  font-size: 18px;
  text-align: center;
  margin-bottom: 12px;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
}

.field {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.buttonWrapper {
  display: flex;
  justify-content: center;
  margin-top: 0.5rem;
}

.connectButton {
  background: linear-gradient(to right, #148fcb, #0d3b7e) !important;
  border: none !important;
  border-radius: 24px !important;
  height: 40px;
  padding: 0 26px;
  font-size: 15px;
  color: white;
  transition: all 0.3s ease;
}

.connectButton:hover {
  filter: brightness(1.08);
}

.loading {
  display: flex;
  justify-content: center;
  margin-top: 1rem;
}

.successContent {
  padding: 1rem;
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
  text-align: center;
  font-size: 15px;
}

/* Fix for password eye icon alignment */
.p-password {
  position: relative;
}

.p-password .p-password-input {
  padding-right: 2.5rem !important;
}

.p-password .p-password-icon {
  top: 50% !important;
  transform: translateY(-50%) !important;
  right: 0.75rem;
  font-size: 1rem;
}
.panel {
  position: fixed;
  top: 0;
  right: 0;
  width: 400px;
  height: 100%;
  background-color: #f9fafc;
  box-shadow: -2px 0 10px rgba(0, 0, 0, 0.15);
  padding: 20px;
  animation: slideIn 0.4s ease;
  overflow-y: auto;
  z-index: 9999;
  font-size: 15px;
}

@keyframes slideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

.title {
  font-size: 18px;
  text-align: center;
  margin-bottom: 12px;
}

.form {
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
}

.field {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.buttonWrapper {
  display: flex;
  justify-content: center;
  margin-top: 0.5rem;
}

.connectButton {
  background: linear-gradient(to right, #148fcb, #0d3b7e) !important;
  border: none !important;
  border-radius: 24px !important;
  height: 40px;
  padding: 0 26px;
  font-size: 15px;
  color: white;
  transition: all 0.3s ease;
}

.connectButton:hover {
  filter: brightness(1.08);
}

.loading {
  display: flex;
  justify-content: center;
  margin-top: 1rem;
}

.successContent {
  padding: 1rem;
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
  text-align: center;
  font-size: 15px;
}

/* Fix for password eye icon alignment */
.p-password {
  position: relative;
}

.p-password .p-password-input {
  padding-right: 2.5rem !important;
}

.p-password .p-password-icon {
  top: 50% !important;
  transform: translateY(-50%) !important;
  right: 0.75rem;
  font-size: 1rem;
}
