// modal-splitter.component.ts
import { Component, ElementRef, ViewChild, AfterViewInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-modal-splitter',
  template: `
    <!-- Modal Backdrop -->
    <div 
      class="modal-backdrop" 
      [class.show]="isVisible"
      (click)="onBackdropClick($event)"
      *ngIf="isOpen">
      
      <!-- Modal Container -->
      <div 
        class="modal-container" 
        [class.show]="isVisible"
        #modalContainer
        (click)="$event.stopPropagation()">
        
        <!-- Modal Header -->
        <div class="modal-header">
          <h2>Splitter Modal</h2>
          <button class="close-btn" (click)="closeModal()">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
              <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
          </button>
        </div>
        
        <!-- Splitter Content -->
        <div class="splitter-container" #container>
          <div class="left-panel" [style.width.px]="leftPanelWidth">
            <div class="panel-content">
              <h3>Left Panel</h3>
              <p>This is the left panel content. You can put any content here.</p>
              <p>Width: {{leftPanelWidth}}px</p>
              <div class="sample-content">
                <p>You can add:</p>
                <ul>
                  <li>Navigation menus</li>
                  <li>Sidebar content</li>
                  <li>Filter options</li>
                  <li>Settings panel</li>
                </ul>
              </div>
            </div>
          </div>
          
          <div 
            class="splitter" 
            #splitter
            (mousedown)="onMouseDown($event)"
            [class.dragging]="isDragging">
            <div class="splitter-handle"></div>
          </div>
          
          <div class="right-panel" [style.width.px]="rightPanelWidth">
            <div class="panel-content">
              <h3>Main Content</h3>
              <p>This is the main content area with the requested dark background.</p>
              <p>Width: {{rightPanelWidth}}px</p>
              <div class="sample-content">
                <p>Perfect for:</p>
                <ul>
                  <li>Main application content</li>
                  <li>Data visualization</li>
                  <li>Forms and inputs</li>
                  <li>Dashboard widgets</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Trigger Button -->
    <button class="trigger-btn" (click)="openModal()" *ngIf="!isOpen">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
        <path d="M12 5v14M5 12h14" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
      Open Splitter
    </button>
  `,
  styles: [`
    /* Trigger Button */
    .trigger-btn {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 12px;
      padding: 12px 20px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
      display: flex;
      align-items: center;
      gap: 8px;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      z-index: 1000;
    }

    .trigger-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
    }

    .trigger-btn:active {
      transform: translateY(0);
    }

    /* Modal Backdrop */
    .modal-backdrop {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0);
      backdrop-filter: blur(0px);
      z-index: 10000;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      opacity: 0;
      pointer-events: none;
    }

    .modal-backdrop.show {
      background: rgba(0, 0, 0, 0.6);
      backdrop-filter: blur(8px);
      opacity: 1;
      pointer-events: all;
    }

    /* Modal Container */
    .modal-container {
      width: 90%;
      height: 85%;
      max-width: 1200px;
      max-height: 800px;
      background: #1a1a1b;
      border-radius: 16px;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.8);
      display: flex;
      flex-direction: column;
      overflow: hidden;
      transform: scale(0.8) translate(25%, 25%);
      opacity: 0;
      transition: all 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
    }

    .modal-container.show {
      transform: scale(1) translate(0%, 0%);
      opacity: 1;
    }

    /* Modal Header */
    .modal-header {
      background: #2a2a2b;
      padding: 20px 24px;
      border-bottom: 1px solid #333;
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-shrink: 0;
    }

    .modal-header h2 {
      margin: 0;
      color: #ffffff;
      font-size: 20px;
      font-weight: 600;
    }

    .close-btn {
      background: transparent;
      border: none;
      color: #b3b3b3;
      cursor: pointer;
      padding: 8px;
      border-radius: 8px;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .close-btn:hover {
      background: #333;
      color: #ffffff;
    }

    /* Splitter Container */
    .splitter-container {
      display: flex;
      flex: 1;
      overflow: hidden;
      background-color: #0a0a0b;
    }

    .left-panel, .right-panel {
      min-width: 0;
      overflow: auto;
    }

    .left-panel {
      background-color: #1a1a1b;
      border-right: 1px solid #333;
    }

    .right-panel {
      background-color: #0a0a0b;
      border-left: 1px solid #333;
    }

    .panel-content {
      padding: 24px;
    }

    .panel-content h3 {
      margin-top: 0;
      margin-bottom: 16px;
      color: #ffffff;
      font-weight: 600;
      font-size: 18px;
    }

    .panel-content p {
      color: #b3b3b3;
      line-height: 1.6;
      margin-bottom: 12px;
    }

    .sample-content {
      margin-top: 24px;
    }

    .sample-content ul {
      color: #999;
      padding-left: 20px;
    }

    .sample-content li {
      margin-bottom: 8px;
      line-height: 1.5;
    }

    .splitter {
      width: 6px;
      background-color: #333;
      cursor: col-resize;
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.2s ease;
    }

    .splitter:hover {
      background-color: #444;
    }

    .splitter.dragging {
      background-color: #667eea;
    }

    .splitter-handle {
      width: 2px;
      height: 40px;
      background-color: #666;
      border-radius: 1px;
      transition: background-color 0.2s ease;
    }

    .splitter:hover .splitter-handle {
      background-color: #888;
    }

    .splitter.dragging .splitter-handle {
      background-color: white;
    }

    /* Prevent text selection during drag */
    .splitter-container.no-select {
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
    }

    /* Custom scrollbar for panels - Dark theme */
    .left-panel::-webkit-scrollbar,
    .right-panel::-webkit-scrollbar {
      width: 8px;
    }

    .left-panel::-webkit-scrollbar-track,
    .right-panel::-webkit-scrollbar-track {
      background: #1a1a1b;
    }

    .left-panel::-webkit-scrollbar-thumb,
    .right-panel::-webkit-scrollbar-thumb {
      background: #444;
      border-radius: 4px;
    }

    .left-panel::-webkit-scrollbar-thumb:hover,
    .right-panel::-webkit-scrollbar-thumb:hover {
      background: #555;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .modal-container {
        width: 95%;
        height: 90%;
      }
      
      .trigger-btn {
        bottom: 16px;
        right: 16px;
        padding: 10px 16px;
        font-size: 14px;
      }
      
      .panel-content {
        padding: 16px;
      }
    }
  `]
})
export class ModalSplitterComponent implements AfterViewInit, OnDestroy {
  @ViewChild('container', { static: true }) containerRef!: ElementRef;
  @ViewChild('splitter', { static: true }) splitterRef!: ElementRef;
  @ViewChild('modalContainer', { static: false }) modalContainer!: ElementRef;

  @Input() defaultLeftWidth: number = 300;
  @Output() modalClosed = new EventEmitter<void>();
  @Output() modalOpened = new EventEmitter<void>();

  leftPanelWidth: number = 300;
  rightPanelWidth: number = 0;
  isDragging: boolean = false;
  isOpen: boolean = false;
  isVisible: boolean = false;
  
  private startX: number = 0;
  private startLeftWidth: number = 0;
  private containerWidth: number = 0;

  ngAfterViewInit() {
    this.leftPanelWidth = this.defaultLeftWidth;
    window.addEventListener('resize', this.onWindowResize.bind(this));
  }

  ngOnDestroy() {
    window.removeEventListener('resize', this.onWindowResize.bind(this));
    this.removeGlobalListeners();
  }

  openModal() {
    this.isOpen = true;
    document.body.style.overflow = 'hidden'; // Prevent body scroll
    
    // Trigger animation after DOM update
    setTimeout(() => {
      this.isVisible = true;
      this.initializePanels();
      this.modalOpened.emit();
    }, 10);
  }

  closeModal() {
    this.isVisible = false;
    
    // Wait for animation to complete before removing from DOM
    setTimeout(() => {
      this.isOpen = false;
      document.body.style.overflow = ''; // Restore body scroll
      this.modalClosed.emit();
    }, 500);
  }

  onBackdropClick(event: Event) {
    if (event.target === event.currentTarget) {
      this.closeModal();
    }
  }

  private initializePanels() {
    if (!this.containerRef) return;
    
    const container = this.containerRef.nativeElement;
    this.containerWidth = container.offsetWidth;
    const splitterWidth = 6;
    
    // Set right panel width based on available space
    this.rightPanelWidth = this.containerWidth - this.leftPanelWidth - splitterWidth;
  }

  onMouseDown(event: MouseEvent) {
    event.preventDefault();
    
    this.isDragging = true;
    this.startX = event.clientX;
    this.startLeftWidth = this.leftPanelWidth;
    this.containerWidth = this.containerRef.nativeElement.offsetWidth;
    
    // Add no-select class to prevent text selection
    this.containerRef.nativeElement.classList.add('no-select');
    
    // Add global mouse event listeners
    document.addEventListener('mousemove', this.onMouseMove.bind(this));
    document.addEventListener('mouseup', this.onMouseUp.bind(this));
    
    // Change cursor for entire document
    document.body.style.cursor = 'col-resize';
  }

  onMouseMove(event: MouseEvent) {
    if (!this.isDragging) return;
    
    event.preventDefault();
    
    const deltaX = event.clientX - this.startX;
    let newLeftWidth = this.startLeftWidth + deltaX;
    
    // Calculate splitter width (6px)
    const splitterWidth = 6;
    
    // Allow full range from 0 to full width (minus splitter)
    newLeftWidth = Math.max(newLeftWidth, 0);
    newLeftWidth = Math.min(newLeftWidth, this.containerWidth - splitterWidth);
    
    this.leftPanelWidth = newLeftWidth;
    this.rightPanelWidth = this.containerWidth - newLeftWidth - splitterWidth;
  }

  onMouseUp(event: MouseEvent) {
    if (!this.isDragging) return;
    
    this.isDragging = false;
    
    // Remove no-select class
    this.containerRef.nativeElement.classList.remove('no-select');
    
    // Remove global listeners
    this.removeGlobalListeners();
    
    // Reset cursor
    document.body.style.cursor = '';
  }

  private removeGlobalListeners() {
    document.removeEventListener('mousemove', this.onMouseMove.bind(this));
    document.removeEventListener('mouseup', this.onMouseUp.bind(this));
  }

  private onWindowResize() {
    if (!this.isOpen) return;
    this.updatePanelWidths();
  }

  private updatePanelWidths() {
    if (!this.containerRef) return;
    
    const container = this.containerRef.nativeElement;
    const newContainerWidth = container.offsetWidth;
    const splitterWidth = 6;
    
    if (newContainerWidth !== this.containerWidth) {
      // Maintain proportions on window resize
      const ratio = this.leftPanelWidth / (this.containerWidth - splitterWidth);
      this.containerWidth = newContainerWidth;
      
      // Calculate new left width maintaining ratio, but allow 0 to full width
      this.leftPanelWidth = Math.max(
        0,
        Math.min(
          ratio * (newContainerWidth - splitterWidth),
          newContainerWidth - splitterWidth
        )
      );
      this.rightPanelWidth = newContainerWidth - this.leftPanelWidth - splitterWidth;
    }
  }
}

/*
Usage in your module:

1. Add to your component declarations in app.module.ts or feature module:

import { ModalSplitterComponent } from './modal-splitter.component';

@NgModule({
  declarations: [
    ModalSplitterComponent,
    // ... other components
  ],
  // ...
})

2. Use in your template:
<app-modal-splitter 
  [defaultLeftWidth]="300"
  (modalOpened)="onModalOpened()"
  (modalClosed)="onModalClosed()">
</app-modal-splitter>

3. Optional: Handle modal events in your component:
onModalOpened() {
  console.log('Modal opened');
}

onModalClosed() {
  console.log('Modal closed');
}

Features:
- Beautiful modal popup with backdrop blur effect
- Animated entrance from right bottom corner with elastic easing
- Fixed trigger button in bottom-right corner
- Default 300px left panel width (customizable via input)
- Full range resizing: 0px minimum to 100% maximum
- Dark theme with #0a0a0b background for right panel
- Modal header with close button
- Click outside to close functionality
- Responsive design for mobile devices
- Smooth animations with cubic-bezier easing
- Event emitters for modal open/close
- Body scroll prevention when modal is open
- ESC key support can be added if needed
*/





<app-modal-splitter 
  [defaultLeftWidth]="300"
  (modalOpened)="onModalOpened()"
  (modalClosed)="onModalClosed()">
</app-modal-splitter>
