interface FormField {
  id: string;
  label: string;
  type: 'text' | 'textarea' | 'email' | 'number' | 'select' | 'date' | 'radio';
  placeholder?: string;
  options?: string[];
  required?: boolean;
  disabled?: boolean;  // Add this line
  value?: string;      // Add this line
}


interface Template {
  id: number;
  title: string;
  description: string;
  badge?: string;
  detailDescription?: string;
  formFields?: FormField[];
  category?: 'Code Generation' | 'Documentation' | 'Analysis' | 'Testing' | 'API';
  outputFormat?: string;  // Add this line
}



newTemplate = {
  title: '',
  description: '',
  detailDescription: '',
  formFields: [] as FormField[],
  outputFormat: ''  // Add this line
};



{ 
  id: 'outputFormat', 
  label: 'Output Format', 
  type: 'text', 
  placeholder: 'e.g., comma-separated, JSON, bullet points, etc.', 
  required: true 
}





saveTemplate(): void {
  if (!this.newTemplate.title.trim()) {
    alert('Please enter a template title');
    return;
  }
  
  if (!this.newTemplate.description.trim()) {
    alert('Please enter a template description');
    return;
  }
  
  if (this.newTemplate.formFields.length === 0) {
    alert('Please add at least one field to the template');
    return;
  }
  
  // Add this validation
  if (!this.newTemplate.outputFormat.trim()) {
    alert('Please enter an output format');
    return;
  }
  
  // Create the output format field with disabled and value properties
  const outputFormatField: FormField = {
    id: 'outputFormat',
    label: 'Output Format',
    type: 'text',
    placeholder: '',
    required: true,
    disabled: true,
    value: this.newTemplate.outputFormat
  };
  
  const template: Template = {
    id: this.customTemplates.length + 1,
    title: this.newTemplate.title,
    description: this.newTemplate.description,
    detailDescription: this.newTemplate.detailDescription || this.newTemplate.description,
    formFields: [...this.newTemplate.formFields, outputFormatField],  // Add output format field
    outputFormat: this.newTemplate.outputFormat  // Store it at template level too
  };
  
  this.customTemplates.push(template);
  this.hasCustomTemplates = true;
  
  console.log('Template created:', template);
  alert('Template created successfully!');
  
  this.showCreateTemplateModal = false;
  this.resetTemplateBuilder();
}



resetTemplateBuilder(): void {
  this.newTemplate = {
    title: '',
    description: '',
    detailDescription: '',
    formFields: [],
    outputFormat: ''  // Add this line
  };
  this.currentField = {
    id: '',
    label: '',
    type: 'text',
    placeholder: '',
    required: false
  };
  this.selectOptions = '';
}



selectTemplate(template: Template): void {
  this.selectedTemplate = template;
  this.showDetailView = true;
  this.formData = {};
  
  // Pre-fill disabled fields with their values
  if (template.formFields) {
    template.formFields.forEach(field => {
      if (field.disabled && field.value) {
        this.formData[field.id] = field.value;
      }
    });
  }
}






<input 
  *ngIf="field.type === 'text' || field.type === 'email' || field.type === 'number' || field.type === 'date'"
  [type]="field.type"
  [id]="field.id"
  [placeholder]="field.placeholder || ''"
  [(ngModel)]="formData[field.id]"
  [name]="field.id"
  [required]="field.required"
  [disabled]="field.disabled"
  class="form-input">




<div class="form-group">
  <label for="templateDetailDesc">Detailed Description</label>
  <textarea 
    id="templateDetailDesc" 
    [(ngModel)]="newTemplate.detailDescription"
    placeholder="Detailed description shown in the template view"
    rows="3"
    class="form-input form-textarea"></textarea>
</div>

<!-- Add this new section -->
<div class="form-group">
  <label for="outputFormat">Output Format <span class="required">*</span></label>
  <input 
    type="text" 
    id="outputFormat" 
    [(ngModel)]="newTemplate.outputFormat"
    placeholder="e.g., comma-separated, JSON, bullet points, numbered list, etc."
    class="form-input">
  <small class="field-hint">Specify how you want the output to be formatted</small>
</div>


.form-input:disabled {
  background: var(--prompt-template-bg-hover);
  color: var(--prompt-template-text-secondary);
  cursor: not-allowed;
  opacity: 0.7;
}
