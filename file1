.dark-theme {
    --sdlc-suite-tree-bg-primary: #111113;
    --sdlc-suite-tree-bg-secondary: #1a1a1d;
    --sdlc-suite-tree-bg-tertiary: #22222a;
    --sdlc-suite-tree-border-primary: #2a2a2f;
    --sdlc-suite-tree-text-primary: #e2e8f0;
    --sdlc-suite-tree-text-secondary: #cbd5e1;
    --sdlc-suite-tree-text-muted: #94a3b8;
}

.light-theme {
    --sdlc-suite-tree-bg-primary: #f8f9fa;
    --sdlc-suite-tree-bg-secondary: #ffffff;
    --sdlc-suite-tree-bg-tertiary: #e9ecef;
    --sdlc-suite-tree-border-primary: #dee2e6;
    --sdlc-suite-tree-text-primary: #212529;
    --sdlc-suite-tree-text-secondary: #495057;
    --sdlc-suite-tree-text-muted: #6c757d;
}


:host {
    display: block;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
}

.container {
    display: flex;
    width: 100vw;
    height: 100vh;
    position: relative;
}

.dark-theme {
    background: var(--sdlc-suite-tree-bg-primary);
    color: var(--sdlc-suite-tree-text-primary);
}

.light-theme {
    background: var(--sdlc-suite-tree-bg-primary);
    color: var(--sdlc-suite-tree-text-primary);
}

.sidebar {
    width: 320px;
    height: 100vh;
    background: var(--sdlc-suite-tree-bg-secondary);
    border-right: 1px solid var(--sdlc-suite-tree-border-primary);
    overflow-y: auto;
    flex-shrink: 0;
}

.tree-container {
    flex: 1;
    height: 100vh;
    position: relative;
    overflow: hidden;
}

.controls-panel {
    padding: 20px;
}

.svg-canvas {
    width: 100%;
    height: 100%;
    cursor: grab;
}

.svg-canvas:active {
    cursor: grabbing;
}

.panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
}

.panel-header h3 {
    margin: 0;
    color: var(--sdlc-suite-tree-text-primary);
    font-size: 16px;
    font-weight: 600;
}

.theme-toggle {
    background: var(--sdlc-suite-tree-bg-tertiary);
    border: 1px solid var(--sdlc-suite-tree-border-primary);
    border-radius: 8px;
    width: 32px;
    height: 32px;
    cursor: pointer;
    font-size: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
}

.theme-toggle:hover {
    transform: scale(1.05);
}

.stats {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 8px;
    margin-bottom: 12px;
}

.stat-item {
    padding: 8px;
    background: var(--sdlc-suite-tree-bg-tertiary);
    border-radius: 6px;
    text-align: center;
}

.stat-value {
    font-size: 20px;
    font-weight: 700;
    color: var(--sdlc-suite-tree-text-primary);
}

.stat-label {
    font-size: 10px;
    color: var(--sdlc-suite-tree-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.search-container {
    position: relative;
    margin-bottom: 12px;
}

.search-input {
    width: 100%;
    padding: 8px 32px 8px 12px;
    border: 1px solid var(--sdlc-suite-tree-border-primary);
    border-radius: 6px;
    font-size: 12px;
    background: var(--sdlc-suite-tree-bg-tertiary);
    color: var(--sdlc-suite-tree-text-primary);
}

.search-input:focus {
    outline: none;
    border-color: #667eea;
}

.search-icon {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    font-size: 14px;
    pointer-events: none;
}

.legend {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 8px;
    margin-bottom: 12px;
}

.legend-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 6px;
    background: var(--sdlc-suite-tree-bg-tertiary);
    border-radius: 6px;
    font-size: 10px;
    font-weight: 500;
}

.legend-color {
    width: 12px;
    height: 12px;
    border-radius: 2px;
}

.control-buttons {
    display: flex;
    gap: 8px;
}

.control-btn {
    flex: 1;
    padding: 8px;
    border: 1px solid var(--sdlc-suite-tree-border-primary);
    background: var(--sdlc-suite-tree-bg-tertiary);
    color: var(--sdlc-suite-tree-text-primary);
    border-radius: 6px;
    font-size: 11px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.control-btn:hover {
    background: var(--sdlc-suite-tree-bg-primary);
}

.details-panel {
    position: absolute;
    top: 20px;
    right: 20px;
    z-index: 10;
    background: var(--sdlc-suite-tree-bg-secondary);
    padding: 20px;
    border-radius: 12px;
    min-width: 300px;
    max-width: 400px;
    border: 1px solid var(--sdlc-suite-tree-border-primary);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    display: none;
}

.details-panel.show {
    display: block;
    animation: slideIn 0.3s ease;
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateX(20px);
    }

    to {
        opacity: 1;
        transform: translateX(0);
    }
}

.details-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 12px;
}

.details-header h3 {
    margin: 0;
    font-size: 14px;
    font-weight: 600;
}

.close-btn {
    background: transparent;
    border: none;
    cursor: pointer;
    font-size: 24px;
    color: var(--sdlc-suite-tree-text-muted);
    padding: 0;
    width: 24px;
    height: 24px;
}

.close-btn:hover {
    color: var(--sdlc-suite-tree-text-primary);
}

.detail-row {
    margin-bottom: 10px;
    padding: 8px;
    background: var(--sdlc-suite-tree-bg-tertiary);
    border-radius: 6px;
}

.detail-row strong {
    display: block;
    margin-bottom: 4px;
    font-size: 11px;
    text-transform: uppercase;
    color: var(--sdlc-suite-tree-text-muted);
}

.detail-row span {
    font-size: 13px;
    color: var(--sdlc-suite-tree-text-primary);
}

.zoom-hint {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--sdlc-suite-tree-bg-secondary);
    padding: 12px 20px;
    border-radius: 8px;
    font-size: 12px;
    color: var(--sdlc-suite-tree-text-muted);
    border: 1px solid var(--sdlc-suite-tree-border-primary);
    pointer-events: none;
}

/* D3 Node Styles */
::ng-deep .node circle {
    stroke-width: 2.5px;
    transition: all 0.3s ease;
}

::ng-deep .node:hover circle {
    stroke-width: 4px;
    filter: brightness(1.2);
}

::ng-deep .node text {
    font: 11px 'Inter', sans-serif;
    pointer-events: none;
    fill: var(--sdlc-suite-tree-text-primary);
}

::ng-deep .node.crs circle {
    fill: #3b82f6;
    stroke: #3b82f6;
}

::ng-deep .node.srs circle {
    fill: #8b5cf6;
    stroke: #8b5cf6;
}

::ng-deep .node.task circle {
    fill: #10b981;
    stroke: #10b981;
}

::ng-deep .node.tc circle {
    fill: #f97316;
    stroke: #f97316;
}

::ng-deep .node.draft circle {
    fill: transparent;
    stroke-dasharray: 5, 5;
}

::ng-deep .link {
    fill: none;
    stroke: var(--sdlc-suite-tree-border-primary);
    stroke-width: 2px;
    stroke-opacity: 0.6;
}

::ng-deep .node.highlighted circle {
    stroke-width: 5px;
    filter: drop-shadow(0 0 8px currentColor);
}















<div class="container" [class.dark-theme]="isDarkMode" [class.light-theme]="!isDarkMode">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="controls-panel">
            <div class="panel-header">
                <h3>Jira Ticket Overview</h3>
                <button class="theme-toggle" (click)="toggleTheme()">
                    {{ isDarkMode ? '‚òÄÔ∏è' : 'üåô' }}
                </button>
            </div>

            <div class="stats">
                <div class="stat-item">
                    <div class="stat-value">{{ stats.total }}</div>
                    <div class="stat-label">Total Tickets</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value">{{ stats.drafts }}</div>
                    <div class="stat-label">Drafts</div>
                </div>
            </div>

            <div class="search-container">
                <input type="text" class="search-input" placeholder="Search tickets..." [(ngModel)]="searchQuery"
                    (input)="onSearchChange()" />
                <span class="search-icon">üîç</span>
            </div>

            <div class="legend">
                <div class="legend-item" *ngFor="let item of typeColors | keyvalue">
                    <div class="legend-color" [style.background]="item.value"></div>
                    <span>{{ item.key.toUpperCase() }}</span>
                </div>
            </div>

            <div class="control-buttons">
                <button class="control-btn" (click)="expandAll()">Expand All</button>
                <button class="control-btn" (click)="collapseAll()">Collapse All</button>
            </div>
        </div>
    </div>

    <!-- Tree Visualization -->
    <div class="tree-container">
        <!-- Details Panel -->
        <div class="details-panel" [class.show]="selectedTicket">
            <div class="details-header">
                <h3>Ticket Details</h3>
                <button class="close-btn" (click)="closeDetails()">√ó</button>
            </div>
            <div class="details-content" *ngIf="selectedTicket">
                <div class="detail-row">
                    <strong>ID</strong>
                    <span>{{ selectedTicket.id }}</span>
                </div>
                <div class="detail-row">
                    <strong>Type</strong>
                    <span [style.color]="getTypeColor(selectedTicket.type)">
                        {{ selectedTicket.type.toUpperCase() }}
                    </span>
                </div>
                <div class="detail-row">
                    <strong>Title</strong>
                    <span>{{ selectedTicket.name }}</span>
                </div>
                <div class="detail-row">
                    <strong>Description</strong>
                    <span>{{ selectedTicket.description }}</span>
                </div>
                <div class="detail-row">
                    <strong>Status</strong>
                    <span [style.color]="selectedTicket.jira_ticket ? '#10b981' : '#f59e0b'">
                        {{ selectedTicket.jira_ticket ? '‚úì Published' : '‚úé Draft' }}
                    </span>
                </div>
                <div class="detail-row" *ngIf="selectedTicket.jira_ticket">
                    <strong>Jira Ticket</strong>
                    <span>{{ selectedTicket.jira_ticket }}</span>
                </div>
            </div>
        </div>

        <div class="zoom-hint">
            üí° Scroll to zoom ‚Ä¢ Drag to pan ‚Ä¢ Right-click to view details ‚Ä¢ Left-click to expand/collapse
        </div>

        <!-- SVG Canvas -->
        <svg #svg class="svg-canvas"></svg>
    </div>
</div>


















import { Component, OnInit, OnDestroy, ElementRef, ViewChild } from '@angular/core';
import * as d3 from 'd3';

interface TreeNode {
  id: string;
  name: string;
  description: string;
  type: 'crs' | 'srs' | 'task' | 'tc' | 'root';  // Add specific types
  jira_ticket: string | null;
  children?: TreeNode[];
}

interface TicketData {
  id: string;
  name: string;
  description: string;
  type: 'crs' | 'srs' | 'task' | 'tc';
  jira_ticket: string | null;
}

type TicketType = 'crs' | 'srs' | 'task' | 'tc';

@Component({
  selector: 'jira-tree',
  templateUrl: './jira-tree.component.html',
  styleUrls: ['./jira-tree.component.scss']
})
export class JiraTreeComponent implements OnInit, OnDestroy {
  @ViewChild('svg', { static: true }) svgElement!: ElementRef;

  isDarkMode = true;
  searchQuery = '';
  selectedTicket: TicketData | null = null;  // Change to specific type
  stats = { total: 0, drafts: 0 };

  private root: any;
  private treeLayout: any;
  private zoom: any;
  private g: any;
  private svg: any;
  private i = 0;

  hierarchyData: any = {
    name: "Root",
    type: "root",
    children: [
      {
        id: 'Test-001',
        name: 'CRS1 - Customer Requirements',
        description: 'This CRS defines the high-level customer requirements for the authentication system including login, logout, and session management capabilities.',
        type: 'crs',
        jira_ticket: 'Test-001',
        children: [
          {
            id: 'Test-SRS-001',
            name: 'SRS1 - User Authentication Module',
            description: 'Software requirements specification for implementing secure user authentication with password encryption and multi-factor authentication support.',
            type: 'srs',
            jira_ticket: 'Test-SRS-001',
            children: [
              {
                id: 'Test-Task-001',
                name: 'Task1 - Implement Login API',
                description: 'Create RESTful API endpoint for user login with JWT token generation and validation logic.',
                type: 'task',
                jira_ticket: 'Test-Task-001'
              },
              {
                id: 'Test-TC-001',
                name: 'TC1 - Login Test Cases',
                description: 'Test cases covering valid login, invalid credentials, account lockout, and session timeout scenarios.',
                type: 'tc',
                jira_ticket: 'Test-TC-001'
              },
              {
                id: 'Test-Task-003',
                name: 'Task3 - Password Encryption',
                description: 'Implement bcrypt password hashing with salt rounds for secure password storage in database.',
                type: 'task',
                jira_ticket: 'Test-Task-003'
              }
            ]
          },
          {
            id: 'Test-SRS-002',
            name: 'SRS2 - Session Management',
            description: 'Requirements for managing user sessions including timeout handling, concurrent session control, and session persistence across server restarts.',
            type: 'srs',
            jira_ticket: 'Test-SRS-002',
            children: [
              {
                id: 'Test-Task-002',
                name: 'Task2 - Session Storage',
                description: 'Implement Redis-based session storage with automatic expiration and cleanup mechanisms.',
                type: 'task',
                jira_ticket: 'Test-Task-002'
              },
              {
                id: 'Draft-10',
                name: 'TC2 - Session Test Cases',
                description: 'Test scenarios for session expiration, concurrent logins, and session hijacking prevention.',
                type: 'tc',
                jira_ticket: null
              },
              {
                id: 'Test-Task-004',
                name: 'Task4 - Session Timeout Handler',
                description: 'Create background job to handle session timeouts and notify users before automatic logout.',
                type: 'task',
                jira_ticket: 'Test-Task-004'
              }
            ]
          },
          {
            id: 'Test-SRS-003',
            name: 'SRS3 - User Authorization',
            description: 'Specification for role-based access control system with permissions and user group management.',
            type: 'srs',
            jira_ticket: 'Test-SRS-003',
            children: [
              {
                id: 'Test-Task-005',
                name: 'Task5 - RBAC Implementation',
                description: 'Build role-based access control with hierarchical roles and permission inheritance.',
                type: 'task',
                jira_ticket: 'Test-Task-005'
              },
              {
                id: 'Test-TC-003',
                name: 'TC3 - Authorization Tests',
                description: 'Test cases for role assignment, permission checks, and access denial scenarios.',
                type: 'tc',
                jira_ticket: 'Test-TC-003'
              }
            ]
          }
        ]
      },
      {
        id: 'Test-002',
        name: 'CRS2 - Data Management System',
        description: 'Customer requirements for comprehensive data management including CRUD operations, data validation, and audit logging capabilities.',
        type: 'crs',
        jira_ticket: 'Test-002',
        children: [
          {
            id: 'Draft-5',
            name: 'SRS4 - Data Validation Module',
            description: 'Requirements for implementing input validation, data sanitization, and business rule enforcement.',
            type: 'srs',
            jira_ticket: null,
            children: [
              {
                id: 'Draft-11',
                name: 'Task6 - Input Validator',
                description: 'Create comprehensive input validation library with custom validation rules support.',
                type: 'task',
                jira_ticket: null
              },
              {
                id: 'Draft-12',
                name: 'TC4 - Validation Test Suite',
                description: 'Test cases for all validation scenarios including edge cases and malformed data.',
                type: 'tc',
                jira_ticket: null
              }
            ]
          },
          {
            id: 'Test-SRS-005',
            name: 'SRS5 - Audit Logging',
            description: 'System requirements for comprehensive audit trail of all data modifications with timestamp and user tracking.',
            type: 'srs',
            jira_ticket: 'Test-SRS-005',
            children: [
              {
                id: 'Test-Task-007',
                name: 'Task7 - Audit Logger',
                description: 'Implement audit logging service with asynchronous writes and log rotation.',
                type: 'task',
                jira_ticket: 'Test-Task-007'
              },
              {
                id: 'Test-TC-005',
                name: 'TC5 - Audit Log Tests',
                description: 'Verify audit logs capture all CRUD operations with correct metadata and timestamps.',
                type: 'tc',
                jira_ticket: 'Test-TC-005'
              }
            ]
          }
        ]
      },
      {
        id: 'Test-003',
        name: 'CRS3 - Reporting & Analytics',
        description: 'Requirements for business intelligence reporting with custom dashboards, scheduled reports, and data export functionality.',
        type: 'crs',
        jira_ticket: 'Test-003',
        children: [
          {
            id: 'Test-SRS-006',
            name: 'SRS6 - Dashboard Engine',
            description: 'Specification for customizable dashboard system with drag-drop widgets and real-time data updates.',
            type: 'srs',
            jira_ticket: 'Test-SRS-006',
            children: [
              {
                id: 'Test-Task-008',
                name: 'Task8 - Widget Framework',
                description: 'Build reusable widget framework with chart components and data binding.',
                type: 'task',
                jira_ticket: 'Test-Task-008'
              },
              {
                id: 'Test-Task-009',
                name: 'Task9 - Real-time Updates',
                description: 'Implement WebSocket connection for live dashboard updates without page refresh.',
                type: 'task',
                jira_ticket: 'Test-Task-009'
              },
              {
                id: 'Test-TC-006',
                name: 'TC6 - Dashboard Tests',
                description: 'Test dashboard rendering, data refresh, and widget interactions.',
                type: 'tc',
                jira_ticket: 'Test-TC-006'
              }
            ]
          },
          {
            id: 'Test-SRS-007',
            name: 'SRS7 - Report Generation',
            description: 'Requirements for generating PDF/Excel reports with scheduling and email delivery options.',
            type: 'srs',
            jira_ticket: 'Test-SRS-007',
            children: [
              {
                id: 'Test-Task-010',
                name: 'Task10 - PDF Generator',
                description: 'Create PDF report generation service with custom templates and branding.',
                type: 'task',
                jira_ticket: 'Test-Task-010'
              },
              {
                id: 'Draft-13',
                name: 'Task11 - Report Scheduler',
                description: 'Build cron-based report scheduling system with email distribution.',
                type: 'task',
                jira_ticket: null
              },
              {
                id: 'Test-TC-007',
                name: 'TC7 - Report Generation Tests',
                description: 'Verify report accuracy, formatting, and scheduled delivery functionality.',
                type: 'tc',
                jira_ticket: 'Test-TC-007'
              }
            ]
          }
        ]
      }
    ]
  };

  typeColors: Record<TicketType, string> = {
    crs: '#3b82f6',
    srs: '#8b5cf6',
    task: '#10b981',
    tc: '#f97316'
  };

  ngOnInit() {
    this.initializeTree();
  }

  ngOnDestroy() {
    if (this.g) {
      d3.select(this.g).selectAll('*').remove();
    }
  }

  // Add helper method to get color safely
  getTypeColor(type: string): string {
    return this.typeColors[type as TicketType] || '#666666';
  }

  initializeTree() {
    const width = window.innerWidth - 320;
    const height = window.innerHeight;

    this.svg = d3.select(this.svgElement.nativeElement);
    this.svg.selectAll('*').remove();

    this.g = this.svg.append('g');

    this.zoom = d3.zoom()
      .scaleExtent([0.1, 3])
      .on('zoom', (event: any) => {
        this.g.attr('transform', event.transform);
      });

    this.svg.call(this.zoom);

    this.treeLayout = d3.tree()
      .size([height - 100, width - 400])
      .separation((a: any, b: any) => (a.parent === b.parent ? 2 : 2.5));

    this.root = d3.hierarchy(this.hierarchyData);
    this.root.x0 = height / 2;
    this.root.y0 = 0;

    if (this.root.children) {
      this.root.children.forEach((child: any) => this.collapse(child));
    }

    this.updateStats();
    this.update(this.root);
    // Remove this line to start from the beginning instead of center:
    // setTimeout(() => this.centerView(), 500);

    // Or replace with initial positioning at the start:
    setTimeout(() => this.positionAtStart(), 500);
  }

  positionAtStart() {
    if (!this.g || !this.zoom) return;

    const bounds = this.g.node().getBBox();
    const height = window.innerHeight;

    const scale = 1;
    const translate = [
      50, // Small left margin
      height / 2 - scale * (bounds.y + bounds.height / 2) // Vertically center
    ];

    this.svg.transition()
      .duration(750)
      .call(this.zoom.transform, d3.zoomIdentity.translate(translate[0], translate[1]).scale(scale));
  }

  collapse(d: any) {
    if (d.children) {
      d._children = d.children;
      d._children.forEach((child: any) => this.collapse(child));
      d.children = null;
    }
  }

  updateStats() {
    let total = 0;
    let drafts = 0;

    const count = (node: any) => {
      if (node.data.type !== 'root') {
        total++;
        if (!node.data.jira_ticket) drafts++;
      }
      if (node.children) node.children.forEach(count);
      if (node._children) node._children.forEach(count);
    };

    count(this.root);
    this.stats = { total, drafts };
  }

  diagonal(s: any, d: any) {
    return `M ${s.y} ${s.x}
            C ${(s.y + d.y) / 2} ${s.x},
              ${(s.y + d.y) / 2} ${d.x},
              ${d.y} ${d.x}`;
  }

  update(source: any) {
    const duration = 750;
    const treeData = this.treeLayout(this.root);
    const nodes = treeData.descendants();
    const links = treeData.links();

    nodes.forEach((d: any) => d.y = d.depth * 300);

    const node = this.g.selectAll('.node')
      .data(nodes, (d: any) => d.id || (d.id = ++this.i));

    const nodeEnter = node.enter().append('g')
      .attr('class', (d: any) => `node ${d.data.type} ${!d.data.jira_ticket ? 'draft' : ''}`)
      .attr('transform', `translate(${source.y0},${source.x0})`)
      .on('click', (event: any, d: any) => this.handleNodeClick(event, d))
      .on('contextmenu', (event: any, d: any) => {
        event.preventDefault();
        if (d.data.type !== 'root') {
          this.selectedTicket = d.data;
        }
      });

    nodeEnter.append('circle')
      .attr('r', 1e-6)
      .style('cursor', 'pointer');

    nodeEnter.append('text')
      .attr('dy', '.35em')
      .attr('x', (d: any) => d.children || d._children ? -13 : 13)
      .attr('text-anchor', (d: any) => d.children || d._children ? 'end' : 'start')
      .text((d: any) => d.data.type !== 'root' ? d.data.jira_ticket || d.data.id : '')
      .style('fill-opacity', 1e-6);

    const nodeUpdate = nodeEnter.merge(node);

    nodeUpdate.transition()
      .duration(duration)
      .attr('transform', (d: any) => `translate(${d.y},${d.x})`);

    nodeUpdate.select('circle')
      .attr('r', (d: any) => d.data.type === 'root' ? 0 : 8);

    nodeUpdate.select('text')
      .style('fill-opacity', 1);

    const nodeExit = node.exit().transition()
      .duration(duration)
      .attr('transform', `translate(${source.y},${source.x})`)
      .remove();

    nodeExit.select('circle').attr('r', 1e-6);
    nodeExit.select('text').style('fill-opacity', 1e-6);

    const link = this.g.selectAll('.link')
      .data(links, (d: any) => d.target.id);

    const linkEnter = link.enter().insert('path', 'g')
      .attr('class', 'link')
      .attr('d', () => {
        const o = { x: source.x0, y: source.y0 };
        return this.diagonal(o, o);
      });

    linkEnter.merge(link).transition()
      .duration(duration)
      .attr('d', (d: any) => this.diagonal(d.source, d.target));

    link.exit().transition()
      .duration(duration)
      .attr('d', () => {
        const o = { x: source.x, y: source.y };
        return this.diagonal(o, o);
      })
      .remove();

    nodes.forEach((d: any) => {
      d.x0 = d.x;
      d.y0 = d.y;
    });
  }

  handleNodeClick(event: any, d: any) {
    if (d.data.type === 'root') return;

    if (d.children) {
      d._children = d.children;
      d.children = null;
    } else if (d._children) {
      d.children = d._children;
      d._children = null;
    } else {
      this.selectedTicket = d.data;
      return;
    }
    this.update(d);
  }

  expandAll() {
    const expandNode = (d: any) => {
      if (d._children) {
        d.children = d._children;
        d._children = null;
      }
      if (d.children) d.children.forEach(expandNode);
    };

    expandNode(this.root);
    this.update(this.root);
    setTimeout(() => this.centerView(), 800);
  }

  collapseAll() {
    const collapseNode = (d: any) => {
      if (d.children) {
        d._children = d.children;
        d.children = null;
        d._children.forEach(collapseNode);
      }
    };

    if (this.root.children) {
      this.root.children.forEach(collapseNode);
    }
    this.update(this.root);
    setTimeout(() => this.centerView(), 800);
  }

  centerView() {
    if (!this.g || !this.zoom) return;

    const bounds = this.g.node().getBBox();
    const width = window.innerWidth - 320;
    const height = window.innerHeight;

    const fullWidth = bounds.width;
    const fullHeight = bounds.height;
    const midX = bounds.x + fullWidth / 2;
    const midY = bounds.y + fullHeight / 2;

    const scale = 1;
    const translate = [
      width / 2 - scale * midX,
      height / 2 - scale * midY
    ];

    this.svg.transition()
      .duration(750)
      .call(this.zoom.transform, d3.zoomIdentity.translate(translate[0], translate[1]).scale(scale));
  }

  onSearchChange() {
    this.svg.selectAll('.node').classed('highlighted', false);

    if (!this.searchQuery.trim()) return;

    const query = this.searchQuery.toLowerCase();

    this.svg.selectAll('.node').each((d: any, i: number, nodes: any) => {
      if (d.data.type === 'root') return;

      const matches =
        (d.data.id && d.data.id.toLowerCase().includes(query)) ||
        (d.data.name && d.data.name.toLowerCase().includes(query)) ||
        (d.data.jira_ticket && d.data.jira_ticket.toLowerCase().includes(query));

      if (matches) {
        d3.select(nodes[i]).classed('highlighted', true);
      }
    });
  }

  toggleTheme() {
    this.isDarkMode = !this.isDarkMode;
  }

  closeDetails() {
    this.selectedTicket = null;
  }
}





npm install d3 @types/d3
