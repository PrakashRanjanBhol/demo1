// auth.service.ts
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class AuthService {
  private ws: WebSocket | null = null;
  private userSubject = new BehaviorSubject<any>(this.getStoredUser());
  user$ = this.userSubject.asObservable();

  constructor(private router: Router) {}

  // Helper: read from storage
  private getStoredUser() {
    return JSON.parse(localStorage.getItem('user') || 'null');
  }

  // Username/Password Login
  loginWithCredentials(username: string, password: string) {
    if (username === 'admin' && password === '1234') {
      const user = { username, method: 'credentials' };
      localStorage.setItem('user', JSON.stringify(user));
      this.userSubject.next(user);
      this.router.navigate(['/dashboard']);
    } else {
      throw new Error('Invalid credentials');
    }
  }

  // SSO Login via WebSocket
  connectSSO() {
    if (this.ws) return;

    this.ws = new WebSocket('wss://official-app.com/sso');

    this.ws.onmessage = (event) => {
      const data = JSON.parse(event.data);

      if (data?.user) {
        const user = { ...data.user, method: 'sso' };
        localStorage.setItem('user', JSON.stringify(user));
        this.userSubject.next(user);
        this.router.navigate(['/dashboard']);
      }
    };

    this.ws.onclose = () => {
      this.logout();
    };
  }

  logout() {
    localStorage.removeItem('user');
    this.userSubject.next(null);

    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }

    this.router.navigate(['/login']);
  }

  // Used by AuthGuard
  isAuthenticated(): boolean {
    return !!this.getStoredUser();
  }
}
















// auth.guard.ts
import { Injectable } from '@angular/core';
import { CanActivate, Router } from '@angular/router';
import { AuthService } from './auth.service';

@Injectable({ providedIn: 'root' })
export class AuthGuard implements CanActivate {
  constructor(private auth: AuthService, private router: Router) {}

  canActivate(): boolean {
    if (this.auth.isAuthenticated()) {
      return true;
    } else {
      this.router.navigate(['/login']);
      return false;
    }
  }
}















// app-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginComponent } from './login/login.component';
import { DashboardComponent } from './dashboard/dashboard.component';
import { AuthGuard } from './auth.guard';

const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },
  { path: '', redirectTo: 'login', pathMatch: 'full' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}

