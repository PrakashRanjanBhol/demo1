import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

interface Project {
  id: number;
  title: string;
  isFavorite: boolean;
  isLoading: boolean;
  isMapped: boolean;
}

@Component({
  selector: 'app-projects',
  templateUrl: './projects.component.html',
  styleUrls: ['./projects.component.scss']
})
export class ProjectsComponent implements OnInit {
  projects: Project[] = [
    { id: 1, title: "E-Commerce Platform", isFavorite: true, isLoading: false, isMapped: false },
    { id: 2, title: "AI Chat Assistant", isFavorite: true, isLoading: false, isMapped: false },
    { id: 3, title: "Task Management App", isFavorite: true, isLoading: false, isMapped: false },
    { id: 4, title: "Weather Dashboard", isFavorite: false, isLoading: false, isMapped: false },
    { id: 5, title: "Portfolio Website", isFavorite: false, isLoading: false, isMapped: false },
    { id: 6, title: "Social Media Analytics", isFavorite: false, isLoading: false, isMapped: false },
    { id: 7, title: "Blog Platform", isFavorite: false, isLoading: false, isMapped: false },
    { id: 8, title: "Video Streaming App", isFavorite: false, isLoading: false, isMapped: false },
    { id: 9, title: "Recipe Finder", isFavorite: false, isLoading: false, isMapped: false },
    { id: 10, title: "Fitness Tracker", isFavorite: false, isLoading: false, isMapped: false },
    { id: 11, title: "Music Player", isFavorite: false, isLoading: false, isMapped: false },
    { id: 12, title: "Chat Application", isFavorite: false, isLoading: false, isMapped: false }
  ];

  filteredProjects: Project[] = [];
  searchTerm: string = '';
  isDarkMode: boolean = true;
  mappedProjectId: number | null = null;
  viewMode: 'minimized' | 'default' | 'fullwidth' = 'default';

  ngOnInit(): void {
    this.filteredProjects = [...this.projects];
    this.loadThemePreference();
  }

  loadThemePreference(): void {
    const savedTheme = localStorage.getItem('sdlc-projects-theme');
    this.isDarkMode = savedTheme !== 'light';
    this.applyTheme();
  }

  toggleTheme(): void {
    this.isDarkMode = !this.isDarkMode;
    this.applyTheme();
    localStorage.setItem('sdlc-projects-theme', this.isDarkMode ? 'dark' : 'light');
  }

  applyTheme(): void {
    document.body.setAttribute('data-theme', this.isDarkMode ? 'dark' : 'light');
  }

  filterProjects(): void {
    const term = this.searchTerm.toLowerCase();
    this.filteredProjects = this.projects.filter(project =>
      project.title.toLowerCase().includes(term) ||
      String(project.id).includes(term) ||
      `#${this.formatId(project.id)}`.includes(term)
    );
  }

  toggleFavorite(project: Project, event: Event): void {
    event.stopPropagation();
    if (!project.isLoading) {
      project.isLoading = true;

      setTimeout(() => {
        project.isFavorite = !project.isFavorite;
        project.isLoading = false;
        this.filterProjects();
      }, 10000);
    }
  }

  manageProject(projectId: number, event: Event): void {
    event.stopPropagation();

    // Unmap all projects first
    this.projects.forEach(p => p.isMapped = false);

    // Map the selected project
    const project = this.projects.find(p => p.id === projectId);
    if (project) {
      project.isMapped = true;
      this.mappedProjectId = projectId;

      // Show success message or notification
      alert(`Project #${this.formatId(projectId)} - "${project.title}" has been mapped for task creation.\n\nAll new tasks will be automatically associated with this project.`);
    }
  }

  setViewMode(mode: 'minimized' | 'default' | 'fullwidth'): void {
    this.viewMode = mode;
  }

  formatId(id: number): string {
    return String(id).padStart(3, '0');
  }

  get favoriteProjects(): Project[] {
    return this.filteredProjects.filter(p => p.isFavorite);
  }

  get mappedProject(): Project | null {
    return this.projects.find(p => p.isMapped) || null;
  }
}







<div class="container">
    <div class="header">
        <div class="header-content">
            <div class="header-text">
                <h1>Task-Project Mapping</h1>
                <p class="subtitle">Associate tasks with projects to maintain organized workflows</p>

                <div class="info-card">
                    <div class="info-card-header">
                        <svg class="info-header-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                            stroke-width="2">
                            <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z" />
                        </svg>
                        <span class="info-header-title">Available Actions</span>
                    </div>

                    <div class="action-cards">
                        <div class="action-card" [class.disabled]="!mappedProject">
                            <div class="action-icon crs">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                    <polyline points="14 2 14 8 20 8"></polyline>
                                    <line x1="12" y1="18" x2="12" y2="12"></line>
                                    <line x1="9" y1="15" x2="15" y2="15"></line>
                                </svg>
                            </div>
                            <div class="action-content">
                                <h4>Create CRS</h4>
                                <p>Customer Requirements Specification</p>
                            </div>
                        </div>

                        <div class="action-card" [class.disabled]="!mappedProject">
                            <div class="action-icon srs">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                    <polyline points="14 2 14 8 20 8"></polyline>
                                    <line x1="16" y1="13" x2="8" y2="13"></line>
                                    <line x1="16" y1="17" x2="8" y2="17"></line>
                                    <polyline points="10 9 9 9 8 9"></polyline>
                                </svg>
                            </div>
                            <div class="action-content">
                                <h4>Create SRS</h4>
                                <p>System Requirements Specification</p>
                            </div>
                        </div>

                        <div class="action-card" [class.disabled]="!mappedProject">
                            <div class="action-icon task">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M9 11l3 3L22 4"></path>
                                    <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
                                </svg>
                            </div>
                            <div class="action-content">
                                <h4>Create Task</h4>
                                <p>Development or management task</p>
                            </div>
                        </div>

                        <div class="action-card" [class.disabled]="!mappedProject">
                            <div class="action-icon testcase">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="9 11 12 14 22 4"></polyline>
                                    <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
                                </svg>
                            </div>
                            <div class="action-content">
                                <h4>Create Test Case</h4>
                                <p>Quality assurance test scenario</p>
                            </div>
                        </div>
                    </div>

                    <div class="mapping-status" *ngIf="mappedProject">
                        <svg class="status-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                            <polyline points="22 4 12 14.01 9 11.01"></polyline>
                        </svg>
                        <div class="status-content">
                            <span class="status-label">Mapped to:</span>
                            <span class="status-project">#{{ formatId(mappedProject.id) }} - {{ mappedProject.title
                                }}</span>
                        </div>
                    </div>

                    <div class="mapping-hint" *ngIf="!mappedProject">
                        <svg class="hint-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="12" cy="12" r="10"></circle>
                            <line x1="12" y1="16" x2="12" y2="12"></line>
                            <line x1="12" y1="8" x2="12.01" y2="8"></line>
                        </svg>
                        <span>Map a project below to enable these actions</span>
                    </div>
                </div>
            </div>
            <div class="header-controls">
                <button class="control-btn default" *ngIf="viewMode === 'minimized'" (click)="setViewMode('default')"
                    title="Default View">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="18" height="18" rx="2"></rect>
                        <line x1="9" y1="3" x2="9" y2="21"></line>
                    </svg>
                </button>
                <button class="control-btn fullwidth" *ngIf="viewMode === 'minimized'"
                    (click)="setViewMode('fullwidth')" title="Full Width">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="18" height="18" rx="2"></rect>
                    </svg>
                </button>

                <button class="control-btn minimize" *ngIf="viewMode === 'default'" (click)="setViewMode('minimized')"
                    title="Minimize">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="4 14 10 14 10 20"></polyline>
                        <polyline points="20 10 14 10 14 4"></polyline>
                        <line x1="14" y1="10" x2="21" y2="3"></line>
                        <line x1="3" y1="21" x2="10" y2="14"></line>
                    </svg>
                </button>
                <button class="control-btn fullwidth" *ngIf="viewMode === 'default'" (click)="setViewMode('fullwidth')"
                    title="Full Width">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="18" height="18" rx="2"></rect>
                    </svg>
                </button>

                <button class="control-btn minimize" *ngIf="viewMode === 'fullwidth'" (click)="setViewMode('minimized')"
                    title="Minimize">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="4 14 10 14 10 20"></polyline>
                        <polyline points="20 10 14 10 14 4"></polyline>
                        <line x1="14" y1="10" x2="21" y2="3"></line>
                        <line x1="3" y1="21" x2="10" y2="14"></line>
                    </svg>
                </button>
                <button class="control-btn default" *ngIf="viewMode === 'fullwidth'" (click)="setViewMode('default')"
                    title="Default View">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="18" height="18" rx="2"></rect>
                        <line x1="9" y1="3" x2="9" y2="21"></line>
                    </svg>
                </button>

                <button class="theme-toggle" (click)="toggleTheme()"
                    [title]="isDarkMode ? 'Switch to light mode' : 'Switch to dark mode'">
                    <svg *ngIf="isDarkMode" class="theme-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                        stroke-width="2">
                        <circle cx="12" cy="12" r="5"></circle>
                        <line x1="12" y1="1" x2="12" y2="3"></line>
                        <line x1="12" y1="21" x2="12" y2="23"></line>
                        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
                        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
                        <line x1="1" y1="12" x2="3" y2="12"></line>
                        <line x1="21" y1="12" x2="23" y2="12"></line>
                        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
                        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
                    </svg>
                    <svg *ngIf="!isDarkMode" class="theme-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                        stroke-width="2">
                        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <div class="search-container">
        <div class="search-wrapper">
            <svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.35-4.35"></path>
            </svg>
            <input type="text" class="search-input" [(ngModel)]="searchTerm" (input)="filterProjects()"
                placeholder="Search projects by name or ID...">
        </div>
    </div>

    <div class="section">
        <h2 class="section-title">
            <svg class="section-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polygon
                    points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"
                    fill="#764ba2" stroke="#667eea" />
            </svg>
            Favorite Projects
            <span class="section-badge" *ngIf="favoriteProjects.length > 0">{{ favoriteProjects.length }}</span>
        </h2>
        <div class="projects-grid" *ngIf="favoriteProjects.length > 0">
            <div class="project-card" [class.mapped]="project.isMapped" *ngFor="let project of favoriteProjects">
                <div class="project-header">
                    <div class="project-info">
                        <div class="project-id">#{{ formatId(project.id) }}</div>
                        <div class="project-title">{{ project.title }}</div>
                    </div>
                    <div class="project-actions">
                        <button class="icon-btn" [class.mapped-btn]="project.isMapped"
                            (click)="manageProject(project.id, $event)"
                            [title]="project.isMapped ? 'Currently mapped for tasks' : 'Map project to tasks'">
                            <svg *ngIf="!project.isMapped" viewBox="0 0 24 24" fill="none" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round">
                                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" />
                                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" />
                            </svg>
                            <svg *ngIf="project.isMapped" viewBox="0 0 24 24" fill="none" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round">
                                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                <polyline points="22 4 12 14.01 9 11.01"></polyline>
                            </svg>
                        </button>
                        <div *ngIf="project.isLoading" class="spinner"></div>
                        <button *ngIf="!project.isLoading" class="favorite-btn" [class.active]="project.isFavorite"
                            (click)="toggleFavorite(project, $event)"
                            [title]="project.isFavorite ? 'Remove from favorites' : 'Add to favorites'">
                            {{ project.isFavorite ? '★' : '☆' }}
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="empty-state" *ngIf="favoriteProjects.length === 0">
            <svg class="empty-state-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path
                    d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" />
            </svg>
            <div class="empty-state-text">No favorite projects yet</div>
            <div class="empty-state-subtext">Star projects below to use them for task mapping</div>
        </div>
    </div>

    <div class="section">
        <h2 class="section-title">
            <svg class="section-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z" fill="url(#gradient1)" />
                <polyline points="13 2 13 9 20 9" fill="url(#gradient2)" />
                <defs>
                    <linearGradient id="gradient1" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
                    </linearGradient>
                    <linearGradient id="gradient2" x1="0%" y1="0%" x2="100%" y2="100%">
                        <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
                        <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
                    </linearGradient>
                </defs>
            </svg>
            All Available Projects
            <span class="section-badge">{{ filteredProjects.length }}</span>
        </h2>
        <div class="projects-grid">
            <div class="project-card" [class.mapped]="project.isMapped" *ngFor="let project of filteredProjects">
                <div class="project-header">
                    <div class="project-info">
                        <div class="project-id">#{{ formatId(project.id) }}</div>
                        <div class="project-title">{{ project.title }}</div>
                    </div>
                    <div class="project-actions">
                        <button class="icon-btn" [class.mapped-btn]="project.isMapped"
                            (click)="manageProject(project.id, $event)"
                            [title]="project.isMapped ? 'Currently mapped for tasks' : 'Map project to tasks'">
                            <svg *ngIf="!project.isMapped" viewBox="0 0 24 24" fill="none" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round">
                                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" />
                                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" />
                            </svg>
                            <svg *ngIf="project.isMapped" viewBox="0 0 24 24" fill="none" stroke-width="2"
                                stroke-linecap="round" stroke-linejoin="round">
                                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                                <polyline points="22 4 12 14.01 9 11.01"></polyline>
                            </svg>
                        </button>
                        <div *ngIf="project.isLoading" class="spinner"></div>
                        <button *ngIf="!project.isLoading" class="favorite-btn" [class.active]="project.isFavorite"
                            (click)="toggleFavorite(project, $event)"
                            [title]="project.isFavorite ? 'Remove from favorites' : 'Add to favorites'">
                            {{ project.isFavorite ? '★' : '☆' }}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>












:host {
    display: block;
    background-color: var(--sdlc-projects-bg-primary);
    color: var(--sdlc-projects-text-primary);
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    padding: 3.75rem 1.25rem;
    min-height: 100vh;
    transition: background-color 0.3s ease, color 0.3s ease;
}

.container {
    max-width: 1400px;
    margin: 0 auto;
}

.header {
    margin-bottom: 3.125rem;
}

.header-content {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1rem;
}

.header-text {
    flex: 1;
}

.header-controls {
    display: flex;
    gap: 0.5rem;
    align-items: flex-start;
    flex-shrink: 0;
}

.control-btn {
    width: 2rem;
    height: 2rem;
    background: var(--sdlc-projects-bg-secondary);
    border: 1px solid var(--sdlc-projects-border-primary);
    border-radius: 0.5rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    padding: 0;
}

.control-btn svg {
    width: 1rem;
    height: 1rem;
    stroke: var(--sdlc-projects-text-secondary);
    transition: all 0.2s ease;
}

.control-btn:hover {
    background: rgba(102, 126, 234, 0.1);
    border-color: var(--sdlc-projects-accent);
}

.control-btn:hover svg {
    stroke: var(--sdlc-projects-accent);
}

h1 {
    font-size: 1.5rem;
    margin-bottom: 0.375rem;
    background: linear-gradient(135deg, var(--sdlc-projects-gradient-start) 0%, var(--sdlc-projects-gradient-end) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    font-weight: 700;
    letter-spacing: -0.02em;
}

.subtitle {
    color: var(--sdlc-projects-text-secondary);
    font-size: 0.875rem;
    font-weight: 400;
    margin-bottom: 1.25rem;
}

.info-card {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.08) 0%, rgba(118, 75, 162, 0.08) 100%);
    border: 1px solid var(--sdlc-projects-border-primary);
    border-radius: 0.875rem;
    padding: 1.25rem;
    max-width: 52rem;
}

.info-card-header {
    display: flex;
    align-items: center;
    gap: 0.625rem;
    margin-bottom: 1.25rem;
}

.info-header-icon {
    width: 1.25rem;
    height: 1.25rem;
    stroke: var(--sdlc-projects-accent);
    flex-shrink: 0;
}

.info-header-title {
    font-size: 0.9375rem;
    font-weight: 600;
    color: var(--sdlc-projects-text-primary);
    letter-spacing: -0.01em;
}

.info-card-content {
    display: flex;
    flex-direction: column;
    gap: 0.875rem;
}

.info-step {
    display: flex;
    align-items: flex-start;
    gap: 0.875rem;
}

.step-number {
    width: 1.75rem;
    height: 1.75rem;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--sdlc-projects-gradient-start) 0%, var(--sdlc-projects-gradient-end) 100%);
    color: #ffffff;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: 700;
    flex-shrink: 0;
}

.step-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    flex: 1;
}

.step-content strong {
    font-size: 0.8125rem;
    color: var(--sdlc-projects-text-primary);
    font-weight: 600;
    letter-spacing: -0.01em;
}

.step-content span {
    font-size: 0.75rem;
    color: var(--sdlc-projects-text-secondary);
    line-height: 1.5;
}

.mapped-indicator {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.12) 0%, rgba(118, 75, 162, 0.12) 100%);
    border: 1.5px solid var(--sdlc-projects-accent);
    border-radius: 0.875rem;
    padding: 1.25rem;
    max-width: 52rem;
    animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.mapped-header {
    display: flex;
    align-items: flex-start;
    gap: 0.875rem;
    margin-bottom: 0.75rem;
}

.mapped-icon {
    width: 1.5rem;
    height: 1.5rem;
    stroke: var(--sdlc-projects-accent);
    flex-shrink: 0;
    margin-top: 0.125rem;
}

.mapped-content {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    flex: 1;
}

.mapped-title {
    font-size: 0.9375rem;
    font-weight: 600;
    color: var(--sdlc-projects-text-primary);
    letter-spacing: -0.01em;
}

.mapped-project {
    font-size: 0.8125rem;
    font-weight: 600;
    color: var(--sdlc-projects-accent);
}

.mapped-description {
    font-size: 0.75rem;
    color: var(--sdlc-projects-text-secondary);
    line-height: 1.5;
    margin: 0 0 1.25rem 0;
}

.action-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(12rem, 1fr));
    gap: 0.75rem;
    margin-top: 1rem;
}

.action-card {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.875rem;
    background: var(--sdlc-projects-bg-secondary);
    border: 1px solid var(--sdlc-projects-border-primary);
    border-radius: 0.625rem;
    transition: all 0.2s ease;
    cursor: pointer;
}

.action-card:hover {
    border-color: var(--sdlc-projects-accent);
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
}

.action-card.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
}

.action-card.disabled:hover {
    transform: none;
    box-shadow: none;
    border-color: var(--sdlc-projects-border-primary);
}

.action-icon {
    width: 2.25rem;
    height: 2.25rem;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    transition: all 0.2s ease;
}

.action-icon svg {
    width: 1.125rem;
    height: 1.125rem;
    stroke-width: 2;
}

.action-icon.crs {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(37, 99, 235, 0.1) 100%);
}

.action-icon.crs svg {
    stroke: #3b82f6;
}

.action-card:hover .action-icon.crs {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2) 0%, rgba(37, 99, 235, 0.2) 100%);
}

.action-icon.srs {
    background: linear-gradient(135deg, rgba(139, 92, 246, 0.1) 0%, rgba(124, 58, 237, 0.1) 100%);
}

.action-icon.srs svg {
    stroke: #8b5cf6;
}

.action-card:hover .action-icon.srs {
    background: linear-gradient(135deg, rgba(139, 92, 246, 0.2) 0%, rgba(124, 58, 237, 0.2) 100%);
}

.action-icon.task {
    background: linear-gradient(135deg, rgba(16, 185, 129, 0.1) 0%, rgba(5, 150, 105, 0.1) 100%);
}

.action-icon.task svg {
    stroke: #10b981;
}

.action-card:hover .action-icon.task {
    background: linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(5, 150, 105, 0.2) 100%);
}

.action-icon.testcase {
    background: linear-gradient(135deg, rgba(249, 115, 22, 0.1) 0%, rgba(234, 88, 12, 0.1) 100%);
}

.action-icon.testcase svg {
    stroke: #f97316;
}

.action-card:hover .action-icon.testcase {
    background: linear-gradient(135deg, rgba(249, 115, 22, 0.2) 0%, rgba(234, 88, 12, 0.2) 100%);
}

.action-content {
    flex: 1;
    min-width: 0;
}

.action-content h4 {
    font-size: 0.8125rem;
    font-weight: 600;
    color: var(--sdlc-projects-text-primary);
    margin: 0 0 0.25rem 0;
    letter-spacing: -0.01em;
}

.action-content p {
    font-size: 0.6875rem;
    color: var(--sdlc-projects-text-secondary);
    margin: 0;
    line-height: 1.4;
}

.mapping-status {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-top: 1.25rem;
    padding: 0.875rem;
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
    border: 1px solid var(--sdlc-projects-accent);
    border-radius: 0.625rem;
}

.status-icon {
    width: 1.25rem;
    height: 1.25rem;
    stroke: var(--sdlc-projects-accent);
    flex-shrink: 0;
}

.status-content {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;
    flex: 1;
}

.status-label {
    font-size: 0.6875rem;
    color: var(--sdlc-projects-text-secondary);
    font-weight: 500;
}

.status-project {
    font-size: 0.8125rem;
    font-weight: 600;
    color: var(--sdlc-projects-accent);
}

.mapping-hint {
    display: flex;
    align-items: center;
    gap: 0.625rem;
    margin-top: 1.25rem;
    padding: 0.875rem;
    background: var(--sdlc-projects-bg-secondary);
    border: 1px dashed var(--sdlc-projects-border-primary);
    border-radius: 0.625rem;
}

.hint-icon {
    width: 1rem;
    height: 1rem;
    stroke: var(--sdlc-projects-text-secondary);
    flex-shrink: 0;
}

.mapping-hint span {
    font-size: 0.75rem;
    color: var(--sdlc-projects-text-secondary);
    line-height: 1.5;
}

.theme-toggle {
    width: 2rem;
    height: 2rem;
    background: var(--sdlc-projects-bg-secondary);
    border: 1px solid var(--sdlc-projects-border-primary);
    border-radius: 0.5rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    padding: 0;
}

.theme-toggle:hover {
    background: rgba(102, 126, 234, 0.1);
    border-color: var(--sdlc-projects-accent);
}

.theme-icon {
    width: 1rem;
    height: 1rem;
    stroke: var(--sdlc-projects-accent);
}

.search-container {
    margin-bottom: 2.25rem;
    position: relative;
}

.search-wrapper {
    position: relative;
    max-width: 32rem;
}

.search-icon {
    position: absolute;
    left: 0.875rem;
    top: 50%;
    transform: translateY(-50%);
    width: 1rem;
    height: 1rem;
    opacity: 0.4;
    stroke: var(--sdlc-projects-text-primary);
}

.search-input {
    width: 100%;
    padding: 0.75rem 0.875rem 0.75rem 2.5rem;
    background: var(--sdlc-projects-bg-secondary);
    border: 1px solid var(--sdlc-projects-border-primary);
    border-radius: 0.75rem;
    color: var(--sdlc-projects-text-primary);
    font-size: 0.8125rem;
    transition: all 0.3s ease;
}

.search-input:focus {
    outline: none;
    border-color: var(--sdlc-projects-accent);
    box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
}

.search-input::placeholder {
    color: var(--sdlc-projects-text-tertiary);
}

.section {
    margin-bottom: 2.75rem;
}

.section-title {
    font-size: 1rem;
    margin-bottom: 1.125rem;
    color: var(--sdlc-projects-text-primary);
    display: flex;
    align-items: center;
    gap: 0.625rem;
    font-weight: 600;
    letter-spacing: -0.01em;
}

.section-icon {
    width: 1.125rem;
    height: 1.125rem;
}

.section-badge {
    background: linear-gradient(135deg, var(--sdlc-projects-gradient-start) 0%, var(--sdlc-projects-gradient-end) 100%);
    color: #ffffff;
    font-size: 0.6875rem;
    font-weight: 700;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    margin-left: 0.375rem;
}

.projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(13rem, 1fr));
    gap: 1rem;
}

.project-card {
    background: var(--sdlc-projects-bg-secondary);
    border-radius: 1rem;
    padding: 0;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    border: 1px solid var(--sdlc-projects-border-primary);
    cursor: pointer;
    position: relative;
    overflow: hidden;
    display: flex;
    flex-direction: column;
}

.project-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.03) 0%, rgba(118, 75, 162, 0.03) 100%);
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 0;
}

.project-card:hover::before {
    opacity: 1;
}

.project-card:hover {
    border-color: rgba(102, 126, 234, 0.3);
    transform: translateY(-2px);
}

.project-card.mapped {
    border-color: var(--sdlc-projects-accent);
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
}

.project-card.mapped::before {
    opacity: 1;
}

.project-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 0.5rem;
    padding: 1rem;
    position: relative;
    z-index: 1;
}

.project-info {
    flex: 1;
    min-width: 0;
}

.project-actions {
    display: flex;
    gap: 0.25rem;
    align-items: flex-start;
    flex-shrink: 0;
}

.project-id {
    display: inline-flex;
    align-items: center;
    font-size: 0.6875rem;
    font-weight: 700;
    color: var(--sdlc-projects-accent);
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    margin-bottom: 0.5rem;
    letter-spacing: 0.05em;
    width: fit-content;
}

.project-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--sdlc-projects-text-primary);
    line-height: 1.4;
    word-wrap: break-word;
    overflow-wrap: break-word;
    letter-spacing: -0.01em;
}

.icon-btn {
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0.375rem;
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    position: relative;
}

.icon-btn svg {
    width: 0.875rem;
    height: 0.875rem;
    stroke: var(--sdlc-projects-text-secondary);
    transition: all 0.2s ease;
}

.icon-btn:hover {
    background: rgba(102, 126, 234, 0.1);
}

.icon-btn:hover svg {
    stroke: var(--sdlc-projects-accent);
}

.icon-btn:active {
    transform: scale(0.95);
}

.icon-btn.mapped-btn {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.15) 0%, rgba(118, 75, 162, 0.15) 100%);
}

.icon-btn.mapped-btn svg {
    stroke: var(--sdlc-projects-accent);
}

.icon-btn.mapped-btn:hover {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.2) 0%, rgba(118, 75, 162, 0.2) 100%);
}

.favorite-btn {
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0.375rem;
    border-radius: 0.5rem;
    font-size: 1.125rem;
    transition: all 0.2s ease;
    line-height: 1;
    color: var(--sdlc-projects-text-muted);
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
}

.favorite-btn:hover {
    background: rgba(102, 126, 234, 0.1);
    color: var(--sdlc-projects-accent);
}

.favorite-btn.active {
    color: #fbbf24;
}

.favorite-btn.active:hover {
    color: #f59e0b;
    background: rgba(251, 191, 36, 0.1);
}

.favorite-btn:active {
    transform: scale(0.95);
}

.favorite-btn.loading {
    pointer-events: none;
}

.spinner {
    width: 1.125rem;
    height: 1.125rem;
    border: 2px solid var(--sdlc-projects-spinner-border);
    border-top-color: var(--sdlc-projects-accent);
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

.empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: var(--sdlc-projects-text-tertiary);
    background: var(--sdlc-projects-bg-secondary);
    border-radius: 0.875rem;
    border: 1px dashed var(--sdlc-projects-border-primary);
}

.empty-state-icon {
    width: 3.5rem;
    height: 3.5rem;
    margin: 0 auto 0.875rem;
    opacity: var(--sdlc-projects-empty-icon-opacity);
    stroke: var(--sdlc-projects-text-tertiary);
}

.empty-state-text {
    font-size: 0.9375rem;
    color: var(--sdlc-projects-text-primary);
    font-weight: 600;
    margin-bottom: 0.375rem;
}

.empty-state-subtext {
    font-size: 0.8125rem;
    color: var(--sdlc-projects-text-secondary);
}

@media (max-width: 768px) {
    :host {
        padding: 2.5rem 1rem;
    }

    h1 {
        font-size: 1.5rem;
    }

    .header-content {
        flex-direction: column;
        align-items: stretch;
    }

    .header-controls {
        align-self: flex-end;
        position: absolute;
        top: 2.5rem;
        right: 1rem;
    }

    .info-card {
        margin-top: 1rem;
    }

    .mapped-indicator {
        margin-top: 1rem;
    }

    .action-cards {
        grid-template-columns: 1fr;
        gap: 0.625rem;
    }

    .info-step {
        flex-direction: row;
    }

    .step-content {
        flex: 1;
    }

    .projects-grid {
        grid-template-columns: 1fr;
        gap: 1.25rem;
    }

    .project-card {
        padding: 1.25rem;
    }

    .project-title {
        font-size: 1rem;
    }
}



/* Dark Mode Variables */
:host ::ng-deep body[data-theme="dark"] {
  --sdlc-projects-bg-primary: #111113;
  --sdlc-projects-bg-secondary: #1c1c1f;
  --sdlc-projects-bg-tertiary: #18181b;
  --sdlc-projects-text-primary: #e4e4e7;
  --sdlc-projects-text-secondary: #a1a1aa;
  --sdlc-projects-text-tertiary: #71717a;
  --sdlc-projects-text-muted: #52525b;
  --sdlc-projects-border-primary: #2a2a2d;
  --sdlc-projects-border-hover: rgba(102, 126, 234, 0.4);
  --sdlc-projects-shadow: rgba(102, 126, 234, 0.18);
  --sdlc-projects-gradient-start: #667eea;
  --sdlc-projects-gradient-end: #764ba2;
  --sdlc-projects-accent: #667eea;
  --sdlc-projects-accent-hover: #764ba2;
  --sdlc-projects-spinner-border: #2a2a2d;
  --sdlc-projects-empty-icon-opacity: 0.25;
}

/* Light Mode Variables */
:host ::ng-deep body[data-theme="light"] {
  --sdlc-projects-bg-primary: #ffffff;
  --sdlc-projects-bg-secondary: #f8f9fa;
  --sdlc-projects-bg-tertiary: #f1f3f5;
  --sdlc-projects-text-primary: #212529;
  --sdlc-projects-text-secondary: #495057;
  --sdlc-projects-text-tertiary: #6c757d;
  --sdlc-projects-text-muted: #adb5bd;
  --sdlc-projects-border-primary: #dee2e6;
  --sdlc-projects-border-hover: rgba(102, 126, 234, 0.6);
  --sdlc-projects-shadow: rgba(102, 126, 234, 0.25);
  --sdlc-projects-gradient-start: #667eea;
  --sdlc-projects-gradient-end: #764ba2;
  --sdlc-projects-accent: #667eea;
  --sdlc-projects-accent-hover: #764ba2;
  --sdlc-projects-spinner-border: #dee2e6;
  --sdlc-projects-empty-icon-opacity: 0.15;
}
