import React, { useState } from 'react';
import { Dropdown } from 'primereact/dropdown';
import styles from './ConfigDetail.module.css';

const ConfigDetail = ({ row, onBack }) => {
  const [rows, setRows] = useState([{ question: '', groundTruth: '', answer: '', accuracy: '' }]);
  const [params, setParams] = useState({
    source: null,
    embeddingModel: null,
    llmModel: null,
  });

  const addRow = () => {
    setRows([...rows, { question: '', groundTruth: '', answer: '', accuracy: '' }]);
  };

  const updateRow = (index, field, value) => {
    const updated = [...rows];
    updated[index][field] = value;
    setRows(updated);
  };

  const deleteRow = (index) => {
    const updated = [...rows];
    updated.splice(index, 1);
    setRows(updated);
  };

  const handleSubmit = () => {
    // Validation
    const incompleteRow = rows.some(row => !row.question || !row.groundTruth);
    const incompleteParams = !params.source || !params.embeddingModel || !params.llmModel;

    if (incompleteParams) {
      alert('Please select all 3 parameter configurations.');
      return;
    }

    if (incompleteRow) {
      alert('Please fill in Question and Ground Truth for all rows.');
      return;
    }

    // Simulated API call
    const payload = {
      ground_truth: rows.map(row => row.groundTruth),
      question: rows.map(row => row.question),
    };

    console.log('Sending request to API:', payload);

    // Simulate response: update each row's answer and accuracy
    const updated = rows.map(row => ({
      ...row,
      answer: `Answer for "${row.question}"`,
      accuracy: (Math.random() * 100).toFixed(2),
    }));

    setRows(updated);
  };

  return (
    <div className={styles.container}>
      <button className={styles.backButton} onClick={onBack}>
        <i className="pi pi-arrow-left" style={{ marginRight: '0.5rem' }}></i>
        Back to Table
      </button>

      {/* Parameters Section */}
      <div className={styles.parameters}>
        <Dropdown
          value={params.source}
          options={['Database', 'Excel', 'Logs', 'Document']}
          onChange={(e) => setParams({ ...params, source: e.value })}
          placeholder="Select Source"
          className={styles.dropdown}
        />
        <Dropdown
          value={params.embeddingModel}
          options={['miniLM']}
          onChange={(e) => setParams({ ...params, embeddingModel: e.value })}
          placeholder="Select Embedding Model"
          className={styles.dropdown}
        />
        <Dropdown
          value={params.llmModel}
          options={['llama3', 'llama4', 'llama5']}
          onChange={(e) => setParams({ ...params, llmModel: e.value })}
          placeholder="Select LLM Model"
          className={styles.dropdown}
        />
      </div>

      <div className={styles.tableContainer}>
        {/* Table Header */}
        <div className={styles.headerRow}>
          <div>Question</div>
          <div>Ground Truth</div>
          <div>Answer</div>
          <div>Accuracy Score</div>
          <div>Actions</div>
        </div>

        {/* Scrollable Rows */}
        <div className={styles.scrollArea}>
          {rows.map((rowData, index) => (
            <div key={index} className={styles.inputRow}>
              <input
                value={rowData.question}
                onChange={(e) => updateRow(index, 'question', e.target.value)}
                placeholder="Question"
              />
              <input
                value={rowData.groundTruth}
                onChange={(e) => updateRow(index, 'groundTruth', e.target.value)}
                placeholder="Ground Truth"
              />
              <input
                value={rowData.answer}
                placeholder="Answer"
                readOnly
              />
              <input
                value={rowData.accuracy}
                placeholder="Accuracy"
                readOnly
              />
              <button onClick={() => deleteRow(index)} className={styles.deleteButton}>
                <i className="pi pi-trash"></i>
              </button>
            </div>
          ))}
        </div>

        {/* Footer */}
        <div className={styles.footer}>
          <button className={styles.addButton} onClick={addRow}>
            + New Row
          </button>
          <button className={styles.submitButton} onClick={handleSubmit}>
            Submit
          </button>
        </div>
      </div>
    </div>
  );
};

export default ConfigDetail;











.parameters {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
  margin-bottom: 1rem;
}

.dropdown {
  min-width: 200px;
}

