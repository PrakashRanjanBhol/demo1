import { Component, Input, OnChanges, SimpleChanges, ViewChild, ElementRef, AfterViewInit, OnInit } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';

@Component({
  selector: 'app-streaming-code-preview',
  template: `
    <div class="code-preview-container">
      <!-- Regular Content Section -->
      <div class="content-section">
        <div class="regular-content">
          <h3>LLM Response Stream</h3>
          <div class="content-display" [innerHTML]="processedContent"></div>
        </div>
        
        <!-- Code Input Section -->
        <div class="code-inputs">
          <div class="input-group">
            <label>HTML Code:</label>
            <textarea 
              [value]="htmlCode" 
              readonly
              placeholder="HTML code will appear here as it streams..."
              class="code-textarea html-code">
            </textarea>
          </div>
          
          <div class="input-group">
            <label>CSS Code:</label>
            <textarea 
              [value]="cssCode" 
              readonly
              placeholder="CSS code will appear here as it streams..."
              class="code-textarea css-code">
            </textarea>
          </div>
          
          <div class="input-group">
            <label>JavaScript Code:</label>
            <textarea 
              [value]="jsCode" 
              readonly
              placeholder="JavaScript code will appear here as it streams..."
              class="code-textarea js-code">
            </textarea>
          </div>
        </div>
      </div>
      
      <!-- Preview Section -->
      <div class="preview-section">
        <div class="preview-header">
          <h3>Live Preview</h3>
          <div class="header-controls">
            <span class="status-indicator" [class.streaming]="isStreaming">
              {{ isStreaming ? 'Streaming...' : 'Ready' }}
            </span>
            <button (click)="refreshPreview()" class="refresh-btn">Refresh</button>
            <button (click)="clearAll()" class="clear-btn">Clear</button>
          </div>
        </div>
        <div class="preview-container">
          <iframe 
            #previewFrame
            class="preview-iframe"
            sandbox="allow-scripts allow-same-origin">
          </iframe>
        </div>
      </div>
    </div>
  `,
  styles: [`
    .code-preview-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      height: 100vh;
      padding: 20px;
      font-family: Arial, sans-serif;
    }
    
    .content-section {
      display: flex;
      flex-direction: column;
      gap: 20px;
      overflow: hidden;
    }
    
    .regular-content {
      flex: 1;
      border: 1px solid #ddd;
      border-radius: 8px;
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }
    
    .regular-content h3 {
      margin: 0;
      padding: 15px;
      background: #f8f9fa;
      border-bottom: 1px solid #ddd;
      color: #333;
    }
    
    .content-display {
      flex: 1;
      padding: 15px;
      overflow-y: auto;
      background: white;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
    }
    
    .content-display h1, .content-display h2, .content-display h3 {
      color: #333;
      margin-top: 20px;
      margin-bottom: 10px;
    }
    
    .content-display p {
      margin-bottom: 15px;
      color: #555;
    }
    
    .content-display code {
      background: #f4f4f4;
      padding: 2px 4px;
      border-radius: 3px;
      font-family: 'Monaco', monospace;
      font-size: 0.9em;
    }
    
    .code-inputs {
      display: grid;
      grid-template-columns: 1fr;
      gap: 15px;
      max-height: 60vh;
    }
    
    .input-group {
      display: flex;
      flex-direction: column;
      min-height: 0;
    }
    
    .input-group label {
      font-weight: bold;
      margin-bottom: 5px;
      color: #333;
      font-size: 14px;
    }
    
    .code-textarea {
      flex: 1;
      min-height: 120px;
      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
      font-size: 12px;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      resize: vertical;
      background: #f8f9fa;
      color: #333;
    }
    
    .html-code {
      border-left: 4px solid #e34c26;
    }
    
    .css-code {
      border-left: 4px solid #1572b6;
    }
    
    .js-code {
      border-left: 4px solid #f7df1e;
    }
    
    .code-textarea:focus {
      outline: none;
      border-color: #007bff;
      box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
    }
    
    .preview-section {
      display: flex;
      flex-direction: column;
      min-height: 0;
    }
    
    .preview-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
    }
    
    .preview-header h3 {
      margin: 0;
      color: #333;
    }
    
    .header-controls {
      display: flex;
      gap: 10px;
      align-items: center;
    }
    
    .status-indicator {
      padding: 6px 12px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: bold;
      background: #28a745;
      color: white;
    }
    
    .status-indicator.streaming {
      background: #ffc107;
      color: #333;
      animation: pulse 1.5s ease-in-out infinite alternate;
    }
    
    @keyframes pulse {
      from { opacity: 0.6; }
      to { opacity: 1; }
    }
    
    .refresh-btn, .clear-btn {
      padding: 8px 16px;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 12px;
    }
    
    .refresh-btn {
      background: #007bff;
    }
    
    .refresh-btn:hover {
      background: #0056b3;
    }
    
    .clear-btn {
      background: #dc3545;
    }
    
    .clear-btn:hover {
      background: #c82333;
    }
    
    .preview-container {
      flex: 1;
      border: 1px solid #ddd;
      border-radius: 8px;
      overflow: hidden;
      min-height: 0;
    }
    
    .preview-iframe {
      width: 100%;
      height: 100%;
      border: none;
      background: white;
    }
    
    @media (max-width: 1200px) {
      .code-preview-container {
        grid-template-columns: 1fr;
        grid-template-rows: 60vh 40vh;
      }
      
      .content-section {
        grid-template-columns: 1fr 1fr;
        display: grid;
      }
    }
    
    @media (max-width: 768px) {
      .content-section {
        grid-template-columns: 1fr;
      }
      
      .code-inputs {
        grid-template-columns: 1fr;
      }
    }
  `]
})
export class StreamingCodePreviewComponent implements OnChanges, AfterViewInit, OnInit {
  @Input() chunk: string = ''; // Input for streaming chunks
  @Input() autoRefresh: boolean = true; // Auto-refresh preview when code changes

  htmlCode: string = '';
  cssCode: string = '';
  jsCode: string = '';
  processedContent: string = '';
  
  private streamBuffer: string = '';
  private debounceTimer: any;
  private currentHtmlBlock: string = '';
  private currentCssBlock: string = '';
  private currentJsBlock: string = '';
  private inCodeBlock: boolean = false;
  private currentCodeType: string = '';
  
  isStreaming: boolean = false;

  @ViewChild('previewFrame') previewFrame!: ElementRef<HTMLIFrameElement>;

  constructor(private sanitizer: DomSanitizer) { }

  ngOnInit() {
    // Initialize empty state
  }

  ngAfterViewInit() {
    this.updatePreview();
  }

  ngOnChanges(changes: SimpleChanges) {
    if (changes['chunk'] && changes['chunk'].currentValue) {
      this.processChunk(changes['chunk'].currentValue);
    }
  }

  private processChunk(newChunk: string) {
    this.isStreaming = true;
    this.streamBuffer += newChunk;
    
    // Clear previous debounce timer
    if (this.debounceTimer) {
      clearTimeout(this.debounceTimer);
    }

    // Process the chunk immediately
    this.parseStreamingContent();

    // Immediately refresh the preview
    if (this.previewFrame) {
      this.updatePreview();
    }

    // Set a debounce timer to stop streaming indicator
    this.debounceTimer = setTimeout(() => {
      this.isStreaming = false;
    }, 500); // Shorter timeout for more responsive indicator
  }

  private parseStreamingContent() {
    let content = this.streamBuffer;
    let processedText = '';
    let position = 0;

    // Reset current code blocks for fresh parsing
    let htmlContent = '';
    let cssContent = '';
    let jsContent = '';

    while (position < content.length) {
      const remainingContent = content.slice(position);
      
      // Check for code block start
      const codeBlockStart = remainingContent.match(/^```(\w+)?\s*\n/);
      if (codeBlockStart && !this.inCodeBlock) {
        // Found start of code block
        this.inCodeBlock = true;
        this.currentCodeType = codeBlockStart[1]?.toLowerCase() || '';
        
        position += codeBlockStart[0].length;
        continue;
      }

      // Check for code block end
      const codeBlockEnd = remainingContent.match(/^```/);
      if (codeBlockEnd && this.inCodeBlock) {
        // Found end of code block
        this.inCodeBlock = false;
        
        // Assign the completed code block
        this.assignCompletedCodeBlock();
        
        position += codeBlockEnd[0].length;
        this.currentCodeType = '';
        continue;
      }

      // If we're in a code block, accumulate the code
      if (this.inCodeBlock) {
        const nextChar = content[position];
        this.addToCurrentCodeBlock(nextChar);
        position++;
      } else {
        // Regular content - add to processed text
        const nextChar = content[position];
        processedText += nextChar;
        position++;
      }
    }

    // Update the processed content (converting newlines to <br> for display)
    this.processedContent = this.formatTextContent(processedText);

    // Update code blocks immediately (even if incomplete)
    this.updateCodeBlocks();
  }

  private addToCurrentCodeBlock(char: string) {
    switch (this.currentCodeType) {
      case 'html':
        this.currentHtmlBlock += char;
        break;
      case 'css':
        this.currentCssBlock += char;
        break;
      case 'javascript':
      case 'js':
        this.currentJsBlock += char;
        break;
      case '':
        // Try to detect language from content
        const allContent = this.currentHtmlBlock + this.currentCssBlock + this.currentJsBlock + char;
        if (this.isHtmlCode(allContent)) {
          this.currentHtmlBlock += char;
        } else if (this.isCssCode(allContent)) {
          this.currentCssBlock += char;
        } else if (this.isJsCode(allContent)) {
          this.currentJsBlock += char;
        } else {
          // Default to HTML if can't detect
          this.currentHtmlBlock += char;
        }
        break;
      default:
        // Handle other language hints
        if (this.currentCodeType.includes('html')) {
          this.currentHtmlBlock += char;
        } else if (this.currentCodeType.includes('css')) {
          this.currentCssBlock += char;
        } else if (this.currentCodeType.includes('js') || this.currentCodeType.includes('javascript')) {
          this.currentJsBlock += char;
        } else {
          this.currentHtmlBlock += char; // Default
        }
        break;
    }
  }

  private assignCompletedCodeBlock() {
    // When a code block is completed, finalize its assignment
    this.updateCodeBlocks();
    
    // Clear the temporary blocks
    this.currentHtmlBlock = '';
    this.currentCssBlock = '';
    this.currentJsBlock = '';
  }

  private updateCodeBlocks() {
    // Update the textarea contents with current code (even if streaming)
    if (this.currentHtmlBlock.trim()) {
      this.htmlCode = this.currentHtmlBlock.trim();
    }
    if (this.currentCssBlock.trim()) {
      this.cssCode = this.currentCssBlock.trim();
    }
    if (this.currentJsBlock.trim()) {
      this.jsCode = this.currentJsBlock.trim();
    }
  }

  private formatTextContent(text: string): string {
    return text
      .replace(/\n/g, '<br>')
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`(.*?)`/g, '<code>$1</code>');
  }

  private isHtmlCode(code: string): boolean {
    const htmlPatterns = [
      /<html/i, /<\/html>/i, /<!doctype/i, /<body/i, /<head/i,
      /<div/i, /<span/i, /<p>/i, /<h[1-6]/i, /<a /i, /<img/i,
      /<button/i, /<input/i, /<form/i, /<ul/i, /<li/i
    ];
    return htmlPatterns.some(pattern => pattern.test(code));
  }

  private isCssCode(code: string): boolean {
    const cssPatterns = [
      /{\s*[\w-]+\s*:/,
      /color\s*:/i, /background/i, /margin/i, /padding/i,
      /font-/i, /border/i, /width\s*:/i, /height\s*:/i,
      /@media/i, /@keyframes/i, /\.[\w-]+\s*{/, /#[\w-]+\s*{/
    ];
    return cssPatterns.some(pattern => pattern.test(code));
  }

  private isJsCode(code: string): boolean {
    const jsPatterns = [
      /function\s+\w+/i, /const\s+\w+/i, /let\s+\w+/i, /var\s+\w+/i,
      /=>\s*{/, /console\./i, /document\./i, /window\./i,
      /addEventListener/i, /querySelector/i, /getElementById/i,
      /if\s*\(/, /for\s*\(/, /while\s*\(/
    ];
    return jsPatterns.some(pattern => pattern.test(code));
  }

  updatePreview() {
    if (!this.previewFrame?.nativeElement) return;

    const consolidatedHtml = this.consolidateCode();
    const iframe = this.previewFrame.nativeElement;

    // Write the consolidated HTML to the iframe
    const doc = iframe.contentDocument || iframe.contentWindow?.document;
    if (doc) {
      doc.open();
      doc.write(consolidatedHtml);
      doc.close();
    }
  }

  refreshPreview() {
    this.updatePreview();
  }

  clearAll() {
    this.streamBuffer = '';
    this.htmlCode = '';
    this.cssCode = '';
    this.jsCode = '';
    this.processedContent = '';
    this.currentHtmlBlock = '';
    this.currentCssBlock = '';
    this.currentJsBlock = '';
    this.inCodeBlock = false;
    this.currentCodeType = '';
    this.isStreaming = false;
    this.updatePreview();
  }

  private consolidateCode(): string {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Preview - Real-time Streaming</title>
    <style>
        /* Reset some default styles */
        body { 
          margin: 0; 
          padding: 20px; 
          font-family: Arial, sans-serif; 
          background: white;
          transition: all 0.2s ease;
        }
        
        /* Streaming indicator styles */
        .streaming-indicator {
          position: fixed;
          top: 10px;
          right: 10px;
          background: ${this.isStreaming ? '#ffc107' : '#28a745'};
          color: ${this.isStreaming ? '#333' : 'white'};
          padding: 5px 10px;
          border-radius: 15px;
          font-size: 12px;
          font-weight: bold;
          z-index: 9999;
          opacity: ${this.isStreaming ? '1' : '0.7'};
          animation: ${this.isStreaming ? 'pulse 1s ease-in-out infinite alternate' : 'none'};
        }
        
        @keyframes pulse {
          from { opacity: 0.6; }
          to { opacity: 1; }
        }
        
        /* User CSS */
        ${this.cssCode}
    </style>
</head>
<body>
    <div class="streaming-indicator">
      ${this.isStreaming ? '🔄 Live Streaming' : '✅ Ready'}
    </div>
    
    ${this.htmlCode}
    
    <script>
        // Enhanced error handling
        window.onerror = function(msg, url, lineNo, columnNo, error) {
            console.error('JS Error:', msg);
            const errorDiv = document.createElement('div');
            errorDiv.style.cssText = 'color: red; background: #ffe6e6; padding: 8px 12px; margin: 5px 0; border: 1px solid red; border-radius: 4px; font-size: 14px; animation: fadeIn 0.3s ease-out;';
            errorDiv.innerHTML = '<strong>⚠️ Error:</strong> ' + msg;
            document.body.appendChild(errorDiv);
            return false;
        };
        
        // Add fade-in animation
        const style = document.createElement('style');
        style.textContent = \`
          @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
          }
        \`;
        document.head.appendChild(style);
        
        // User JavaScript with enhanced error handling
        try {
            ${this.jsCode}
        } catch (error) {
            console.error('JS Execution Error:', error);
            const errorDiv = document.createElement('div');
            errorDiv.style.cssText = 'color: red; background: #ffe6e6; padding: 8px 12px; margin: 5px 0; border: 1px solid red; border-radius: 4px; font-size: 14px; animation: fadeIn 0.3s ease-out;';
            errorDiv.innerHTML = '<strong>⚠️ Execution Error:</strong> ' + error.message;
            document.body.appendChild(errorDiv);
        }
        
        // Real-time update indicator
        console.log('🚀 Preview updated:', new Date().toLocaleTimeString());
    </script>
</body>
</html>`;
  }

  // Public method to reset the component for a new streaming session
  resetStream() {
    this.clearAll();
  }

  // Get current state
  getCurrentState() {
    return {
      html: this.htmlCode,
      css: this.cssCode,
      javascript: this.jsCode,
      content: this.processedContent,
      buffer: this.streamBuffer,
      isStreaming: this.isStreaming
    };
  }
}
