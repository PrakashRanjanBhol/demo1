/* Action Cards Carousel Container - Fixed Width */
.action-cards-carousel {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    position: relative;
    /* Updated width to 838px */
    width: 838px; /* 32 (prev btn) + 8 (gap) + 768 (content) + 8 (gap) + 32 (next btn) = 848px, adjusted to 838px */
    flex-shrink: 0;
}

.action-cards-wrapper {
    display: flex;
    gap: 0.75rem; /* 12px */
    overflow-x: auto;
    overflow-y: visible;
    scroll-behavior: smooth;
    /* Updated width: 838 - 32 (prev) - 32 (next) - 16 (2 gaps) = 758px */
    width: 758px;
    -ms-overflow-style: none;
    scrollbar-width: none;
    padding: 0.25rem 0.75rem 0.25rem 0;
}

.action-cards-wrapper::-webkit-scrollbar {
    display: none;
}

.action-card {
    display: flex;
    align-items: center;
    gap: 0.625rem;
    padding: 0.75rem 1rem;
    background: var(--sdlc-card-bg);
    border: 1px solid var(--sdlc-card-border);
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    cursor: pointer;
    width: 180px;
    min-width: 180px;
    max-width: 180px;
    flex-shrink: 0;
    box-sizing: border-box;
}

/* Rest of the CSS remains the same */






@ViewChild('carouselContainer') carouselContainer!: ElementRef;

isAtEnd(): boolean {
  const container = this.carouselContainer.nativeElement;
  const maxScroll = container.scrollWidth - container.offsetWidth;
  return container.scrollLeft >= (maxScroll - 1);
}

isAtStart(): boolean {
  return this.carouselContainer.nativeElement.scrollLeft <= 1;
}

scrollCarousel(direction: 'prev' | 'next') {
  const container = this.carouselContainer.nativeElement;
  // Updated scroll amount to match new wrapper width
  // 758px wrapper can show ~3.96 cards, so scroll by 4 cards worth
  const scrollAmount = 768; // (180px * 4 cards) + (12px * 3 gaps)
  
  const newPosition = direction === 'next'
    ? container.scrollLeft + scrollAmount
    : container.scrollLeft - scrollAmount;
  
  container.scrollTo({
    left: newPosition,
    behavior: 'smooth'
  });
}
