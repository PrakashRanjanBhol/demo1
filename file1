import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class AuthService {
  private ws: WebSocket | null = null;
  private userSubject = new BehaviorSubject<any>(this.getStoredUser());
  user$ = this.userSubject.asObservable();

  // üîπ Global loader state
  private loadingSubject = new BehaviorSubject<boolean>(false);
  loading$ = this.loadingSubject.asObservable();

  constructor(private router: Router) {
    const user = this.getStoredUser();
    if (user?.method === 'sso') {
      this.connectSSO(true);
    }
  }

  private getStoredUser() {
    return JSON.parse(localStorage.getItem('user') || 'null');
  }

  loginWithCredentials(username: string, password: string) {
    this.loadingSubject.next(true);

    setTimeout(() => {
      if (username === 'admin' && password === '1234') {
        const user = { username, method: 'credentials' };
        localStorage.setItem('user', JSON.stringify(user));
        this.userSubject.next(user);
        this.router.navigate(['/dashboard']);
      } else {
        alert('Invalid credentials');
      }

      this.loadingSubject.next(false);
    }, 800); // Simulated delay
  }

  connectSSO(autoReconnect = false) {
    if (this.ws) return;

    this.loadingSubject.next(true); // üîπ Start loader
    this.ws = new WebSocket('wss://official-app.com/sso');

    this.ws.onopen = () => {
      console.log('‚úÖ SSO WebSocket connected');
    };

    this.ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      if (data?.user) {
        const user = { ...data.user, method: 'sso' };
        localStorage.setItem('user', JSON.stringify(user));
        this.userSubject.next(user);

        if (!autoReconnect) {
          this.router.navigate(['/dashboard']);
        }
      }

      this.loadingSubject.next(false); // üîπ Stop loader
    };

    this.ws.onerror = (err) => {
      console.error('‚ùå WebSocket error:', err);
      this.loadingSubject.next(false); // üîπ Stop loader even on error
    };

    this.ws.onclose = () => {
      console.warn('‚ö†Ô∏è SSO WebSocket closed');
      this.loadingSubject.next(false);
      this.logout(false);
    };
  }

  logout(redirect = true) {
    localStorage.removeItem('user');
    this.userSubject.next(null);

    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }

    if (redirect) {
      this.router.navigate(['/login']);
    }
  }

  isAuthenticated(): boolean {
    return !!this.getStoredUser();
  }
}
