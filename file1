import React, { useState } from 'react';
import styles from './ConfigDetail.module.css';

const ConfigDetail = ({ row, onBack }) => {
  const [rows, setRows] = useState([
    { question: '', groundTruth: '', answer: '', accuracy: '' }
  ]);

  const addRow = () => {
    setRows([...rows, { question: '', groundTruth: '', answer: '', accuracy: '' }]);
  };

  const updateRow = (index, field, value) => {
    const updated = [...rows];
    updated[index][field] = value;
    setRows(updated);
  };

  const deleteRow = (index) => {
    const updated = [...rows];
    updated.splice(index, 1);
    setRows(updated);
  };

  const handleSubmit = () => {
    console.log('Submitted rows:', rows);
    // Add your submission logic here
  };

  return (
    <div className={styles.container}>
      <button className={styles.backButton} onClick={onBack}>
        <i className="pi pi-arrow-left" style={{ marginRight: '0.5rem' }}></i>
        Back to Table
      </button>

      <div className={styles.tableContainer}>
        {/* Table header */}
        <div className={styles.headerRow}>
          <div>Question</div>
          <div>Ground Truth</div>
          <div>Answer</div>
          <div>Accuracy Score</div>
          <div>Actions</div>
        </div>

        {/* Scrollable input rows */}
        <div className={styles.scrollArea}>
          {rows.map((rowData, index) => (
            <div key={index} className={styles.inputRow}>
              <input
                value={rowData.question}
                onChange={(e) => updateRow(index, 'question', e.target.value)}
                placeholder="Question"
              />
              <input
                value={rowData.groundTruth}
                onChange={(e) => updateRow(index, 'groundTruth', e.target.value)}
                placeholder="Ground Truth"
              />
              <input
                value={rowData.answer}
                onChange={(e) => updateRow(index, 'answer', e.target.value)}
                placeholder="Answer"
              />
              <input
                value={rowData.accuracy}
                onChange={(e) => updateRow(index, 'accuracy', e.target.value)}
                placeholder="Accuracy Score"
              />
              <button onClick={() => deleteRow(index)} className={styles.deleteButton}>
                <i className="pi pi-trash"></i>
              </button>
            </div>
          ))}
        </div>

        {/* Bottom Buttons */}
        <div className={styles.footer}>
          <button className={styles.addButton} onClick={addRow}>
            + New Row
          </button>
          <button className={styles.submitButton} onClick={handleSubmit}>
            Submit
          </button>
        </div>
      </div>
    </div>
  );
};

export default ConfigDetail;



















.container {
  color: white;
  display: flex;
  flex-direction: column;
  height: 100%;
}

.backButton {
  background: none;
  border: none;
  color: #90caf9;
  font-weight: 500;
  margin-bottom: 1rem;
  cursor: pointer;
  display: flex;
  align-items: center;
}

.tableContainer {
  background-color: #1e1e1e;
  border-radius: 8px;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  height: 100%;
  overflow: hidden;
}

.headerRow {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  font-weight: bold;
  border-bottom: 1px solid #444;
  padding-bottom: 0.5rem;
  position: sticky;
  top: 0;
  background-color: #1e1e1e;
  z-index: 2;
}

.scrollArea {
  overflow-y: auto;
  flex-grow: 1;
  max-height: 300px;
  margin-top: 0.5rem;
}

.inputRow {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  gap: 0.5rem;
  padding: 0.5rem 0;
  align-items: center;
}

.inputRow input {
  padding: 0.5rem;
  border-radius: 4px;
  border: 1px solid #555;
  background-color: #2c2c2c;
  color: white;
}

.deleteButton {
  background: none;
  border: none;
  color: #f44336;
  cursor: pointer;
}

.footer {
  display: flex;
  justify-content: flex-start;
  gap: 1rem;
  padding-top: 1rem;
  border-top: 1px solid #444;
  position: sticky;
  bottom: 0;
  background-color: #1e1e1e;
  padding-bottom: 0.5rem;
  margin-top: auto;
}

.addButton,
.submitButton {
  padding: 0.6rem 1.2rem;
  border-radius: 20px;
  border: none;
  font-weight: 500;
  cursor: pointer;
  color: white;
}

.addButton {
  background: linear-gradient(to right, #1976d2, #0d47a1);
}

.submitButton {
  background: linear-gradient(to right, #388e3c, #1b5e20);
}
