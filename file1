// ============================================
// sidebar.component.ts
// ============================================
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-sidebar',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './sidebar.component.html',
  styleUrls: ['./sidebar.component.css']
})
export class SidebarComponent {
  isDarkMode = true;
  showToast = false;

  quickLinks = [
    { name: 'Playground', icon: 'playground', route: 'playground' },
    { name: 'Statistics', icon: 'statistics', route: 'statistics' },
    { name: 'Download', icon: 'download', route: 'download' },
    { name: 'Operations Dashboard', icon: 'operations', route: 'operations' },
    { name: 'Laboratory', icon: 'laboratory', route: 'laboratory' },
    { name: 'Community', icon: 'community', route: 'community' },
    { name: 'User Guidance', icon: 'guidance', route: 'guidance' }
  ];

  toggleTheme(): void {
    this.isDarkMode = !this.isDarkMode;
  }

  copyApiKey(): void {
    const apiKey = 'sk-abc123def456ghi789jkl012mno345pqr678stu901vwx234yz';
    navigator.clipboard.writeText(apiKey).then(() => {
      this.displayToast();
    });
  }

  displayToast(): void {
    this.showToast = true;
    setTimeout(() => {
      this.showToast = false;
    }, 2000);
  }

  navigateTo(route: string): void {
    console.log('Navigating to:', route);
    // Add your routing logic here
  }

  getIcon(iconName: string): string {
    const icons: { [key: string]: string } = {
      playground: '<polygon points="12 2 2 7 12 12 22 7 12 2"></polygon><polyline points="2 17 12 22 22 17"></polyline><polyline points="2 12 12 17 22 12"></polyline>',
      statistics: '<line x1="18" y1="20" x2="18" y2="10"></line><line x1="12" y1="20" x2="12" y2="4"></line><line x1="6" y1="20" x2="6" y2="14"></line>',
      download: '<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line>',
      operations: '<rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="9" y1="21" x2="9" y2="9"></line>',
      laboratory: '<path d="M8 2v4"></path><path d="M16 2v4"></path><rect x="3" y="4" width="18" height="18" rx="2"></rect><path d="M8 11h8"></path><path d="M8 15h8"></path><circle cx="12" cy="15" r="1"></circle>',
      community: '<path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path>',
      guidance: '<circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1="12" y1="17" x2="12.01" y2="17"></line>'
    };
    return icons[iconName] || '';
  }
}


// ============================================
// sidebar.component.html
// ============================================
<div class="app-container">
  <div class="sidebar" [ngClass]="{ 'light': !isDarkMode }">
    <div class="user-section">
      <div class="user-icon">JD</div>
      <div class="welcome-text">
        <h3>Welcome back!</h3>
        <p>John Doe</p>
      </div>
    </div>

    <div class="action-buttons">
      <button class="btn btn-primary" (click)="copyApiKey()">
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
          <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
        </svg>
        Copy API Key
      </button>
      <button class="btn btn-secondary">
        <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="3"></circle>
          <path d="M12 1v6m0 6v6m-7-7h6m6 0h6"></path>
          <path d="M4.93 4.93l4.24 4.24m5.66 5.66l4.24 4.24m0-12.73l-4.24 4.24m-5.66 5.66l-4.24 4.24"></path>
        </svg>
        Settings
      </button>
    </div>

    <div class="quick-links">
      <h4>Quick Links</h4>
      <div 
        class="link-item" 
        *ngFor="let link of quickLinks"
        (click)="navigateTo(link.route)">
        <div class="link-icon">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" [innerHTML]="getIcon(link.icon)"></svg>
        </div>
        {{ link.name }}
      </div>
    </div>
  </div>

  <button class="theme-toggle" (click)="toggleTheme()">Toggle Theme</button>
  
  <div class="toast" [ngClass]="{ 'show': showToast }">
    API Key copied to clipboard!
  </div>
</div>


// ============================================
// sidebar.component.css
// ============================================
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.app-container {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  background: #1a1a1c;
  min-height: 100vh;
  display: flex;
}

.sidebar {
  width: 350px;
  background: #111113;
  color: #e4e4e7;
  padding: 2rem 1.5rem;
  display: flex;
  flex-direction: column;
  gap: 2rem;
  transition: background 0.3s ease;
}

.sidebar.light {
  background: #fff;
  color: #18181b;
}

.user-section {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding-bottom: 1.5rem;
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
}

.sidebar.light .user-section {
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.user-icon {
  width: 3.5rem;
  height: 3.5rem;
  border-radius: 50%;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  font-weight: 600;
  color: white;
  flex-shrink: 0;
}

.welcome-text h3 {
  font-size: 1.125rem;
  font-weight: 600;
  margin-bottom: 0.25rem;
}

.welcome-text p {
  font-size: 0.875rem;
  opacity: 0.7;
}

.action-buttons {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.btn {
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  border: none;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.625rem;
  transition: all 0.2s ease;
}

.btn-primary {
  background: #667eea;
  color: white;
}

.btn-primary:hover {
  background: #5568d3;
  transform: translateY(-1px);
}

.btn-secondary {
  background: rgba(255, 255, 255, 0.05);
  color: #e4e4e7;
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.sidebar.light .btn-secondary {
  background: rgba(0, 0, 0, 0.05);
  color: #18181b;
  border: 1px solid rgba(0, 0, 0, 0.1);
}

.btn-secondary:hover {
  background: rgba(255, 255, 255, 0.1);
  transform: translateY(-1px);
}

.sidebar.light .btn-secondary:hover {
  background: rgba(0, 0, 0, 0.08);
}

.quick-links {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.quick-links h4 {
  font-size: 0.75rem;
  text-transform: uppercase;
  letter-spacing: 0.03125rem;
  opacity: 0.5;
  margin-bottom: 0.5rem;
  font-weight: 600;
}

.link-item {
  padding: 0.75rem 1rem;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-size: 0.875rem;
  font-weight: 500;
  color: #e4e4e7;
}

.sidebar.light .link-item {
  color: #18181b;
}

.link-item:hover {
  background: rgba(255, 255, 255, 0.08);
  transform: translateX(0.25rem);
}

.sidebar.light .link-item:hover {
  background: rgba(0, 0, 0, 0.05);
}

.link-icon {
  width: 1.25rem;
  height: 1.25rem;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0.7;
}

.theme-toggle {
  position: fixed;
  top: 1.5rem;
  right: 1.5rem;
  padding: 0.75rem 1rem;
  background: rgba(255, 255, 255, 0.1);
  border: none;
  border-radius: 0.5rem;
  color: white;
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 500;
  transition: all 0.2s ease;
}

.theme-toggle:hover {
  background: rgba(255, 255, 255, 0.15);
}

.toast {
  position: fixed;
  bottom: 1.5rem;
  right: 1.5rem;
  background: #10b981;
  color: white;
  padding: 0.75rem 1.25rem;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  font-weight: 500;
  opacity: 0;
  transform: translateY(1.25rem);
  transition: all 0.3s ease;
  pointer-events: none;
}

.toast.show {
  opacity: 1;
  transform: translateY(0);
}
