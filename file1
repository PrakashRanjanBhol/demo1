// greeting-loader.component.ts
import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-greeting-loader',
  template: `
    <div class="greeting-loader-wrapper">
      <div class="background-particles">
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
      </div>
      
      <div class="glow-orb"></div>
      
      <div class="loader-container">
        <div class="greeting-container">
          <div class="thought-bubble-main">
            <div class="bubble-content">
              <div class="greeting-icons">
                <div class="icon sun-icon"></div>
                <div class="icon heart-icon"></div>
                <div class="icon star-icon"></div>
              </div>
              <div class="greeting-text-lines">
                <div class="text-line"></div>
                <div class="text-line"></div>
                <div class="text-line"></div>
              </div>
            </div>
          </div>
          <div class="thought-bubble-small"></div>
          <div class="thought-bubble-small"></div>
        </div>
        
        <h2 class="greeting-text">{{ mainText }}</h2>
        <p class="sub-text">{{ subText }}</p>
        
        <div class="loading-dots">
          <div class="dot"></div>
          <div class="dot"></div>
          <div class="dot"></div>
        </div>
      </div>
    </div>
  `,
  styleUrls: ['./greeting-loader.component.css']
})
export class GreetingLoaderComponent {
  @Input() mainText: string = 'Thinking of a refreshing greeting';
  @Input() subText: string = 'to start your day';
  @Input() showLoader: boolean = true;
}















/* greeting-loader.component.css */
.greeting-loader-wrapper {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: #0a0a0b;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: hidden;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 9999;
}

.loader-container {
  text-align: center;
  position: relative;
  z-index: 2;
}

/* Animated background particles */
.background-particles {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
  z-index: 1;
}

.particle {
  position: absolute;
  width: 4px;
  height: 4px;
  background: rgba(147, 51, 234, 0.6);
  border-radius: 50%;
  animation: float 6s infinite ease-in-out;
}

.particle:nth-child(2) { 
  left: 20%; 
  animation-delay: -2s; 
  background: rgba(59, 130, 246, 0.6);
}
.particle:nth-child(3) { 
  left: 40%; 
  animation-delay: -4s; 
  background: rgba(16, 185, 129, 0.6);
}
.particle:nth-child(4) { 
  left: 60%; 
  animation-delay: -1s; 
  background: rgba(245, 158, 11, 0.6);
}
.particle:nth-child(5) { 
  left: 80%; 
  animation-delay: -3s; 
  background: rgba(239, 68, 68, 0.6);
}

@keyframes float {
  0%, 100% { 
    transform: translateY(100vh) rotate(0deg); 
    opacity: 0; 
  }
  10% { opacity: 1; }
  90% { opacity: 1; }
  50% { transform: translateY(-10vh) rotate(180deg); }
}

/* Main loader animation - Thinking Bubbles with Greeting Elements */
.greeting-container {
  width: 160px;
  height: 120px;
  margin: 0 auto 40px;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
}

.thought-bubble-main {
  width: 80px;
  height: 60px;
  background: linear-gradient(135deg, #1e293b, #334155);
  border-radius: 25px;
  border: 2px solid transparent;
  background-clip: padding-box;
  position: relative;
  animation: mainBubbleFloat 3s ease-in-out infinite;
  box-shadow: 0 10px 30px rgba(147, 51, 234, 0.3);
}

.thought-bubble-main::before {
  content: '';
  position: absolute;
  inset: -2px;
  background: linear-gradient(45deg, #9333ea, #3b82f6, #10b981, #f59e0b);
  border-radius: 27px;
  z-index: -1;
  animation: borderShift 3s ease-in-out infinite;
}

.thought-bubble-small {
  width: 20px;
  height: 20px;
  background: linear-gradient(135deg, #334155, #475569);
  border-radius: 50%;
  position: absolute;
  animation: smallBubbleFloat 2.5s ease-in-out infinite;
  box-shadow: 0 5px 15px rgba(59, 130, 246, 0.4);
}

.thought-bubble-small:nth-child(2) {
  bottom: -25px;
  left: 20px;
  animation-delay: -0.5s;
}

.thought-bubble-small:nth-child(3) {
  bottom: -40px;
  left: 5px;
  width: 12px;
  height: 12px;
  animation-delay: -1s;
}

.bubble-content {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 60px;
  height: 40px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 4px;
}

.greeting-icons {
  display: flex;
  gap: 6px;
  margin-bottom: 4px;
}

.icon {
  width: 12px;
  height: 12px;
  border-radius: 2px;
  animation: iconGlow 2s ease-in-out infinite alternate;
}

.sun-icon {
  background: radial-gradient(circle, #f59e0b, #f97316);
  animation-delay: 0s;
}

.heart-icon {
  background: radial-gradient(circle, #ef4444, #dc2626);
  border-radius: 50%;
  animation-delay: 0.3s;
}

.star-icon {
  background: radial-gradient(circle, #eab308, #ca8a04);
  clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%);
  animation-delay: 0.6s;
}

.greeting-text-lines {
  width: 45px;
  height: 12px;
  display: flex;
  flex-direction: column;
  gap: 2px;
}

.text-line {
  height: 1.5px;
  background: linear-gradient(90deg, transparent, #e5e7eb, transparent);
  border-radius: 2px;
  animation: lineWrite 2.5s ease-in-out infinite;
}

.text-line:nth-child(1) { width: 100%; animation-delay: 0s; }
.text-line:nth-child(2) { width: 75%; animation-delay: 0.4s; }
.text-line:nth-child(3) { width: 85%; animation-delay: 0.8s; }

@keyframes mainBubbleFloat {
  0%, 100% { 
    transform: translateY(0px) scale(1); 
    box-shadow: 0 10px 30px rgba(147, 51, 234, 0.3);
  }
  50% { 
    transform: translateY(-8px) scale(1.05); 
    box-shadow: 0 15px 35px rgba(147, 51, 234, 0.5);
  }
}

@keyframes smallBubbleFloat {
  0%, 100% { 
    transform: translateY(0px) scale(0.8);
    opacity: 0.6;
  }
  50% { 
    transform: translateY(-5px) scale(1.1);
    opacity: 0.9;
  }
}

@keyframes iconGlow {
  0% { 
    box-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
    transform: scale(1);
  }
  100% { 
    box-shadow: 0 0 12px rgba(255, 255, 255, 0.6);
    transform: scale(1.1);
  }
}

@keyframes lineWrite {
  0%, 100% { transform: translateX(-100%); opacity: 0; }
  50% { transform: translateX(0%); opacity: 1; }
}

@keyframes borderShift {
  0%, 100% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
}

/* Text animations */
.greeting-text {
  font-size: 1.8rem;
  font-weight: 300;
  color: #e5e7eb;
  margin-bottom: 20px;
  background: linear-gradient(45deg, #9333ea, #3b82f6, #10b981, #f59e0b);
  background-size: 400% 400%;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  animation: gradientShift 3s ease-in-out infinite;
}

.sub-text {
  font-size: 1rem;
  color: #9ca3af;
  font-weight: 400;
  opacity: 0;
  animation: fadeInUp 2s ease-out 0.5s forwards;
}

@keyframes gradientShift {
  0%, 100% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Loading dots */
.loading-dots {
  display: flex;
  justify-content: center;
  gap: 8px;
  margin-top: 30px;
}

.dot {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: linear-gradient(45deg, #9333ea, #3b82f6);
  animation: dotBounce 1.4s ease-in-out infinite both;
}

.dot:nth-child(1) { animation-delay: -0.32s; }
.dot:nth-child(2) { animation-delay: -0.16s; }
.dot:nth-child(3) { animation-delay: 0s; }

@keyframes dotBounce {
  0%, 80%, 100% {
    transform: scale(0.8);
    opacity: 0.5;
  }
  40% {
    transform: scale(1.2);
    opacity: 1;
  }
}

/* Glow effect */
.glow-orb {
  position: absolute;
  width: 300px;
  height: 300px;
  border-radius: 50%;
  background: radial-gradient(circle, rgba(147, 51, 234, 0.1) 0%, transparent 70%);
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  animation: orbGlow 4s ease-in-out infinite alternate;
  z-index: 0;
}

@keyframes orbGlow {
  0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0.3; }
  100% { transform: translate(-50%, -50%) scale(1.2); opacity: 0.6; }
}

/* Responsive design */
@media (max-width: 768px) {
  .greeting-text {
    font-size: 1.5rem;
    padding: 0 20px;
  }
  
  .sub-text {
    font-size: 0.9rem;
    padding: 0 20px;
  }
  
  .greeting-container {
    width: 140px;
    height: 100px;
  }
}



















// app.module.ts - Add to your module
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { GreetingLoaderComponent } from './components/greeting-loader/greeting-loader.component';

@NgModule({
  declarations: [
    // ... other components
    GreetingLoaderComponent
  ],
  imports: [
    BrowserModule,
    // ... other imports
  ],
  providers: [],
  bootstrap: [/* your app component */]
})
export class AppModule { }

// ===============================================
// Usage in your main component (e.g., app.component.ts)
// ===============================================

import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    <!-- Show loader while generating greeting -->
    <app-greeting-loader 
      *ngIf="isGeneratingGreeting"
      [mainText]="loaderMainText"
      [subText]="loaderSubText">
    </app-greeting-loader>
    
    <!-- Your main app content -->
    <div *ngIf="!isGeneratingGreeting" class="main-content">
      <h1>Welcome!</h1>
      <p>{{ generatedGreeting }}</p>
      <!-- Rest of your app -->
    </div>
  `,
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  isGeneratingGreeting = true;
  generatedGreeting = '';
  loaderMainText = 'Thinking of a refreshing greeting';
  loaderSubText = 'to start your day';

  ngOnInit() {
    this.generateDailyGreeting();
  }

  private async generateDailyGreeting() {
    try {
      // Simulate your LLM API call
      this.generatedGreeting = await this.callLLMService();
    } catch (error) {
      console.error('Error generating greeting:', error);
      this.generatedGreeting = 'Good morning! Hope you have a wonderful day!';
    } finally {
      this.isGeneratingGreeting = false;
    }
  }

  private callLLMService(): Promise<string> {
    // Replace this with your actual LLM service call
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve('Good morning! Today is full of possibilities. Let your curiosity guide you to amazing discoveries!');
      }, 3000); // Simulate 3-second API call
    });
  }
}

// ===============================================
// Alternative: Using with Service
// ===============================================

// greeting.service.ts
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class GreetingService {
  private isLoadingSubject = new BehaviorSubject<boolean>(false);
  public isLoading$: Observable<boolean> = this.isLoadingSubject.asObservable();

  constructor(private http: HttpClient) {}

  async generateDailyGreeting(): Promise<string> {
    this.isLoadingSubject.next(true);
    
    try {
      // Replace with your actual API endpoint
      const response = await this.http.post<{greeting: string}>('/api/generate-greeting', {
        timestamp: new Date().toISOString(),
        user_id: 'current_user_id'
      }).toPromise();
      
      return response?.greeting || 'Have a great day!';
    } catch (error) {
      console.error('Failed to generate greeting:', error);
      return 'Good morning! Hope you have a wonderful day!';
    } finally {
      this.isLoadingSubject.next(false);
    }
  }
}

// Using with service in component:
export class AppComponentWithService implements OnInit {
  generatedGreeting = '';
  
  constructor(public greetingService: GreetingService) {}

  async ngOnInit() {
    this.generatedGreeting = await this.greetingService.generateDailyGreeting();
  }
}

// Template for service approach:
// <app-greeting-loader *ngIf="greetingService.isLoading$ | async"></app-greeting-loader>
// <div *ngIf="!(greetingService.isLoading$ | async)" class="main-content">
//   <h1>{{ generatedGreeting }}</h1>
// </div>

// ===============================================
// Customization Options
// ===============================================

// You can customize the loader text:
// <app-greeting-loader 
//   [mainText]="'Crafting your personalized message'"
//   [subText]="'Just a moment please'">
// </app-greeting-loader>

// Or bind to dynamic values:
// <app-greeting-loader 
//   [mainText]="dynamicMainText"
//   [subText]="dynamicSubText">
// </app-greeting-loader>
















<app-greeting-loader 
  *ngIf="isGeneratingGreeting"
  [mainText]="'Thinking of a refreshing greeting'"
  [subText]="'to start your day'">
</app-greeting-loader>
