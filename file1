import { Component, OnInit, AfterViewInit, ElementRef, ViewChild, HostListener } from '@angular/core';
import { marked } from 'marked';
import hljs from 'highlight.js';

@Component({
  selector: 'app-documentation',
  templateUrl: './documentation.component.html',
  styleUrls: ['./documentation.component.scss']
})
export class DocumentationComponent implements OnInit, AfterViewInit {
  @ViewChild('sidebar') sidebar!: ElementRef;
  @ViewChild('content') content!: ElementRef;
  @ViewChild('mainContent') mainContent!: ElementRef;

  htmlContent: string = '';
  tocItems: Array<{ id: string, text: string, level: number }> = [];
  activeSection: number = 0;

  constructor() {
    marked.setOptions({
      gfm: true,
      breaks: false,
      pedantic: false
    });
  }

  ngOnInit() {
    const markdownContent = `# Application Development Best Practices

A comprehensive guide to building robust, scalable, and maintainable applications.

## Code Organization <span class="badge">Essential</span>

### Directory Structure
Organize your codebase with a clear and logical directory structure:

\`\`\`
src/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ common/
â”‚   â””â”€â”€ pages/
â”œâ”€â”€ services/
â”œâ”€â”€ utils/
â”œâ”€â”€ hooks/
â”œâ”€â”€ styles/
â””â”€â”€ tests/
\`\`\`

### File Naming Conventions
- Use **kebab-case** for file names: \`user-profile.component.js\`
- Use **PascalCase** for component files: \`UserProfile.jsx\`
- Use **camelCase** for utility files: \`apiHelper.js\`

## Error Handling <span class="badge warning-badge">Important</span>

### Try-Catch Blocks
Always wrap potentially failing operations in try-catch blocks:

\`\`\`javascript
async function fetchUserData(userId) {
    try {
        const response = await api.get(\`/users/\${userId}\`);
        return response.data;
    } catch (error) {
        console.error('Failed to fetch user data:', error);
        throw new Error('User data unavailable');
    }
}
\`\`\`

### Global Error Handlers
Implement global error handlers to catch unhandled exceptions:

> **Note**: Always log errors with sufficient context for debugging while avoiding exposure of sensitive information.

## Performance Optimization

### Code Splitting
Implement code splitting to reduce initial bundle size:

- Use dynamic imports for route-based splitting
- Implement component-level lazy loading
- Optimize third-party library imports

### Caching Strategies
1. **Browser Caching**: Set appropriate cache headers
2. **Memory Caching**: Cache expensive computations
3. **Database Caching**: Use Redis or similar solutions

## Security Best Practices <span class="badge error-badge">Critical</span>

### Input Validation
- Validate all user inputs on both client and server side
- Use whitelist validation over blacklist
- Sanitize data before database operations

### Authentication & Authorization
- Implement proper session management
- Use secure password hashing (bcrypt, Argon2)
- Apply principle of least privilege

## Testing Strategy

### Testing Pyramid
1. **Unit Tests** (70%): Test individual functions and components
2. **Integration Tests** (20%): Test component interactions
3. **E2E Tests** (10%): Test complete user workflows

### Code Coverage
Maintain at least 80% code coverage while focusing on critical business logic.

## Documentation

### Code Comments
Write clear, concise comments that explain **why**, not **what**:

\`\`\`javascript
// Calculate tax based on regional regulations
// Different regions have varying tax structures
const tax = calculateRegionalTax(amount, region);
\`\`\`

### README Files
Every project should include:
- Setup instructions
- Development workflow
- Deployment process
- Contributing guidelines`;

    this.htmlContent = this.parseMarkdown(markdownContent);
  }

  ngAfterViewInit() {
    setTimeout(() => {
      this.generateTOC();

      // Apply syntax highlighting
      this.content.nativeElement.querySelectorAll('pre code').forEach((block: HTMLElement) => {
        hljs.highlightElement(block);
      });

      // Listen to scroll on content div
      this.content.nativeElement.addEventListener('scroll', () => {
        this.updateActiveSection();
      });
    });
  }

  updateActiveSection() {
    const headers = this.content.nativeElement.querySelectorAll('h1, h2, h3');
    let currentSection = 0;

    const scrollContainer = this.content.nativeElement;
    const scrollPos = scrollContainer.scrollTop + 10; // adjust offset if needed

    headers.forEach((header: HTMLElement, index: number) => {
      const headerTop = header.offsetTop;
      if (headerTop <= scrollPos) {
        currentSection = index;
      }
    });

    if (this.activeSection !== currentSection) {
      this.activeSection = currentSection;

      // Auto-scroll sidebar to keep active link in view
      const activeLink = this.sidebar.nativeElement.querySelectorAll('a')[currentSection];
      if (activeLink) {
        activeLink.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
      }
    }
  }

  generateTOC() {
    const headers = this.content.nativeElement.querySelectorAll('h1, h2, h3');
    this.tocItems = [];

    headers.forEach((header: HTMLElement, index: number) => {
      const level = parseInt(header.tagName.charAt(1));
      const text = header.textContent || '';
      const id = 'heading-' + index;

      header.id = id;
      this.tocItems.push({ id, text, level });
    });
  }

  scrollToSection(event: Event, id: string, index: number) {
    event.preventDefault();
    const element = document.getElementById(id);
    if (element) {
      element.scrollIntoView({
        behavior: 'smooth',
        block: 'start'
      });
    }
    this.activeSection = index;
  }

  @HostListener('window:scroll')
  onScroll() {
    const headers = this.content.nativeElement.querySelectorAll('h1, h2, h3');
    let currentSection = 0;
    const scrollPos = window.scrollY + 100; // offset so it updates earlier

    headers.forEach((header: HTMLElement, index: number) => {
      if (header.offsetTop <= scrollPos) {
        currentSection = index;
      }
    });

    if (this.activeSection !== currentSection) {
      this.activeSection = currentSection;

      // âœ… Auto-scroll sidebar so active tab stays in view
      const activeLink = this.sidebar.nativeElement.querySelectorAll('a')[currentSection];
      if (activeLink) {
        activeLink.scrollIntoView({
          block: 'nearest',
          behavior: 'smooth'
        });
      }
    }
  }

  parseMarkdown(md: string): string {
    return marked.parse(md, { async: false }) as string;
  }

}





























<div class="container">
    <div class="sidebar" #sidebar>
        <h3 class="sidebar-header">
            ðŸš€ Best Practices
            <span class="sparkle">âœ¨</span>
        </h3>

        <ul class="toc">
            <li *ngFor="let item of tocItems; let i = index">
                <a [href]="'#' + item.id" [class]="'level-' + item.level" [class.active]="activeSection === i"
                    (click)="scrollToSection($event, item.id, i)">
                    {{ item.text }}
                </a>
            </li>
        </ul>
    </div>

    <div class="main-content" #content>
        <div class="content" [innerHTML]="htmlContent"></div>
    </div>

</div>






















.container {
    display: flex;
    height: 100vh;
    background: linear-gradient(135deg, #111113 0%, #1a1a1d 100%);
}

.sidebar {
    width: 18.75rem;
    /* 300px */
    background: linear-gradient(180deg, #1a1a1d, #111113);
    backdrop-filter: blur(12px);
    border-right: 0.0625rem solid #2a2a2f;
    /* 1px */
    overflow-y: auto;
    padding: 1.5rem 1.25rem;
    /* 24px 20px */
    position: sticky;
    top: 0;
    height: 100vh;
}

.sidebar-header {
    color: #60a5fa;
    font-size: 1.125rem;
    /* 18px */
    font-weight: 700;
    display: flex;
    align-items: center;
    letter-spacing: 0.03125rem;
    /* 0.5px */
    position: relative;
}

.sidebar-header .sparkle {
    display: inline-block;
    margin-left: 0.5rem;
    /* 8px */
    animation: sparkle 2s infinite ease-in-out alternate;
}

@keyframes sparkle {
    0% {
        transform: translateY(0) rotate(0deg);
        opacity: 0.6;
    }

    50% {
        transform: translateY(-0.1875rem) rotate(20deg);
        /* -3px */
        opacity: 1;
    }

    100% {
        transform: translateY(0) rotate(-20deg);
        opacity: 0.6;
    }
}

.sidebar h3 {
    color: #60a5fa;
    font-size: 1.125rem;
    /* 18px */
    font-weight: 700;
    margin-bottom: 1.25rem;
    /* 20px */
    display: flex;
    align-items: center;
    letter-spacing: 0.03125rem;
    /* 0.5px */
}

.toc {
    list-style: none;
    padding-left: 0;
}

.toc li {
    margin-bottom: 0.625rem;
    /* 10px */
}

.toc a {
    color: #a1a1aa;
    text-decoration: none;
    display: flex;
    align-items: center;
    padding: 0.625rem 0.875rem;
    /* 10px 14px */
    border-radius: 0.625rem;
    /* 10px */
    font-size: 0.875rem;
    /* 14px */
    transition: all 0.25s ease;
    border-left: 0.1875rem solid transparent;
    /* 3px */
}

.toc a::before {
    content: "â€¢";
    margin-right: 0.5rem;
    /* 8px */
    font-size: 0.75rem;
    /* 12px */
    opacity: 0.6;
}

.toc a:hover {
    background: rgba(96, 165, 250, 0.08);
    color: #60a5fa;
    border-left-color: #60a5fa;
    transform: translateX(0.3125rem);
    /* 5px */
}

.toc a.active {
    background: rgba(96, 165, 250, 0.15);
    color: #60a5fa;
    font-weight: 600;
    border-left-color: #60a5fa;
    box-shadow: 0 0.1875rem 0.5rem rgba(96, 165, 250, 0.2);
    /* 3px 8px */
    transform: translateX(0.3125rem);
    /* 5px */
}

.toc a.level-2 {
    margin-left: 1.25rem;
    /* 20px */
    font-size: 0.8125rem;
    /* 13px */
}

.toc a.level-3 {
    margin-left: 2.25rem;
    /* 36px */
    font-size: 0.75rem;
    /* 12px */
    opacity: 0.8;
}

.main-content {
    flex: 1;
    overflow-y: auto;
    padding: 2.5rem;
    /* 40px */
    background: rgba(17, 17, 19, 0.5);
}

.content {
    max-width: 50rem;
    /* 800px */
    margin: 0 auto;
    line-height: 1.7;
}

.content h1 {
    color: #f4f4f5;
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    /* 16px */
    background: linear-gradient(135deg, #60a5fa, #a78bfa);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.content h2 {
    color: #60a5fa;
    font-size: 1.75rem;
    font-weight: 600;
    margin: 2rem 0 1rem 0;
    /* 32px 0 16px 0 */
    padding-bottom: 0.5rem;
    /* 8px */
    border-bottom: 0.125rem solid rgba(96, 165, 250, 0.2);
    /* 2px */
}

.content h3 {
    color: #a78bfa;
    font-size: 1.25rem;
    font-weight: 600;
    margin: 1.5rem 0 0.75rem 0;
    /* 24px 0 12px 0 */
}

.content p {
    margin-bottom: 1rem;
    /* 16px */
    color: #d4d4d8;
}

.content ul,
.content ol {
    margin: 1rem 0 1rem 1.5rem;
    /* 16px 0 16px 24px */
    color: #d4d4d8;
}

.content li {
    margin-bottom: 0.5rem;
    /* 8px */
    padding-left: 0.5rem;
    /* 8px */
}

.content code {
    background: rgba(39, 39, 42, 0.8);
    color: #fbbf24;
    padding: 0.125rem 0.375rem;
    /* 2px 6px */
    border-radius: 0.25rem;
    /* 4px */
    font-family: 'Fira Code', 'Courier New', monospace;
    font-size: 0.9rem;
}

.content pre {
    background: rgba(39, 39, 42, 0.9);
    border: 0.0625rem solid #3f3f46;
    /* 1px */
    border-radius: 0.75rem;
    /* 12px */
    padding: 1.25rem;
    /* 20px */
    margin: 1.25rem 0;
    /* 20px */
    overflow-x: auto;
    position: relative;
}

.content pre code {
    background: none;
    padding: 0;
    color: #e4e4e7;
}

.content blockquote {
    border-left: 0.25rem solid #60a5fa;
    /* 4px */
    padding-left: 1.25rem;
    /* 20px */
    margin: 1.25rem 0;
    /* 20px */
    font-style: italic;
    background: rgba(96, 165, 250, 0.05);
    padding: 1rem 1.25rem;
    /* 16px 20px */
    border-radius: 0 0.5rem 0.5rem 0;
    /* 0 8px 8px 0 */
}

.badge {
    display: inline-block;
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
    padding: 0.25rem 0.75rem;
    /* 4px 12px */
    border-radius: 1.25rem;
    /* 20px */
    font-size: 0.75rem;
    /* 12px */
    font-weight: 600;
    margin-left: 0.5rem;
    /* 8px */
}

.warning-badge {
    background: linear-gradient(135deg, #f59e0b, #d97706);
}

.error-badge {
    background: linear-gradient(135deg, #ef4444, #dc2626);
}

/* Custom scrollbar */
::-webkit-scrollbar {
    width: 0.5rem;
    /* 8px */
}

::-webkit-scrollbar-track {
    background: rgba(39, 39, 42, 0.3);
    border-radius: 0.25rem;
    /* 4px */
}

::-webkit-scrollbar-thumb {
    background: rgba(96, 165, 250, 0.3);
    border-radius: 0.25rem;
    /* 4px */
}

::-webkit-scrollbar-thumb:hover {
    background: rgba(96, 165, 250, 0.5);
}

@media (max-width: 768px) {
    .container {
        flex-direction: column;
    }

    .sidebar {
        width: 100%;
        height: 12.5rem;
        /* 200px */
    }
}

