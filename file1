import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { HttpClient, HttpHeaders } from '@angular/common/http';

@Component({
  selector: 'app-sidebar',
  templateUrl: './sidebar.component.html',
  styleUrls: ['./sidebar.component.scss']
})
export class SidebarComponent {
  jiraForm: FormGroup;
  loading = false;
  errorMessage = '';
  successMessage = '';
  showPassword = false;

  constructor(private fb: FormBuilder, private http: HttpClient) {
    this.jiraForm = this.fb.group({
      username: ['', Validators.required],
      password: ['', Validators.required],
    });
  }

  togglePassword() {
    this.showPassword = !this.showPassword;
  }

  connectToJira() {
    this.loading = true;
    this.errorMessage = '';
    this.successMessage = '';

    const { username, password } = this.jiraForm.value;
    const authHeader = 'Basic ' + btoa(`${username}:${password}`);

    const headers = new HttpHeaders({
      Authorization: authHeader,
      'Content-Type': 'application/json',
    });

    this.http.get('https://your-jira-domain.atlassian.net/rest/api/2/myself', { headers })
      .subscribe({
        next: (res: any) => {
          this.loading = false;
          this.successMessage = `Connected as ${res.displayName}`;
        },
        error: (err) => {
          this.loading = false;
          this.errorMessage = err.error?.errorMessages?.[0] || 'Connection failed. Check credentials or Jira domain.';
        }
      });
  }
}



<div class="sidebar">
  <div class="jira-connect-wrapper animate-in">
    <h1 class="main-heading">Jira</h1>
    <h3 class="sub-heading">ðŸ”— Connect to Jira</h3>

    <form [formGroup]="jiraForm" (ngSubmit)="connectToJira()" class="jira-form fade-in delay-1">
      <div class="form-group">
        <label for="username">Username</label>
        <input
          id="username"
          type="text"
          pInputText
          formControlName="username"
          class="styled-input"
        />
      </div>

      <div class="form-group password-group">
        <label for="password">API Token / Password</label>
        <div class="password-wrapper">
          <input
            id="password"
            [type]="showPassword ? 'text' : 'password'"
            pInputText
            formControlName="password"
            class="styled-input"
          />
          <i
            class="pi"
            [ngClass]="showPassword ? 'pi-eye-slash' : 'pi-eye'"
            (click)="togglePassword()"
            title="Toggle visibility"
          ></i>
        </div>
      </div>

      <div class="button-wrapper">
        <button
          pButton
          type="submit"
          [disabled]="jiraForm.invalid || loading"
          class="connect-btn"
        >
          <i class="pi pi-link"></i>
          <span *ngIf="!loading">Connect</span>
          <span *ngIf="loading">Connecting...</span>
          <p-progressSpinner
            *ngIf="loading"
            styleClass="btn-spinner"
            strokeWidth="3"
            [style]="{ width: '16px', height: '16px' }"
          ></p-progressSpinner>
        </button>
      </div>

      <div *ngIf="errorMessage" class="error-message fade-in delay-2">
        {{ errorMessage }}
      </div>

      <div *ngIf="successMessage" class="success-message fade-in delay-2">
        {{ successMessage }}
      </div>
    </form>
  </div>
</div>



.sidebar {
  width: 380px;
  height: 100vh;
  background-color: #171717;
  border-right: 1px solid #2a2a2a;
  font-family: 'Segoe UI', sans-serif;
  font-size: 0.9rem;
  color: #f1f1f1;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px;
}

.jira-connect-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  gap: 16px;
  animation: slideFadeIn 0.6s ease forwards;
}

.main-heading {
  font-size: 2rem;
  font-weight: 600;
  color: #ffffff;
  margin: 0;
}

.sub-heading {
  font-size: 1rem;
  font-weight: 400;
  color: #a0a0a0;
  margin: 0;
}

.jira-form {
  display: flex;
  flex-direction: column;
  gap: 16px;
  width: 100%;
  max-width: 320px;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

label {
  font-weight: 500;
  font-size: 0.85rem;
  color: #c5c5c5;
}

.styled-input {
  height: 40px;
  padding: 0 12px;
  border-radius: 6px;
  border: 1px solid #2e2e2e;
  background-color: #1f1f1f;
  color: #fff;
  font-size: 0.95rem;
  transition: border-color 0.2s ease;
}

.styled-input:focus {
  border-color: #409eff;
  outline: none;
}

.password-group {
  position: relative;
}

.password-wrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.password-wrapper input {
  width: 100%;
  padding-right: 36px;
}

.password-wrapper i {
  position: absolute;
  right: 10px;
  color: #aaa;
  cursor: pointer;
  font-size: 1.1rem;
  transition: color 0.2s ease;
}

.password-wrapper i:hover {
  color: #fff;
}

.button-wrapper {
  display: flex;
  justify-content: center;
  margin-top: 8px;
}

.connect-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  background-color: #2563eb !important;
  border: none;
  color: white;
  padding: 10px 20px;
  border-radius: 6px;
  font-weight: 500;
  transition: background-color 0.2s ease;
}

.connect-btn:disabled {
  background-color: #3b82f6 !important;
  opacity: 0.6;
  cursor: not-allowed;
}

.connect-btn:hover:not(:disabled) {
  background-color: #1d4ed8 !important;
}

.btn-spinner {
  margin-left: 4px;
}

.error-message,
.success-message {
  margin-top: 12px;
  padding: 10px 12px;
  border-radius: 6px;
  font-size: 0.85rem;
  text-align: center;
}

.error-message {
  background-color: #2a1c1c;
  color: #f87171;
}

.success-message {
  background-color: #1c2a1c;
  color: #4ade80;
}

/* === Animations === */
@keyframes slideFadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in {
  opacity: 0;
  transform: translateY(10px);
  animation: slideFadeIn 0.5s ease forwards;
}

.delay-1 {
  animation-delay: 0.2s;
}

.delay-2 {
  animation-delay: 0.4s;
}
