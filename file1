<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LLM Template Portal</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 20px 30px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            font-size: 2.5rem;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 10px;
        }

        .header p {
            color: #666;
            font-size: 1.1rem;
        }

        .nav-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
        }

        .nav-tab {
            padding: 12px 24px;
            background: rgba(255, 255, 255, 0.9);
            border: none;
            border-radius: 15px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 500;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .nav-tab.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .nav-tab:hover:not(.active) {
            background: rgba(255, 255, 255, 1);
            transform: translateY(-1px);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .search-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .search-bar {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }

        .search-input {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid #e0e0e0;
            border-radius: 15px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .search-btn {
            padding: 15px 30px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 15px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .search-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .filters {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .filter-tag {
            padding: 8px 16px;
            background: #f0f0f0;
            border: 2px solid transparent;
            border-radius: 20px;
            cursor: pointer;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .filter-tag:hover, .filter-tag.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            transform: translateY(-1px);
        }

        .templates-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-bottom: 30px;
        }

        .template-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 25px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            cursor: pointer;
            border: 2px solid transparent;
        }

        .template-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
            border-color: #667eea;
        }

        .template-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 15px;
        }

        .template-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
        }

        .template-category {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 5px 12px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
        }

        .template-description {
            color: #666;
            line-height: 1.6;
            margin-bottom: 15px;
        }

        .template-stats {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
            font-size: 0.9rem;
            color: #888;
        }

        .template-actions {
            display: flex;
            gap: 10px;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-secondary {
            background: #f8f9fa;
            color: #333;
            border: 2px solid #e0e0e0;
        }

        .btn:hover {
            transform: translateY(-2px);
        }

        .create-template-form {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
        }

        .form-input, .form-select, .form-textarea {
            width: 100%;
            padding: 15px;
            border: 2px solid #e0e0e0;
            border-radius: 15px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-input:focus, .form-select:focus, .form-textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-textarea {
            min-height: 120px;
            resize: vertical;
        }

        .variable-builder {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            margin-top: 15px;
        }

        .variable-item {
            display: flex;
            gap: 15px;
            margin-bottom: 15px;
            align-items: center;
        }

        .variable-item input {
            flex: 1;
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
        }

        .remove-variable {
            background: #ff4757;
            color: white;
            border: none;
            border-radius: 8px;
            padding: 8px 12px;
            cursor: pointer;
            font-size: 0.8rem;
        }

        .add-variable {
            background: #2ed573;
            color: white;
            border: none;
            border-radius: 10px;
            padding: 10px 20px;
            cursor: pointer;
            font-weight: 500;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            z-index: 1000;
        }

        .modal-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 20px;
            padding: 30px;
            max-width: 600px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
        }

        .close {
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 28px;
            cursor: pointer;
            color: #aaa;
        }

        .close:hover {
            color: #333;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .templates-grid {
                grid-template-columns: 1fr;
            }
            
            .search-bar {
                flex-direction: column;
            }
            
            .nav-tabs {
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>LLM Template Portal</h1>
            <p>Create, discover, and manage your AI templates with ease</p>
        </div>

        <div class="nav-tabs">
            <button class="nav-tab active" data-tab="discover">Discover Templates</button>
            <button class="nav-tab" data-tab="create">Create Template</button>
            <button class="nav-tab" data-tab="my-templates">My Templates</button>
        </div>

        <!-- Discover Templates Tab -->
        <div id="discover" class="tab-content active">
            <div class="search-section">
                <div class="search-bar">
                    <input type="text" class="search-input" placeholder="Search templates..." id="searchInput">
                    <button class="search-btn" onclick="searchTemplates()">Search</button>
                </div>
                <div class="filters">
                    <div class="filter-tag active" data-filter="all">All</div>
                    <div class="filter-tag" data-filter="code">Code Generation</div>
                    <div class="filter-tag" data-filter="documentation">Documentation</div>
                    <div class="filter-tag" data-filter="analysis">Analysis</div>
                    <div class="filter-tag" data-filter="testing">Testing</div>
                    <div class="filter-tag" data-filter="api">API</div>
                </div>
            </div>

            <div class="templates-grid" id="templatesGrid">
                <!-- Templates will be populated here -->
            </div>
        </div>

        <!-- Create Template Tab -->
        <div id="create" class="tab-content">
            <div class="create-template-form">
                <h2 style="margin-bottom: 25px; color: #333;">Create New Template</h2>
                <form id="createTemplateForm">
                    <div class="form-group">
                        <label class="form-label">Template Name</label>
                        <input type="text" class="form-input" id="templateName" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Category</label>
                        <select class="form-select" id="templateCategory" required>
                            <option value="">Select a category</option>
                            <option value="code">Code Generation</option>
                            <option value="documentation">Documentation</option>
                            <option value="analysis">Analysis</option>
                            <option value="testing">Testing</option>
                            <option value="api">API</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-textarea" id="templateDescription" placeholder="Describe what this template does..." required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Template Content</label>
                        <textarea class="form-textarea" id="templateContent" placeholder="Write your template here. Use {{variable_name}} for variables..." required style="min-height: 200px;"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Variables</label>
                        <div class="variable-builder">
                            <div id="variablesList">
                                <!-- Variables will be added here -->
                            </div>
                            <button type="button" class="add-variable" onclick="addVariable()">+ Add Variable</button>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Tags (comma-separated)</label>
                        <input type="text" class="form-input" id="templateTags" placeholder="api, rest, backend, nodejs">
                    </div>
                    
                    <button type="submit" class="btn btn-primary" style="width: 100%; padding: 15px;">Create Template</button>
                </form>
            </div>
        </div>

        <!-- My Templates Tab -->
        <div id="my-templates" class="tab-content">
            <div class="templates-grid" id="myTemplatesGrid">
                <!-- User's templates will be populated here -->
            </div>
        </div>
    </div>

    <!-- Template Preview Modal -->
    <div id="templateModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <div id="modalContent">
                <!-- Template details will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // Sample template data
        let templates = [
            {
                id: 1,
                name: "REST API Generator",
                category: "code",
                description: "Generate a complete REST API with CRUD operations, middleware, and error handling.",
                content: "// Generate {{entity_name}} API\nconst express = require('express');\nconst router = express.Router();\n\n// GET /{{entity_name}}\nrouter.get('/', async (req, res) => {\n  // Implementation here\n});",
                variables: [{name: "entity_name", description: "Name of the entity"}],
                tags: ["api", "rest", "express", "nodejs"],
                author: "System",
                uses: 1234,
                rating: 4.8,
                isPublic: true
            },
            {
                id: 2,
                name: "API Documentation Template",
                category: "documentation",
                description: "Create comprehensive API documentation with examples and response formats.",
                content: "# {{api_name}} API Documentation\n\n## Overview\n{{api_description}}\n\n## Endpoints\n\n### {{endpoint_name}}\n- **Method:** {{method}}\n- **URL:** {{url}}\n- **Description:** {{description}}",
                variables: [
                    {name: "api_name", description: "Name of the API"},
                    {name: "api_description", description: "Brief description of the API"},
                    {name: "endpoint_name", description: "Name of the endpoint"},
                    {name: "method", description: "HTTP method"},
                    {name: "url", description: "Endpoint URL"},
                    {name: "description", description: "Endpoint description"}
                ],
                tags: ["documentation", "api", "markdown"],
                author: "System",
                uses: 892,
                rating: 4.6,
                isPublic: true
            },
            {
                id: 3,
                name: "Unit Test Generator",
                category: "testing",
                description: "Generate comprehensive unit tests for your functions with edge cases.",
                content: "describe('{{function_name}}', () => {\n  it('should {{test_description}}', () => {\n    // Arrange\n    const {{input_var}} = {{input_value}};\n    const expected = {{expected_result}};\n    \n    // Act\n    const result = {{function_name}}({{input_var}});\n    \n    // Assert\n    expect(result).toEqual(expected);\n  });\n});",
                variables: [
                    {name: "function_name", description: "Name of the function to test"},
                    {name: "test_description", description: "What the test should verify"},
                    {name: "input_var", description: "Input variable name"},
                    {name: "input_value", description: "Test input value"},
                    {name: "expected_result", description: "Expected test result"}
                ],
                tags: ["testing", "jest", "unit-test"],
                author: "System",
                uses: 567,
                rating: 4.7,
                isPublic: true
            }
        ];

        let userTemplates = [];
        let currentFilter = 'all';

        // Initialize the app
        document.addEventListener('DOMContentLoaded', function() {
            initializeTabs();
            renderTemplates();
            renderUserTemplates();
        });

        function initializeTabs() {
            const tabs = document.querySelectorAll('.nav-tab');
            const contents = document.querySelectorAll('.tab-content');
            
            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    const targetTab = tab.getAttribute('data-tab');
                    
                    // Remove active class from all tabs and contents
                    tabs.forEach(t => t.classList.remove('active'));
                    contents.forEach(c => c.classList.remove('active'));
                    
                    // Add active class to clicked tab and corresponding content
                    tab.classList.add('active');
                    document.getElementById(targetTab).classList.add('active');
                });
            });

            // Filter tags functionality
            const filterTags = document.querySelectorAll('.filter-tag');
            filterTags.forEach(tag => {
                tag.addEventListener('click', () => {
                    filterTags.forEach(t => t.classList.remove('active'));
                    tag.classList.add('active');
                    currentFilter = tag.getAttribute('data-filter');
                    renderTemplates();
                });
            });
        }

        function renderTemplates() {
            const grid = document.getElementById('templatesGrid');
            let filteredTemplates = templates;

            if (currentFilter !== 'all') {
                filteredTemplates = templates.filter(template => template.category === currentFilter);
            }

            grid.innerHTML = filteredTemplates.map(template => `
                <div class="template-card" onclick="openTemplateModal(${template.id})">
                    <div class="template-header">
                        <div>
                            <div class="template-title">${template.name}</div>
                            <div class="template-category">${getCategoryDisplayName(template.category)}</div>
                        </div>
                    </div>
                    <div class="template-description">${template.description}</div>
                    <div class="template-stats">
                        <span>👤 ${template.author}</span>
                        <span>📊 ${template.uses} uses</span>
                        <span>⭐ ${template.rating}</span>
                    </div>
                    <div class="template-actions">
                        <button class="btn btn-primary" onclick="event.stopPropagation(); useTemplate(${template.id})">Use Template</button>
                        <button class="btn btn-secondary" onclick="event.stopPropagation(); addToCollection(${template.id})">Add to Collection</button>
                    </div>
                </div>
            `).join('');
        }

        function renderUserTemplates() {
            const grid = document.getElementById('myTemplatesGrid');
            
            if (userTemplates.length === 0) {
                grid.innerHTML = `
                    <div style="text-align: center; padding: 50px; color: #666;">
                        <h3>No templates created yet</h3>
                        <p>Create your first template to get started!</p>
                    </div>
                `;
                return;
            }

            grid.innerHTML = userTemplates.map(template => `
                <div class="template-card" onclick="openTemplateModal(${template.id}, true)">
                    <div class="template-header">
                        <div>
                            <div class="template-title">${template.name}</div>
                            <div class="template-category">${getCategoryDisplayName(template.category)}</div>
                        </div>
                    </div>
                    <div class="template-description">${template.description}</div>
                    <div class="template-stats">
                        <span>👤 You</span>
                        <span>📊 ${template.uses || 0} uses</span>
                        <span>⭐ ${template.rating || 'N/A'}</span>
                    </div>
                    <div class="template-actions">
                        <button class="btn btn-primary" onclick="event.stopPropagation(); useTemplate(${template.id}, true)">Use Template</button>
                        <button class="btn btn-secondary" onclick="event.stopPropagation(); editTemplate(${template.id})">Edit</button>
                    </div>
                </div>
            `).join('');
        }

        function getCategoryDisplayName(category) {
            const categories = {
                'code': 'Code Generation',
                'documentation': 'Documentation',
                'analysis': 'Analysis',
                'testing': 'Testing',
                'api': 'API'
            };
            return categories[category] || category;
        }

        function searchTemplates() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const grid = document.getElementById('templatesGrid');
            
            let filteredTemplates = templates.filter(template => 
                template.name.toLowerCase().includes(searchTerm) ||
                template.description.toLowerCase().includes(searchTerm) ||
                template.tags.some(tag => tag.toLowerCase().includes(searchTerm))
            );

            if (currentFilter !== 'all') {
                filteredTemplates = filteredTemplates.filter(template => template.category === currentFilter);
            }

            grid.innerHTML = filteredTemplates.map(template => `
                <div class="template-card" onclick="openTemplateModal(${template.id})">
                    <div class="template-header">
                        <div>
                            <div class="template-title">${template.name}</div>
                            <div class="template-category">${getCategoryDisplayName(template.category)}</div>
                        </div>
                    </div>
                    <div class="template-description">${template.description}</div>
                    <div class="template-stats">
                        <span>👤 ${template.author}</span>
                        <span>📊 ${template.uses} uses</span>
                        <span>⭐ ${template.rating}</span>
                    </div>
                    <div class="template-actions">
                        <button class="btn btn-primary" onclick="event.stopPropagation(); useTemplate(${template.id})">Use Template</button>
                        <button class="btn btn-secondary" onclick="event.stopPropagation(); addToCollection(${template.id})">Add to Collection</button>
                    </div>
                </div>
            `).join('');
        }

        function openTemplateModal(templateId, isUserTemplate = false) {
            const template = isUserTemplate ? 
                userTemplates.find(t => t.id === templateId) : 
                templates.find(t => t.id === templateId);
            
            if (!template) return;

            const modal = document.getElementById('templateModal');
            const modalContent = document.getElementById('modalContent');
            
            modalContent.innerHTML = `
                <h2 style="margin-bottom: 20px; color: #333;">${template.name}</h2>
                <div class="template-category" style="margin-bottom: 15px;">${getCategoryDisplayName(template.category)}</div>
                <p style="margin-bottom: 20px; color: #666;">${template.description}</p>
                
                <h3 style="margin-bottom: 15px; color: #333;">Template Content:</h3>
                <pre style="background: #f8f9fa; padding: 15px; border-radius: 10px; overflow-x: auto; margin-bottom: 20px;">${template.content}</pre>
                
                <h3 style="margin-bottom: 15px; color: #333;">Variables:</h3>
                <div style="margin-bottom: 20px;">
                    ${template.variables.map(variable => `
                        <div style="background: #f0f0f0; padding: 10px; border-radius: 8px; margin-bottom: 10px;">
                            <strong>{{${variable.name}}}</strong> - ${variable.description}
                        </div>
                    `).join('')}
                </div>
                
                <h3 style="margin-bottom: 15px; color: #333;">Tags:</h3>
                <div style="margin-bottom: 20px;">
                    ${template.tags.map(tag => `<span style="background: #e0e0e0; padding: 5px 10px; border-radius: 15px; margin-right: 5px; font-size: 0.9rem;">${tag}</span>`).join('')}
                </div>
                
                <div style="display: flex; gap: 10px; margin-top: 20px;">
                    <button class="btn btn-primary" onclick="useTemplate(${template.id}, ${isUserTemplate})">Use This Template</button>
                    <button class="btn btn-secondary" onclick="closeModal()">Close</button>
                </div>
            `;
            
            modal.style.display = 'block';
        }

        function closeModal() {
            document.getElementById('templateModal').style.display = 'none';
        }

        function useTemplate(templateId, isUserTemplate = false) {
            const template = isUserTemplate ? 
                userTemplates.find(t => t.id === templateId) : 
                templates.find(t => t.id === templateId);
            
            if (!template) return;

            alert(`Using template: ${template.name}\n\nThis would redirect to the LLM interface with the template loaded.`);
            closeModal();
        }

        function addToCollection(templateId) {
            const template = templates.find(t => t.id === templateId);
            if (!template) return;

            // Check if already in collection
            const existingTemplate = userTemplates.find(t => t.name === template.name);
            if (existingTemplate) {
                alert('Template already in your collection!');
                return;
            }

            // Add to user's collection
            const userTemplate = {
                ...template,
                id: Date.now(), // Generate new ID
                author: 'You',
                uses: 0,
                rating: null
            };
            
            userTemplates.push(userTemplate);
            renderUserTemplates();
            alert('Template added to your collection!');
        }

        function editTemplate(templateId) {
            alert(`Edit template functionality would be implemented here for template ID: ${templateId}`);
        }

        // Create template form handling
        document.getElementById('createTemplateForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const variables = [];
            
            // Get variables from the builder
            const variableItems = document.querySelectorAll('.variable-item');
            variableItems.forEach(item => {
                const nameInput = item.querySelector('.variable-name');
                const descInput = item.querySelector('.variable-desc');
                if (nameInput && descInput && nameInput.value && descInput.value) {
                    variables.push({
                        name: nameInput.value,
                        description: descInput.value
                    });
                }
            });
            
            const newTemplate = {
                id: Date.now(),
                name: document.getElementById('templateName').value,
                category: document.getElementById('templateCategory').value,
                description: document.getElementById('templateDescription').value,
                content: document.getElementById('templateContent').value,
                variables: variables,
                tags: document.getElementById('templateTags').value.split(',').map(tag => tag.trim()),
                author: 'You',
                uses: 0,
                rating: null,
                isPublic: false
            };
            
            userTemplates.push(newTemplate);
            renderUserTemplates();
            
            // Reset form
            this.reset();
            document.getElementById('variablesList').innerHTML = '';
            
            // Switch to My Templates tab
            document.querySelector('[data-tab="my-templates"]').click();
            
            alert('Template created successfully!');
        });

        function addVariable() {
            const variablesList = document.getElementById('variablesList');
            const variableItem = document.createElement('div');
            variableItem.className = 'variable-item';
            variableItem.innerHTML = `
                <input type="text" class="variable-name" placeholder="Variable name (e.g., entity_name)">
                <input type="text" class="variable-desc" placeholder="Variable description">
                <button type="button" class="remove-variable" onclick="removeVariable(this)">Remove</button>
            `;
            variablesList.appendChild(variableItem);
        }

        function removeVariable(button) {
            button.parentElement.remove();
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('templateModal');
            if (event.target === modal) {
                closeModal();
            }
        }

        // Search on Enter key
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchTemplates();
            }
        });
    </script>
</body>
</html>
