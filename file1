import { Component, ElementRef, OnInit, Renderer2, ViewChild } from '@angular/core';
import { marked } from 'marked';
import hljs from 'highlight.js';

interface TocItem {
  id: string;
  text: string;
  level: number;
}

@Component({
  selector: 'app-documentation',
  templateUrl: './documentation.component.html',
  styleUrls: ['./documentation.component.scss']
})
export class DocumentationComponent implements OnInit {
  @ViewChild('content', { static: true }) contentElement!: ElementRef;
  @ViewChild('tocContainer', { static: true }) tocContainer!: ElementRef;

  htmlContent: any = '';
  tocItems: TocItem[] = [];
  activeSection = 0;
  isLoading = true;
  loadingError = '';

  markdownFiles = [
    { folder: 'Page1', file: 'page1.md' },
    { folder: 'Page2', file: 'page2.md' },
    { folder: 'Page3', file: 'page3.md' },
    { folder: 'Page4', file: 'page4.md' }
  ];

  constructor(private renderer: Renderer2) {}

  ngOnInit(): void {
    marked.setOptions({
      gfm: true,
      breaks: false,
      pedantic: false
    });

    this.loadAllMarkdownFiles();

    // Scroll listener
    this.renderer.listen(this.contentElement.nativeElement, 'scroll', () => {
      this.updateActiveSection();
    });
    // Resize listener
    window.addEventListener('resize', () => {
      setTimeout(() => this.updateActiveSection(), 100);
    });
  }

  async loadAllMarkdownFiles() {
    this.isLoading = true;
    this.loadingError = '';
    this.updateLoadingState();

    try {
      const filePromises = this.markdownFiles.map(({ folder, file }) =>
        this.loadMarkdownFile(folder, file)
      );

      const markdownFiles = await Promise.all(filePromises);
      this.processMarkdownFiles(markdownFiles);

      this.isLoading = false;

      setTimeout(() => {
        this.generateTOC();
        this.applySyntaxHighlighting();
      }, 100);
    } catch (error) {
      console.error('Error loading markdown files:', error);
      this.loadingError = 'Failed to load documentation files';
      this.isLoading = false;
      this.updateLoadingState();
    }
  }

  async loadMarkdownFile(folder: string, file: string) {
    const path = `assets/markdown/${folder}/${file}`;
    try {
      const response = await fetch(path);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      const content = await response.text();
      return { folderName: folder, fileName: file, content, path };
    } catch (error) {
      console.warn(`Failed to load ${path}:`, error);
      return {
        folderName: folder,
        fileName: file,
        content: `# Error Loading Content\n\nFailed to load content from ${path}`,
        path
      };
    }
  }

  processMarkdownFiles(markdownFiles: any[]) {
    let combinedMarkdown = '';

    markdownFiles.forEach((file, index) => {
      if (index > 0) combinedMarkdown += '\n\n';
      combinedMarkdown += file.content.trim();
    });

    this.htmlContent = marked.parse(combinedMarkdown);
  }

  updateLoadingState() {
    if (this.isLoading) {
      this.htmlContent = '<div class="loading">Loading documentation...</div>';
      this.tocContainer.nativeElement.innerHTML = '<div class="loading">Loading TOC...</div>';
    } else if (this.loadingError) {
      this.htmlContent = `<div class="error">${this.loadingError}</div>`;
      this.tocContainer.nativeElement.innerHTML = `<div class="error">Failed to load TOC</div>`;
    }
  }

  generateTOC() {
    const headers = this.contentElement.nativeElement.querySelectorAll('h1, h2, h3, h4, h5, h6');
    this.tocItems = [];

    headers.forEach((header: HTMLElement, index: number) => {
      const level = parseInt(header.tagName.charAt(1));
      const text = (header.textContent || '').trim();
      const id = 'heading-' + index;
      header.id = id;
      this.tocItems.push({ id, text, level });
    });
  }

  applySyntaxHighlighting() {
    this.contentElement.nativeElement.querySelectorAll('pre code').forEach((block: HTMLElement) => {
      hljs.highlightElement(block);
    });
  }

  updateActiveSection() {
    const headers = this.contentElement.nativeElement.querySelectorAll('h1, h2, h3, h4, h5, h6');
    let currentSection = 0;
    const scrollPos = this.contentElement.nativeElement.scrollTop + 50;

    headers.forEach((header: HTMLElement, index: number) => {
      if (header.offsetTop <= scrollPos) {
        currentSection = index;
      }
    });

    if (this.activeSection !== currentSection) {
      this.activeSection = currentSection;
    }
  }

  scrollToSection(id: string, index: number, event: Event) {
    event.preventDefault();
    const element = document.getElementById(id);
    if (element) {
      this.contentElement.nativeElement.scrollTo({
        top: element.offsetTop - 20,
        behavior: 'smooth'
      });
    }
    this.activeSection = index;
  }

  reloadContent() {
    this.loadAllMarkdownFiles();
  }
}























<div class="documentation-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <h3>Table of Contents</h3>
        <div #tocContainer>
            <div class="loading">Loading TOC...</div>
        </div>
        <div>
            <a *ngFor="let item of tocItems; let i = index" href="#" (click)="scrollToSection(item.id, i, $event)"
                [class.active]="activeSection === i" class="toc-item" [ngClass]="'level-' + item.level">
                {{ item.text }}
            </a>
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="content-body" #content [innerHTML]="htmlContent"></div>
    </div>
</div>

<!-- Reload Button -->
<button class="reload-btn" (click)="reloadContent()" title="Reload Content">â†»</button>



















* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: #eaeaea;
    background-color: #111113;
}

/* Container */
.documentation-container {
    display: flex;
    height: 100vh;
    max-width: 1400px;
    margin: 0 auto;
    background: #18181b;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);
    border-radius: 8px;
    overflow: hidden;
}

/* Sidebar */
.sidebar {
    width: 300px;
    background: #1a1a1d;
    border-right: 1px solid #2a2a2f;
    overflow-y: auto;
    padding: 20px;
}

.sidebar h3 {
    margin-bottom: 15px;
    color: #ffffff;
    font-size: 18px;
    font-weight: 600;
}

/* TOC Items */
.toc-item {
    display: block;
    padding: 8px 0;
    text-decoration: none;
    color: #9a9aa0;
    border-left: 3px solid transparent;
    padding-left: 15px;
    transition: all 0.2s ease;
    font-size: 14px;
}

.toc-item:hover {
    color: #3b82f6;
    border-left-color: #3b82f6;
    background: rgba(59, 130, 246, 0.1);
}

.toc-item.active {
    color: #3b82f6;
    border-left-color: #3b82f6;
    background: rgba(59, 130, 246, 0.15);
    font-weight: 500;
}

.toc-item.level-1 {
    font-weight: 600;
    margin-top: 10px;
}

.toc-item.level-2 {
    padding-left: 30px;
    font-size: 13px;
}

.toc-item.level-3 {
    padding-left: 45px;
    font-size: 13px;
}

.toc-item.level-4 {
    padding-left: 60px;
    font-size: 12px;
}

.toc-item.level-5,
.toc-item.level-6 {
    padding-left: 75px;
    font-size: 12px;
}

/* Main Content */
.main-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    padding: 20px 30px;
    border-bottom: 1px solid #2a2a2f;
    background: #18181b;
}

.content-body {
    flex: 1;
    overflow-y: auto;
    padding: 30px;
    background: #18181b;
    border-top: none;
}

/* Loading */
.loading {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 200px;
    font-size: 18px;
    color: #9a9aa0;
}

.loading::after {
    content: '';
    width: 20px;
    height: 20px;
    border: 2px solid #3b82f6;
    border-top: 2px solid transparent;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-left: 10px;
}

.error {
    color: #f87171;
    text-align: center;
    padding: 20px;
    font-size: 16px;
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

/* Markdown Content */
.content-body h1,
.content-body h2,
.content-body h3,
.content-body h4,
.content-body h5,
.content-body h6 {
    margin-top: 30px;
    margin-bottom: 15px;
    color: #ffffff;
    line-height: 1.3;
}

.content-body h1 {
    font-size: 32px;
    border-bottom: 2px solid #2a2a2f;
    padding-bottom: 10px;
}

.content-body h2 {
    font-size: 26px;
    border-bottom: 1px solid #2a2a2f;
    padding-bottom: 8px;
}

.content-body h3 {
    font-size: 22px;
}

.content-body h4 {
    font-size: 18px;
}

.content-body p {
    margin-bottom: 15px;
    color: #d1d1d6;
}

.content-body ul,
.content-body ol {
    margin: 15px 0;
    padding-left: 30px;
}

.content-body li {
    margin-bottom: 5px;
    color: #d1d1d6;
}

/* Code blocks */
.content-body pre {
    background: #1f1f23;
    border: 1px solid #2a2a2f;
    border-radius: 6px;
    padding: 15px;
    margin: 20px 0;
    overflow-x: auto;
}

.content-body code {
    background: #27272a;
    color: #93c5fd;
    padding: 2px 6px;
    border-radius: 3px;
    font-family: 'JetBrains Mono', 'Monaco', 'Menlo', 'Consolas', monospace;
    font-size: 90%;
}

.content-body pre code {
    background: none;
    padding: 0;
}

/* Blockquote */
.content-body blockquote {
    border-left: 4px solid #3b82f6;
    margin: 20px 0;
    padding: 10px 20px;
    background: #1f1f23;
    color: #9a9aa0;
    border-radius: 6px;
}

/* Tables */
.content-body table {
    width: 100%;
    border-collapse: collapse;
    margin: 20px 0;
}

.content-body th,
.content-body td {
    border: 1px solid #2a2a2f;
    padding: 12px;
    text-align: left;
}

.content-body th {
    background: #1f1f23;
    font-weight: 600;
    color: #ffffff;
}

.content-body td {
    color: #d1d1d6;
}

/* Responsive */
@media (max-width: 768px) {
    .documentation-container {
        flex-direction: column;
        height: auto;
    }

    .sidebar {
        width: 100%;
        height: auto;
        max-height: 200px;
    }

    .content-body {
        padding: 20px;
    }
}


