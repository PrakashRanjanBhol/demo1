transformData(
  CRS: TicketItem[] | null,
  SRS: { [key: string]: TicketItem[] } | null,
  Task: { [key: string]: TicketItem[] } | null,
  TC: { [key: string]: TicketItem[] } | null
): TreeNode[] {
  if (!CRS || CRS.length === 0) return [];

  return CRS.filter(crs => !crs.delete).map(crs => {
    const crsNode: TreeNode = {
      id: crs.jira_ticket || `Draft-${crs.id}`,
      title: crs.title,
      description: crs.description,
      jira_ticket: crs.jira_ticket,
      type: 'crs',
      originalId: crs.id,
      children: [],
      expanded: false
    };

    // SRS: Use CRS id as key (keep original behavior)
    if (SRS && SRS[crs.id]) {
      crsNode.children = SRS[crs.id].filter(srs => !srs.delete).map(srs => {
        const srsNode: TreeNode = {
          id: srs.jira_ticket || `Draft-${srs.id}`,
          title: srs.title,
          description: srs.description,
          jira_ticket: srs.jira_ticket,
          type: 'srs',
          originalId: srs.id,
          children: [],
          expanded: false
        };

        // Task and TC: Use SRS jira_ticket as key, fallback to id if null
        const srsKey = srs.jira_ticket || srs.id.toString();

        if (Task && Task[srsKey]) {
          const tasks = Task[srsKey].filter(task => !task.delete).map(task => ({
            id: task.jira_ticket || `Draft-${task.id}`,
            title: task.title,
            description: task.description,
            jira_ticket: task.jira_ticket,
            type: 'task' as const,
            originalId: task.id,
            expanded: false
          }));
          srsNode.children!.push(...tasks);
        }

        if (TC && TC[srsKey]) {
          const tcs = TC[srsKey].filter(tc => !tc.delete).map(tc => ({
            id: tc.jira_ticket || `Draft-${tc.id}`,
            title: tc.title,
            description: tc.description,
            jira_ticket: tc.jira_ticket,
            type: 'tc' as const,
            originalId: tc.id,
            expanded: false
          }));
          srsNode.children!.push(...tcs);
        }

        return srsNode;
      });
    }

    return crsNode;
  });
}
