import { Component, OnInit, ViewChild } from '@angular/core';
import { OverlayPanel } from 'primeng/overlaypanel';

interface FileNode {
  name: string;
  type: 'folder' | 'file';
  children?: FileNode[];
  isExpanded?: boolean;
  selected?: boolean;
  ticketKey?: string;
  queries?: string[];
}

interface RawProjectMap {
  [key: string]: {
    key: string;
    id: string;
    type: string;
    icon: string;
  };
}

interface Project {
  id: number;
  name: string;
  icon: string;
  isFavourite: boolean;
  structure: FileNode[];
}

@Component({
  selector: 'project-sidebar',
  templateUrl: './project-sidebar.component.html',
  styleUrls: ['./project-sidebar.component.scss']
})
export class ProjectSidebarComponent implements OnInit {
  @ViewChild('op') overlayPanel!: OverlayPanel;

  queryList: string[] = [];
  selectedFiles: FileNode[] = [];
  loadingProjectIds: number[] = [];

  favouriteLoadingIds: number[] = [];
  animateMap: { [id: number]: boolean } = {};

  rawAllProjects: RawProjectMap = {
    "1": { key: "Project Alpha", id: "1", type: "project", icon: "" },
    "2": { key: "Project Beta", id: "2", type: "project", icon: "" },
    "3": { key: "Project Gamma", id: "3", type: "project", icon: "" },
    "4": { key: "Project Delta", id: "4", type: "project", icon: "" },
    "5": { key: "Project Epsilon", id: "5", type: "project", icon: "" }
  };

  rawFavouriteProjects: RawProjectMap = {
    "1": { key: "Project Alpha", id: "1", type: "project", icon: "" },
    "2": { key: "Project Beta", id: "2", type: "project", icon: "" }
  };

  allProjects: Project[] = [];
  favouriteProjects: Project[] = [];

  ngOnInit() {
    this.allProjects = this.normalizeProjects(this.rawAllProjects);
    const favIds = Object.keys(this.rawFavouriteProjects);
    this.favouriteProjects = this.allProjects.filter(p => favIds.includes(p.id.toString()));
    this.allProjects.forEach(p => p.isFavourite = favIds.includes(p.id.toString()));
  }

  normalizeProjects(data: RawProjectMap): Project[] {
    return Object.entries(data).map(([id, value]) => ({
      id: Number(id),
      name: value.key,
      icon: value.icon,
      isFavourite: false,
      structure: [{ name: 'JIRA', type: 'folder', children: [], isExpanded: false }]
    }));
  }

  toggleExpand(project: Project) {
  const root = project.structure[0];

  if (root.isExpanded) {
    root.isExpanded = false;
    return;
  }

  root.isExpanded = true;

  if (!root.children || root.children.length === 0) {
    this.loadingProjectIds.push(project.id);
    root.children = undefined;

    // Trigger boom animation
    this.animateMap[project.id] = true;
    setTimeout(() => {
      this.animateMap[project.id] = false;
    }, 600);

    this.fetchJiraInfo(project.id).then(data => {
      root.children = this.transformJiraToNodes(data);
      this.loadingProjectIds = this.loadingProjectIds.filter(id => id !== project.id);
    });
  }
}

  isLoading(projectId: number): boolean {
    return this.loadingProjectIds.includes(projectId);
  }

  transformJiraToNodes(data: any): FileNode[] {
    return Object.entries(data).map(([category, value]: any) => ({
      name: category,
      type: 'folder',
      isExpanded: false,
      queries: value.queries,
      children: value.tickets.map((ticket: any) => ({
        name: `${ticket.key}: ${ticket.summary}`,
        type: 'file',
        ticketKey: ticket.key,
        queries: value.queries
      }))
    }));
  }

  fetchJiraInfo(projectId: number): Promise<any> {
    return new Promise(resolve => {
      setTimeout(() => {
        resolve({
          Task: {
            tickets: [
              { type: 'Task', summary: 'ABC', key: `T-${projectId}-1` },
              { type: 'Task', summary: 'EFG', key: `T-${projectId}-2` }
            ],
            queries: ['What is your name?', 'What is your age?']
          },
          Epic: {
            tickets: [
              { type: 'Epic', summary: 'XYZ', key: `E-${projectId}-1` },
              { type: 'Epic', summary: 'LMN', key: `E-${projectId}-2` }
            ],
            queries: ['What is your birth place?', 'What is your hobby?']
          }
        });
      }, 1500);
    });
  }

  onFileToggle(file: FileNode) {
    if (!file.selected) {
      if (this.selectedFiles.length >= 5) {
        alert('You can select a maximum of 5 tickets.');
        return;
      }
      file.selected = true;
      this.selectedFiles.push(file);
    } else {
      file.selected = false;
      this.selectedFiles = this.selectedFiles.filter(f => f !== file);
    }
  }

  showOverlay(event: MouseEvent, node: FileNode) {
    event.preventDefault();
    this.queryList = node.queries ?? [];
    this.overlayPanel.toggle(event);
  }

  askQuery(query: string) {
    alert(`Ask: ${query}`);
    this.overlayPanel.hide();
  }

  isFavouriteLoading(projectId: number): boolean {
    return this.favouriteLoadingIds.includes(projectId);
  }

  onFavouriteClick(project: Project) {
    if (this.isFavouriteLoading(project.id)) return;

    this.favouriteLoadingIds.push(project.id);

    // Simulate backend API call
    setTimeout(() => {
      project.isFavourite = !project.isFavourite;

      if (project.isFavourite) {
        this.favouriteProjects.push(project);
      } else {
        this.favouriteProjects = this.favouriteProjects.filter(p => p.id !== project.id);
      }

      // Trigger "boom" animation
      this.animateMap[project.id] = true;
      setTimeout(() => {
        this.animateMap[project.id] = false;
      }, 600);

      this.favouriteLoadingIds = this.favouriteLoadingIds.filter(id => id !== project.id);
    }, 1200);
  }
}











<p-overlayPanel #op [dismissable]="true">
    <div *ngIf="queryList.length">
        <div class="query-title">Suggested Queries:</div>
        <ul>
            <li *ngFor="let query of queryList">
                <button (click)="askQuery(query)" class="query-button">{{ query }}</button>
            </li>
        </ul>
    </div>
</p-overlayPanel>

<div class="sidebar">
    <div class="sidebar-scroll">
        <p-accordion [multiple]="true" styleClass="custom-accordion">

            <!-- All Projects -->
            <p-accordionTab header="All Projects">
                <div class="all-projects-grid">
                    <div *ngFor="let project of allProjects" class="project-card-container">
                        <div class="project-card" [class.loading]="isFavouriteLoading(project.id)"
                            [class.favourited]="project.isFavourite && !isFavouriteLoading(project.id) && animateMap[project.id]">
                            <div class="project-card-left">
                                <img [src]="project.icon" class="project-card-icon" alt="icon" />
                                <div class="project-card-name">{{ project.name }}</div>
                            </div>
                            <div class="project-card-right">
                                <i class="pi" [ngClass]="project.isFavourite ? 'pi-star-fill' : 'pi-star'"
                                    (click)="onFavouriteClick(project)"
                                    [ngStyle]="{ color: project.isFavourite ? '#ffc107' : '#888' }"
                                    [class.disabled]="isFavouriteLoading(project.id)"
                                    pTooltip="{{ project.isFavourite ? 'Unfavourite' : 'Mark as favourite' }}"
                                    tooltipPosition="left"></i>
                            </div>
                            <div class="card-loader" *ngIf="isFavouriteLoading(project.id)">
                                <div class="spinner"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </p-accordionTab>

            <!-- Favourite Projects -->
            <p-accordionTab header="Favourite Projects">
                <div class="favourite-projects">
                    <div *ngFor="let fav of favouriteProjects" class="fav-card" [class.loading]="isLoading(fav.id)"
                        [class.favourited]="animateMap[fav.id]">

                        <div class="card-header" (click)="toggleExpand(fav)">
                            {{ fav.name }}
                        </div>
                        <div class="folder-structure">
                            <ng-container *ngIf="fav.structure[0].isExpanded && !isLoading(fav.id)">
                                <ng-container
                                    *ngTemplateOutlet="recursiveList; context: { $implicit: fav.structure[0].children }">
                                </ng-container>
                            </ng-container>
                        </div>
                        <div class="card-loader" *ngIf="isLoading(fav.id)">
                            <div class="spinner"></div>
                        </div>

                    </div>
                </div>
            </p-accordionTab>

        </p-accordion>
    </div>

    <ng-template #recursiveList let-nodes>
        <ul class="tree-list">
            <li *ngFor="let node of nodes">
                <div class="node" [style.paddingLeft.px]="node.type === 'file' ? 20 : 8">
                    <span *ngIf="node.type === 'folder'" (click)="node.isExpanded = !node.isExpanded">
                        üìÅ {{ node.name }} <small>({{ node.isExpanded ? '-' : '+' }})</small>
                    </span>
                    <label *ngIf="node.type === 'file'" class="ticket-node" (contextmenu)="showOverlay($event, node)">
                        <input type="checkbox" [checked]="node.selected"
                            [disabled]="!node.selected && selectedFiles.length >= 5" (change)="onFileToggle(node)" />
                        üìÑ {{ node.name }}
                    </label>
                </div>
                <ng-container *ngIf="node.children && node.isExpanded">
                    <ng-container *ngTemplateOutlet="recursiveList; context: { $implicit: node.children }">
                    </ng-container>
                </ng-container>
            </li>
        </ul>
    </ng-template>
</div>












.sidebar {
    width: 380px;
    height: 100vh;
    background-color: #171717;
    border-right: 1px solid #2a2a2a;
    font-family: 'Segoe UI', sans-serif;
    font-size: 15px;
    color: #f1f1f1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.sidebar-scroll {
    flex: 1;
    overflow-y: auto;
}

.all-projects-grid {
    display: flex;
    flex-direction: column;
    gap: 12px;
    padding: 12px;
}

.project-card-container {
    position: relative;
}

.project-card {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: #1e1e1e;
    border: 1px solid #2a2a2a;
    border-radius: 10px;
    padding: 12px 16px;
    transition: transform 0.2s ease, background 0.2s ease;
    position: relative;
    cursor: pointer;
}

.project-card:hover {
    background-color: #2a2a2a;
    transform: scale(1.01);
}

.project-card.loading {
    pointer-events: none;
    opacity: 0.5;
    filter: blur(1px);
}

.project-card.favourited {
    animation: boom 0.4s ease;
}

@keyframes boom {
    0% {
        transform: scale(1);
        box-shadow: 0 0 0px transparent;
    }

    50% {
        transform: scale(1.05);
        box-shadow: 0 0 12px rgba(255, 193, 7, 0.4);
    }

    100% {
        transform: scale(1);
        box-shadow: none;
    }
}

.project-card-left {
    display: flex;
    align-items: center;
    gap: 10px;
}

.project-card-icon {
    width: 28px;
    height: 28px;
    border-radius: 4px;
    background: #333;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.project-card-icon:hover {
    transform: scale(1.1);
}

.project-card-name {
    font-weight: 500;
    font-size: 15px;
    color: #f1f1f1;
    letter-spacing: 0.3px;
}

.project-card-right {
    display: flex;
    align-items: center;
    justify-content: center;
}

.project-card-right i {
    font-size: 18px;
    cursor: pointer;
    transition: transform 0.3s ease;
}

.project-card-right i:hover {
    transform: scale(1.3) rotate(-10deg);
}

.project-card-right i.disabled {
    pointer-events: none;
    opacity: 0.6;
}

.project-card-right i.fav-active {
    animation: fav-pulse 0.4s ease-in-out;
}

@keyframes fav-pulse {
    0% {
        transform: scale(1) rotate(0deg);
    }

    50% {
        transform: scale(1.5) rotate(-20deg);
    }

    100% {
        transform: scale(1) rotate(0deg);
    }
}

.card-loader {
    position: absolute;
    inset: 0;
    background-color: rgba(23, 23, 23, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
    border-radius: 10px;
}

.spinner {
    width: 20px;
    height: 20px;
    border: 2px solid #999;
    border-top: 2px solid #ffc107;
    border-radius: 50%;
    animation: spin 0.8s linear infinite;
}

@keyframes spin {
    to {
        transform: rotate(360deg);
    }
}

.query-title {
    font-weight: bold;
    margin-bottom: 6px;
    font-size: 14px;
    color: #fff;
}

.query-button {
    background: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 4px 10px;
    margin: 4px 0;
    font-size: 13px;
    cursor: pointer;
    transition: background 0.2s ease;
}

.query-button:hover {
    background: #0056b3;
}

.fav-card {
    margin-bottom: 12px;
    border: 1px solid #2a2a2a;
    border-radius: 6px;
    background: #1e1e1e;
    overflow: hidden;
    box-shadow: 0 2px 5px rgba(255, 255, 255, 0.03);
}

.card-header {
    background: #222;
    padding: 10px 12px;
    cursor: pointer;
    font-weight: bold;
    border-bottom: 1px solid #2a2a2a;
    color: #eee;
}

.folder-structure {
    padding: 10px 14px;
}

.tree-list {
    list-style: none;
    margin: 0;
    padding: 0;
}

.node {
    margin-bottom: 8px;
    color: #ddd;
}

.node>span {
    display: inline-block;
    padding: 4px 8px;
    border-radius: 5px;
    transition: background 0.2s ease;
    cursor: pointer;
}

.node>span:hover {
    background: #2e2e2e;
}

.ticket-node {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 6px 10px;
    cursor: pointer;
    border-radius: 4px;
    margin-left: 8px;
    transition: background 0.2s, transform 0.2s;
    color: #e0e0e0;
}

.ticket-node:hover {
    background: #333;
    transform: translateX(2px);
}

.ticket-node input[type='checkbox'] {
    accent-color: #007bff;
}

.loading-placeholder {
    text-align: center;
    margin: 15px 0;
    font-size: 16px;
    color: #ccc;
}

.loading-placeholder .emoji {
    font-size: 18px;
    margin-bottom: 8px;
}

.loading-placeholder .dot-blink {
    display: flex;
    justify-content: center;
    gap: 6px;
}

.loading-placeholder .dot-blink span {
    font-size: 24px;
    animation: blink 1.4s infinite;
}

.loading-placeholder .dot-blink span:nth-child(2) {
    animation-delay: 0.2s;
}

.loading-placeholder .dot-blink span:nth-child(3) {
    animation-delay: 0.4s;
}

@keyframes blink {
    0% {
        opacity: 0.2;
    }

    20% {
        opacity: 1;
    }

    100% {
        opacity: 0.2;
    }
}

:host ::ng-deep .p-overlaypanel {
    background-color: #222;
    color: #eee;
    border: 1px solid #333;
    box-shadow: 0 2px 8px rgba(255, 255, 255, 0.05);
}

:host ::ng-deep .custom-accordion .p-accordion-header {
    background-color: #1f1f1f !important;
    color: #f1f1f1 !important;
    border: 1px solid #2a2a2a !important;
    padding: 10px 15px;
    font-weight: bold;
}

:host ::ng-deep .custom-accordion .p-accordion-content {
    background-color: #1a1a1a !important;
    border: 1px solid #2a2a2a;
    padding: 0;
    color: #ddd;
}


.fav-card.loading {
    pointer-events: none;
    opacity: 0.5;
    filter: blur(1px);
}

.fav-card.favourited {
    animation: boom 0.4s ease;
}
