// parent.component.html
<app-code-parser [chunkStream]="chunk$"></app-code-parser>


// parent.component.ts
chunk$ = new Subject<string>();

// whenever you get new chunk:
this.chunk$.next("1");
this.chunk$.next("0");
this.chunk$.next("0");
this.chunk$.next("vh");



// child.component.ts
import { Component, Input, OnInit } from '@angular/core';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-code-parser',
  templateUrl: './code-parser.component.html',
  styleUrls: ['./code-parser.component.css']
})
export class CodeParserComponent implements OnInit {
  @Input() chunkStream!: Observable<string>;

  htmlCode = '';
  cssCode = '';
  jsCode = '';

  private insideCodeBlock = false;
  private currentCodeType: 'html' | 'css' | 'js' | null = null;

  ngOnInit() {
    this.chunkStream.subscribe((chunk) => {
      this.processChunk(chunk);
    });
  }

  private processChunk(chunk: string) {
    if (chunk.trim().startsWith('```')) {
      if (!this.insideCodeBlock) {
        this.insideCodeBlock = true;
        this.currentCodeType = this.detectCodeType(chunk);
      } else {
        this.insideCodeBlock = false;
        this.currentCodeType = null;
      }
      return;
    }

    if (this.insideCodeBlock && this.currentCodeType) {
      switch (this.currentCodeType) {
        case 'html':
          this.htmlCode += chunk;
          break;
        case 'css':
          this.cssCode += chunk;
          break;
        case 'js':
          this.jsCode += chunk;
          break;
      }
    }
  }

  private detectCodeType(lang: string): 'html' | 'css' | 'js' | null {
    lang = lang.replace('```', '').trim().toLowerCase();
    if (lang.includes('html')) return 'html';
    if (lang.includes('css')) return 'css';
    if (lang.includes('js') || lang.includes('javascript')) return 'js';
    return null;
  }
}
