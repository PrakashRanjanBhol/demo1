const grouped = response.reduce((acc, point) => {
  const key = point.d_type;
  if (!acc[key]) acc[key] = [];
  acc[key].push([point.xcoord, point.ycoord]);
  return acc;
}, {} as Record<string, [number, number][]>);

// If you have explicit line coordinates, define them here
const linesData: [number, number][][] = [
  [[10, 20], [30, 40]],
  [[100, 200], [150, 250]]
];

// Scatter plot series (with check)
const scatterSeries = Object.entries(grouped).map(([category, data], index) => ({
  name: category,
  type: 'scatter',
  data,
  symbolSize: 10,
  itemStyle: {
    color: ['#91cc75', '#fac858', '#ee6666', '#73c0de'][index % 4]
  }
}));

// Line series â€” ONLY add if 'Line Defect' exists in scatter
const lineDefectExists = Object.keys(grouped).includes('Line Defect');

const lineSeries = lineDefectExists
  ? linesData.map(coords => ({
      type: 'line',
      data: coords,
      lineStyle: {
        color: 'orange',
        width: 2,
        type: 'solid'
      },
      showSymbol: false,
      name: 'Line Defect',
      silent: true // optional: prevent tooltip
    }))
  : [];





const series = [...scatterSeries, ...lineSeries];
