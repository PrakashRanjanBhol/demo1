// ========================================
// template-sidebar.component.ts
// ========================================
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { DialogModule } from 'primeng/dialog';

interface FormField {
  id: string;
  label: string;
  type: 'text' | 'textarea' | 'email' | 'number' | 'select' | 'date';
  placeholder?: string;
  options?: string[];
  required?: boolean;
}

interface Template {
  id: number;
  title: string;
  description: string;
  badge?: string;
  detailDescription?: string;
  formFields?: FormField[];
  category?: 'Code Generation' | 'Documentation' | 'Analysis' | 'Testing' | 'API';
}

@Component({
  selector: 'app-template-sidebar',
  standalone: true,
  imports: [CommonModule, FormsModule, DialogModule],
  templateUrl: './template-sidebar.component.html',
  styleUrls: ['./template-sidebar.component.css']
})
export class TemplateSidebarComponent {
  activeTab: 'predefined' | 'custom' = 'predefined';
  hasCustomTemplates: boolean = false;
  showDetailView: boolean = false;
  selectedTemplate: Template | null = null;
  formData: { [key: string]: any } = {};
  showCreateTemplateModal: boolean = false;
  selectedCategory: string = 'ALL';
  
  categories = ['ALL', 'Code Generation', 'Documentation', 'Analysis', 'Testing', 'API'];
  
  // Template Builder State
  newTemplate = {
    title: '',
    description: '',
    detailDescription: '',
    formFields: [] as FormField[]
  };
  
  currentField: FormField = {
    id: '',
    label: '',
    type: 'text',
    placeholder: '',
    required: false
  };
  
  fieldTypes: Array<{value: FormField['type'], label: string}> = [
    { value: 'text', label: 'Text Input' },
    { value: 'textarea', label: 'Text Area' },
    { value: 'email', label: 'Email' },
    { value: 'number', label: 'Number' },
    { value: 'date', label: 'Date' },
    { value: 'select', label: 'Dropdown' }
  ];
  
  selectOptions: string = '';

  predefinedTemplates: Template[] = [
    {
      id: 1,
      title: 'Business Proposal',
      description: 'Professional template for business proposals and pitches',
      badge: 'Popular',
      category: 'Documentation',
      detailDescription: 'Create a comprehensive business proposal with this professional template. Perfect for pitching new ideas, securing funding, or presenting strategic initiatives to stakeholders.',
      formFields: [
        { id: 'companyName', label: 'Company Name', type: 'text', placeholder: 'Enter company name', required: true },
        { id: 'projectName', label: 'Project Name', type: 'text', placeholder: 'Enter project name', required: true },
        { id: 'budget', label: 'Budget', type: 'number', placeholder: 'Enter estimated budget', required: false },
        { id: 'timeline', label: 'Timeline', type: 'select', options: ['1-3 months', '3-6 months', '6-12 months', '12+ months'], required: true },
        { id: 'description', label: 'Project Description', type: 'textarea', placeholder: 'Describe your project...', required: true }
      ]
    },
    {
      id: 2,
      title: 'Project Report',
      description: 'Comprehensive template for project documentation',
      category: 'Analysis',
      detailDescription: 'Document your project progress, milestones, and outcomes with this detailed report template. Ideal for project managers and team leads.',
      formFields: [
        { id: 'projectTitle', label: 'Project Title', type: 'text', placeholder: 'Enter project title', required: true },
        { id: 'reportDate', label: 'Report Date', type: 'date', required: true },
        { id: 'status', label: 'Project Status', type: 'select', options: ['On Track', 'At Risk', 'Delayed', 'Completed'], required: true },
        { id: 'summary', label: 'Executive Summary', type: 'textarea', placeholder: 'Provide a brief summary...', required: true }
      ]
    },
    {
      id: 3,
      title: 'Meeting Notes',
      description: 'Organized structure for meeting minutes and action items',
      badge: 'Recommended',
      category: 'Documentation',
      detailDescription: 'Capture meeting discussions, decisions, and action items efficiently. This template helps ensure nothing gets lost in communication.',
      formFields: [
        { id: 'meetingTitle', label: 'Meeting Title', type: 'text', placeholder: 'Enter meeting title', required: true },
        { id: 'meetingDate', label: 'Meeting Date', type: 'date', required: true },
        { id: 'attendees', label: 'Attendees', type: 'text', placeholder: 'List attendees', required: true },
        { id: 'agenda', label: 'Agenda', type: 'textarea', placeholder: 'Meeting agenda points...', required: true },
        { id: 'notes', label: 'Notes & Decisions', type: 'textarea', placeholder: 'Key discussion points and decisions...', required: true }
      ]
    },
    {
      id: 4,
      title: 'Marketing Plan',
      description: 'Strategic template for marketing campaigns and strategies',
      category: 'Analysis',
      detailDescription: 'Plan and execute successful marketing campaigns with this comprehensive template. Includes sections for target audience, channels, and metrics.',
      formFields: [
        { id: 'campaignName', label: 'Campaign Name', type: 'text', placeholder: 'Enter campaign name', required: true },
        { id: 'targetAudience', label: 'Target Audience', type: 'text', placeholder: 'Define your target audience', required: true },
        { id: 'channels', label: 'Marketing Channels', type: 'select', options: ['Social Media', 'Email', 'Content Marketing', 'Paid Ads', 'SEO'], required: true },
        { id: 'goals', label: 'Campaign Goals', type: 'textarea', placeholder: 'What do you want to achieve?', required: true }
      ]
    },
    {
      id: 5,
      title: 'Invoice Template',
      description: 'Professional invoice layout for billing clients',
      category: 'Documentation',
      detailDescription: 'Generate professional invoices for your clients with all necessary details and payment information.',
      formFields: [
        { id: 'clientName', label: 'Client Name', type: 'text', placeholder: 'Enter client name', required: true },
        { id: 'invoiceNumber', label: 'Invoice Number', type: 'text', placeholder: 'INV-001', required: true },
        { id: 'amount', label: 'Total Amount', type: 'number', placeholder: 'Enter amount', required: true },
        { id: 'dueDate', label: 'Due Date', type: 'date', required: true },
        { id: 'services', label: 'Services Provided', type: 'textarea', placeholder: 'List services or products...', required: true }
      ]
    },
    {
      id: 6,
      title: 'Resume Builder',
      description: 'Clean and modern resume template',
      category: 'Documentation',
      detailDescription: 'Build a professional resume that stands out. This template includes all essential sections for a compelling CV.',
      formFields: [
        { id: 'fullName', label: 'Full Name', type: 'text', placeholder: 'Enter your full name', required: true },
        { id: 'email', label: 'Email', type: 'email', placeholder: 'your.email@example.com', required: true },
        { id: 'position', label: 'Desired Position', type: 'text', placeholder: 'e.g., Software Engineer', required: true },
        { id: 'experience', label: 'Years of Experience', type: 'number', placeholder: 'Enter years', required: false },
        { id: 'summary', label: 'Professional Summary', type: 'textarea', placeholder: 'Brief professional summary...', required: true }
      ]
    },
    {
      id: 7,
      title: 'API Documentation',
      description: 'Generate comprehensive API documentation',
      category: 'API',
      detailDescription: 'Create detailed API documentation with endpoints, parameters, and response examples.',
      formFields: [
        { id: 'apiName', label: 'API Name', type: 'text', placeholder: 'Enter API name', required: true },
        { id: 'version', label: 'Version', type: 'text', placeholder: 'e.g., v1.0.0', required: true },
        { id: 'baseUrl', label: 'Base URL', type: 'text', placeholder: 'https://api.example.com', required: true },
        { id: 'description', label: 'API Description', type: 'textarea', placeholder: 'Describe your API...', required: true }
      ]
    },
    {
      id: 8,
      title: 'Code Review',
      description: 'Structured code review and feedback template',
      category: 'Code Generation',
      detailDescription: 'Provide comprehensive code review feedback with this structured template.',
      formFields: [
        { id: 'prTitle', label: 'PR Title', type: 'text', placeholder: 'Enter pull request title', required: true },
        { id: 'author', label: 'Author', type: 'text', placeholder: 'Developer name', required: true },
        { id: 'language', label: 'Programming Language', type: 'select', options: ['JavaScript', 'TypeScript', 'Python', 'Java', 'C#', 'Go'], required: true },
        { id: 'feedback', label: 'Review Feedback', type: 'textarea', placeholder: 'Your code review comments...', required: true }
      ]
    },
    {
      id: 9,
      title: 'Test Case Generator',
      description: 'Generate comprehensive test cases for your features',
      badge: 'Popular',
      category: 'Testing',
      detailDescription: 'Create detailed test cases with this template to ensure comprehensive testing coverage.',
      formFields: [
        { id: 'featureName', label: 'Feature Name', type: 'text', placeholder: 'Enter feature name', required: true },
        { id: 'testType', label: 'Test Type', type: 'select', options: ['Unit Test', 'Integration Test', 'E2E Test', 'Performance Test'], required: true },
        { id: 'scenario', label: 'Test Scenario', type: 'textarea', placeholder: 'Describe the test scenario...', required: true },
        { id: 'expectedResult', label: 'Expected Result', type: 'textarea', placeholder: 'What should happen?', required: true }
      ]
    },
    {
      id: 10,
      title: 'Bug Report',
      description: 'Detailed bug report template for issue tracking',
      category: 'Testing',
      detailDescription: 'Report bugs with all necessary details for quick resolution.',
      formFields: [
        { id: 'bugTitle', label: 'Bug Title', type: 'text', placeholder: 'Brief description of the bug', required: true },
        { id: 'severity', label: 'Severity', type: 'select', options: ['Critical', 'High', 'Medium', 'Low'], required: true },
        { id: 'stepsToReproduce', label: 'Steps to Reproduce', type: 'textarea', placeholder: 'List the steps...', required: true },
        { id: 'expectedBehavior', label: 'Expected Behavior', type: 'textarea', placeholder: 'What should happen?', required: true },
        { id: 'actualBehavior', label: 'Actual Behavior', type: 'textarea', placeholder: 'What actually happened?', required: true }
      ]
    },
    {
      id: 11,
      title: 'REST API Builder',
      description: 'Build REST API endpoint specifications',
      category: 'API',
      detailDescription: 'Define REST API endpoints with complete specifications including request and response formats.',
      formFields: [
        { id: 'endpoint', label: 'Endpoint Path', type: 'text', placeholder: '/api/users', required: true },
        { id: 'method', label: 'HTTP Method', type: 'select', options: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'], required: true },
        { id: 'description', label: 'Endpoint Description', type: 'textarea', placeholder: 'What does this endpoint do?', required: true },
        { id: 'authentication', label: 'Authentication Required', type: 'select', options: ['Yes', 'No'], required: true }
      ]
    },
    {
      id: 12,
      title: 'Function Generator',
      description: 'Generate code functions with documentation',
      category: 'Code Generation',
      detailDescription: 'Create well-documented functions with proper parameters and return types.',
      formFields: [
        { id: 'functionName', label: 'Function Name', type: 'text', placeholder: 'e.g., calculateTotal', required: true },
        { id: 'language', label: 'Programming Language', type: 'select', options: ['JavaScript', 'TypeScript', 'Python', 'Java', 'C#'], required: true },
        { id: 'purpose', label: 'Function Purpose', type: 'textarea', placeholder: 'What does this function do?', required: true },
        { id: 'parameters', label: 'Parameters', type: 'textarea', placeholder: 'List parameters and their types', required: false }
      ]
    }
  ];

  customTemplates: Template[] = [];

  switchTab(tab: 'predefined' | 'custom'): void {
    this.activeTab = tab;
    this.showDetailView = false;
    this.selectedTemplate = null;
    this.formData = {};
    this.selectedCategory = 'ALL';
  }
  
  selectCategory(category: string): void {
    this.selectedCategory = category;
  }
  
  get filteredPredefinedTemplates(): Template[] {
    if (this.selectedCategory === 'ALL') {
      return this.predefinedTemplates;
    }
    return this.predefinedTemplates.filter(t => t.category === this.selectedCategory);
  }

  selectTemplate(template: Template): void {
    this.selectedTemplate = template;
    this.showDetailView = true;
    this.formData = {};
  }

  goBack(): void {
    this.showDetailView = false;
    this.selectedTemplate = null;
    this.formData = {};
  }

  onAskButtonClick(): void {
    if (this.selectedTemplate) {
      console.log('=== Form Submission ===');
      console.log('Template:', this.selectedTemplate.title);
      console.log('Form Data:', this.formData);
      console.log('=====================');
      
      alert(`Form submitted successfully!\n\nTemplate: ${this.selectedTemplate.title}\n\nData: ${JSON.stringify(this.formData, null, 2)}`);
    }
  }

  createNewTemplate(): void {
    this.showCreateTemplateModal = true;
    this.resetTemplateBuilder();
  }
  
  resetTemplateBuilder(): void {
    this.newTemplate = {
      title: '',
      description: '',
      detailDescription: '',
      formFields: []
    };
    this.currentField = {
      id: '',
      label: '',
      type: 'text',
      placeholder: '',
      required: false
    };
    this.selectOptions = '';
  }
  
  addFieldToTemplate(): void {
    if (!this.currentField.label.trim()) {
      alert('Please enter a field label');
      return;
    }
    
    const fieldId = this.currentField.label.toLowerCase().replace(/\s+/g, '_') + '_' + Date.now();
    
    const newField: FormField = {
      id: fieldId,
      label: this.currentField.label,
      type: this.currentField.type,
      placeholder: this.currentField.placeholder,
      required: this.currentField.required
    };
    
    if (this.currentField.type === 'select') {
      if (!this.selectOptions.trim()) {
        alert('Please enter dropdown options');
        return;
      }
      newField.options = this.selectOptions.split(',').map(opt => opt.trim()).filter(opt => opt);
    }
    
    this.newTemplate.formFields.push(newField);
    
    this.currentField = {
      id: '',
      label: '',
      type: 'text',
      placeholder: '',
      required: false
    };
    this.selectOptions = '';
  }
  
  removeField(index: number): void {
    this.newTemplate.formFields.splice(index, 1);
  }
  
  saveTemplate(): void {
    if (!this.newTemplate.title.trim()) {
      alert('Please enter a template title');
      return;
    }
    
    if (!this.newTemplate.description.trim()) {
      alert('Please enter a template description');
      return;
    }
    
    if (this.newTemplate.formFields.length === 0) {
      alert('Please add at least one field to the template');
      return;
    }
    
    const template: Template = {
      id: this.customTemplates.length + 1,
      title: this.newTemplate.title,
      description: this.newTemplate.description,
      detailDescription: this.newTemplate.detailDescription || this.newTemplate.description,
      formFields: [...this.newTemplate.formFields]
    };
    
    this.customTemplates.push(template);
    this.hasCustomTemplates = true;
    
    console.log('Template created:', template);
    alert('Template created successfully!');
    
    this.showCreateTemplateModal = false;
    this.resetTemplateBuilder();
  }
  
  cancelTemplateCreation(): void {
    if (this.newTemplate.formFields.length > 0 || this.newTemplate.title.trim() || this.newTemplate.description.trim()) {
      if (!confirm('Are you sure you want to cancel? All unsaved changes will be lost.')) {
        return;
      }
    }
    this.showCreateTemplateModal = false;
    this.resetTemplateBuilder();
  }
}


// ========================================
// template-sidebar.component.html
// ========================================
<div class="sidebar">
  <!-- Header (Always Visible) -->
  <div class="sidebar-header">
    <div class="header-title">
      <div class="header-icon">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
          <polyline points="14 2 14 8 20 8"/>
          <line x1="16" y1="13" x2="8" y2="13"/>
          <line x1="16" y1="17" x2="8" y2="17"/>
          <polyline points="10 9 9 9 8 9"/>
        </svg>
      </div>
      <div class="header-text">
        <h2>Templates</h2>
        <p class="header-subtitle">Ask anything related to the template</p>
      </div>
    </div>
  </div>

  <!-- Main View (List) -->
  <div *ngIf="!showDetailView">
    <div class="sidebar-tabs">
      <div class="tab-buttons">
        <button 
          class="tab-btn" 
          [class.active]="activeTab === 'predefined'"
          (click)="switchTab('predefined')">
          Predefined
        </button>
        <button 
          class="tab-btn" 
          [class.active]="activeTab === 'custom'"
          (click)="switchTab('custom')">
          Custom
        </button>
      </div>
    </div>

    <div class="content-area">
      <!-- Predefined Templates -->
      <div *ngIf="activeTab === 'predefined'" class="tab-content">
        <!-- Category Filter -->
        <div class="category-filter">
          <button 
            *ngFor="let category of categories"
            class="category-btn"
            [class.active]="selectedCategory === category"
            (click)="selectCategory(category)">
            {{ category }}
          </button>
        </div>

        <!-- Template Cards -->
        <div 
          class="template-card" 
          *ngFor="let template of filteredPredefinedTemplates; let i = index"
          [style.animation-delay]="(i * 0.05) + 's'"
          (click)="selectTemplate(template)">
          <div class="card-header">
            <h3>{{ template.title }}</h3>
            <span class="category-badge" *ngIf="template.category">{{ template.category }}</span>
          </div>
          <p>{{ template.description }}</p>
          <span class="template-badge" *ngIf="template.badge">{{ template.badge }}</span>
        </div>

        <!-- No Results Message -->
        <div *ngIf="filteredPredefinedTemplates.length === 0" class="no-results">
          <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
          <p>No templates found in this category</p>
        </div>
      </div>

      <!-- Custom Templates (Empty State) -->
      <div *ngIf="activeTab === 'custom' && !hasCustomTemplates" class="tab-content">
        <div class="empty-state">
          <div class="empty-state-icon">📄</div>
          <h3>No Custom Templates</h3>
          <p>You haven't created any custom templates yet. Start by creating your first one!</p>
          <button class="create-btn" (click)="createNewTemplate()">+ Create New Template</button>
        </div>
      </div>

      <!-- Custom Templates (With Templates) -->
      <div *ngIf="activeTab === 'custom' && hasCustomTemplates" class="tab-content">
        <div style="margin-bottom: 1rem;">
          <button class="create-btn" style="width: 100%;" (click)="createNewTemplate()">+ Create New Template</button>
        </div>
        
        <div 
          class="template-card" 
          *ngFor="let template of customTemplates; let i = index"
          [style.animation-delay]="(i * 0.05) + 's'"
          (click)="selectTemplate(template)">
          <h3>{{ template.title }}</h3>
          <p>{{ template.description }}</p>
        </div>
      </div>
    </div>
  </div>

  <!-- Detail View (Form) -->
  <div *ngIf="showDetailView && selectedTemplate" class="detail-view-container">
    <div class="detail-top-section">
      <button class="back-btn" (click)="goBack()">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="19" y1="12" x2="5" y2="12"></line>
          <polyline points="12 19 5 12 12 5"></polyline>
        </svg>
      </button>
      <h2 class="detail-title">{{ selectedTemplate.title }}</h2>
    </div>

    <div class="detail-content">
      <div class="detail-description">
        <h3>About this template</h3>
        <p>{{ selectedTemplate.detailDescription }}</p>
      </div>

      <div class="detail-form">
        <h3>Fill in the details</h3>
        <form (ngSubmit)="onAskButtonClick()">
          <ng-container *ngFor="let field of selectedTemplate.formFields">
            <div class="form-group">
              <label [for]="field.id">
                {{ field.label }}
                <span *ngIf="field.required" class="required">*</span>
              </label>

              <input 
                *ngIf="field.type === 'text' || field.type === 'email' || field.type === 'number' || field.type === 'date'"
                [type]="field.type"
                [id]="field.id"
                [placeholder]="field.placeholder || ''"
                [(ngModel)]="formData[field.id]"
                [name]="field.id"
                [required]="field.required"
                class="form-input">

              <textarea 
                *ngIf="field.type === 'textarea'"
                [id]="field.id"
                [placeholder]="field.placeholder || ''"
                [(ngModel)]="formData[field.id]"
                [name]="field.id"
                [required]="field.required"
                rows="4"
                class="form-input form-textarea"></textarea>

              <select 
                *ngIf="field.type === 'select'"
                [id]="field.id"
                [(ngModel)]="formData[field.id]"
                [name]="field.id"
                [required]="field.required"
                class="form-input">
                <option value="" disabled selected>Select an option</option>
                <option *ngFor="let option of field.options" [value]="option">{{ option }}</option>
              </select>
            </div>
          </ng-container>

          <button type="submit" class="submit-btn">Ask</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- PrimeNG Modal for Create Template -->
<p-dialog 
  [(visible)]="showCreateTemplateModal" 
  [modal]="true" 
  [closable]="true"
  [draggable]="false"
  [resizable]="false"
  [style]="{width: '90vw', maxWidth: '800px'}"
  styleClass="template-builder-modal"
  (onHide)="cancelTemplateCreation()">
  
  <ng-template pTemplate="header">
    <div class="modal-header-content">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
        <polyline points="14 2 14 8 20 8"/>
        <line x1="16" y1="13" x2="8" y2="13"/>
      </svg>
      <span>Create Custom Template</span>
    </div>
  </ng-template>

  <div class="modal-content-wrapper">
    <!-- Template Info Section -->
    <div class="builder-section">
      <h3 class="builder-section-title">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
          <polyline points="14 2 14 8 20 8"/>
        </svg>
        Template Information
      </h3>
      
      <div class="form-group">
        <label for="templateTitle">Template Title <span class="required">*</span></label>
        <input 
          type="text" 
          id="templateTitle" 
          [(ngModel)]="newTemplate.title"
          placeholder="e.g., Customer Feedback Form"
          class="form-input">
      </div>

      <div class="form-group">
        <label for="templateDesc">Short Description <span class="required">*</span></label>
        <input 
          type="text" 
          id="templateDesc" 
          [(ngModel)]="newTemplate.description"
          placeholder="Brief description for the card"
          class="form-input">
      </div>

      <div class="form-group">
        <label for="templateDetailDesc">Detailed Description</label>
        <textarea 
          id="templateDetailDesc" 
          [(ngModel)]="newTemplate.detailDescription"
          placeholder="Detailed description shown in the template view"
          rows="3"
          class="form-input form-textarea"></textarea>
      </div>
    </div>

    <!-- Form Builder Section -->
    <div class="builder-section">
      <h3 class="builder-section-title">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
          <line x1="9" y1="3" x2="9" y2="21"/>
        </svg>
        Form Fields
      </h3>
      
      <div class="field-builder">
        <div class="form-group">
          <label for="fieldLabel">Field Label <span class="required">*</span></label>
          <input 
            type="text" 
            id="fieldLabel" 
            [(ngModel)]="currentField.label"
            placeholder="e.g., Customer Name"
            class="form-input">
        </div>

        <div class="form-row">
          <div class="form-group" style="flex: 1;">
            <label for="fieldType">Field Type</label>
            <select 
              id="fieldType" 
              [(ngModel)]="currentField.type"
              class="form-input">
              <option *ngFor="let type of fieldTypes" [value]="type.value">{{ type.label }}</option>
            </select>
          </div>

          <div class="form-group" style="flex: 0 0 auto;">
            <label for="fieldRequired" style="opacity: 0; user-select: none;">-</label>
            <div class="checkbox-wrapper">
              <input 
                type="checkbox" 
                id="fieldRequired" 
                [(ngModel)]="currentField.required"
                class="form-checkbox">
              <label for="fieldRequired" class="checkbox-label">Required</label>
            </div>
          </div>
        </div>

        <div class="form-group">
          <label for="fieldPlaceholder">Placeholder Text</label>
          <input 
            type="text" 
            id="fieldPlaceholder" 
            [(ngModel)]="currentField.placeholder"
            placeholder="Hint text for the field"
            class="form-input">
        </div>

        <div class="form-group" *ngIf="currentField.type === 'select'">
          <label for="selectOptions">Dropdown Options <span class="required">*</span></label>
          <input 
            type="text" 
            id="selectOptions" 
            [(ngModel)]="selectOptions"
            placeholder="Option 1, Option 2, Option 3"
            class="form-input">
          <small class="field-hint">Separate options with commas</small>
        </div>

        <button type="button" class="add-field-btn" (click)="addFieldToTemplate()">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <line x1="12" y1="5" x2="12" y2="19"></line>
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
          Add Field
        </button>
      </div>

      <!-- Added Fields List -->
      <div *ngIf="newTemplate.formFields.length > 0" class="added-fields">
        <h4 class="added-fields-title">Added Fields ({{ newTemplate.formFields.length }})</h4>
        <div class="field-item" *ngFor="let field of newTemplate.formFields; let i = index">
          <div class="field-item-content">
            <div class="field-item-header">
              <span class="field-item-label">{{ field.label }}</span>
              <span class="field-item-type">{{ field.type }}</span>
            </div>
            <div class="field-item-meta">
              <span *ngIf="field.required" class="field-badge">Required</span>
              <span *ngIf="field.placeholder" class="field-placeholder">{{ field.placeholder }}</span>
              <span *ngIf="field.options && field.options.length > 0" class="field-options-count">
                {{ field.options.length }} options
              </span>
            </div>
          </div>
          <button type="button" class="remove-field-btn" (click)="removeField(i)">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
      </div>

      <div *ngIf="newTemplate.formFields.length === 0" class="no-fields-message">
        <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
          <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
          <line x1="9" y1="3" x2="9" y2="21"/>
        </svg>
        <p>No fields added yet. Add your first field above.</p>
      </div>
    </div>
  </div>

  <ng-template pTemplate="footer">
    <div class="modal-footer-content">
      <button type="button" class="cancel-btn" (click)="cancelTemplateCreation()">Cancel</button>
      <button type="button" class="save-template-btn" (click)="saveTemplate()">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="20 6 9 17 4 12"></polyline>
        </svg>
        Save Template
      </button>
    </div>
  </ng-template>
</p-dialog>


// ========================================
// template-sidebar.component.css
// ========================================
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.sidebar {
  width: 320px;
  height: 100vh;
  background: #111113;
  border-right: 1px solid #2a2a2d;
  display: flex;
  flex-direction: column;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

.sidebar-header {
  padding: 1.25rem;
  border-bottom: 1px solid #2a2a2d;
}

.header-title {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.header-text {
  display: flex;
  flex-direction: column;
  gap: 0.125rem;
}

.header-icon {
  width: 2.5rem;
  height: 2.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  background: linear-gradient(135deg, #6366f1, #8b5cf6, #a855f7);
  border-radius: 0.625rem;
  color: white;
  flex-shrink: 0;
}

.header-icon svg {
  width: 1.375rem;
  height: 1.375rem;
}

.sidebar-header h2 {
  font-size: 1.25rem;
  font-weight: 600;
  color: #e8e8e8;
  margin: 0;
  line-height: 1.2;
}

.header-subtitle {
  font-size: 0.75rem;
  color: #9ca3af;
  margin: 0;
  line-height: 1.3;
}

.sidebar-tabs {
  padding: 1rem 1.25rem;
  border-bottom: 1px solid #2a2a2d;
}

.tab-buttons {
  display: flex;
  gap: 0.5rem;
}

.tab-btn {
  flex: 1;
  padding: 0.625rem 1rem;
  border: none;
  background: #1c1c1f;
  color: #9ca3af;
  font-size: 0.875rem;
  font-weight: 500;
  border-radius: 0.375rem;
  cursor: pointer;
  transition: all 0.3s ease;
}

.tab-btn:hover {
  background: #252528;
  color: #d1d5db;
}

.tab-btn.active {
  background: linear-gradient(135deg, #6366f1, #8b5cf6, #a855f7);
  color: white;
}

.content-area {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  position: relative;
}

.tab-content {
  animation: fadeInUp 0.4s ease-out;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(1.25rem);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.template-card {
  background: #1c1c1f;
  border: 1px solid #2a2a2d;
  border-radius: 0.5rem;
  padding: 1rem;
  margin-bottom: 0.75rem;
  cursor: pointer;
  transition: all 0.2s ease;
  animation: fadeInUp 0.4s ease-out;
  animation-fill-mode: both;
}

.template-card:hover {
  border-color: #8b5cf6;
  box-shadow: 0 0.125rem 0.75rem rgba(139, 92, 246, 0.3);
  transform: translateY(-0.125rem);
  background: #252528;
}

.card-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 0.5rem;
  margin-bottom: 0.375rem;
  flex-wrap: wrap;
}

.template-card h3 {
  font-size: 0.9375rem;
  font-weight: 600;
  color: #e8e8e8;
  margin: 0;
}

.template-card p {
  font-size: 0.8125rem;
  color: #9ca3af;
  line-height: 1.4;
  margin: 0;
}

.category-badge {
  display: inline-block;
  padding: 0.25rem 0.5rem;
  background: #1a1a1d;
  color: #8b5cf6;
  font-size: 0.6875rem;
  font-weight: 500;
  border-radius: 0.25rem;
  border: 1px solid #2a2a2d;
  white-space: nowrap;
}

.template-badge {
  display: inline-block;
  padding: 0.25rem 0.5rem;
  background: linear-gradient(135deg, rgba(99, 102, 241, 0.2), rgba(139, 92, 246, 0.2), rgba(168, 85, 247, 0.2));
  color: #c4b5fd;
  font-size: 0.6875rem;
  font-weight: 500;
  border-radius: 0.25rem;
  margin-top: 0.5rem;
  border: 1px solid rgba(139, 92, 246, 0.3);
}

.category-filter {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-bottom: 1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #2a2a2d;
}

.category-btn {
  padding: 0.375rem 0.75rem;
  background: #1c1c1f;
  border: 1px solid #2a2a2d;
  color: #9ca3af;
  font-size: 0.75rem;
  font-weight: 500;
  border-radius: 0.375rem;
  cursor: pointer;
  transition: all 0.2s ease;
  white-space: nowrap;
}

.category-btn:hover {
  background: #252528;
  color: #d1d5db;
  border-color: #3a3a3d;
}

.category-btn.active {
  background: linear-gradient(135deg, #6366f1, #8b5cf6, #a855f7);
  color: white;
  border-color: transparent;
}

.no-results {
  text-align: center;
  padding: 3rem 1.5rem;
  color: #6b7280;
}

.no-results svg {
  margin-bottom: 1rem;
  opacity: 0.5;
}

.no-results p {
  font-size: 0.875rem;
  line-height: 1.5;
}

.empty-state {
  text-align: center;
  padding: 2.5rem 1.25rem;
}

.empty-state-icon {
  width: 5rem;
  height: 5rem;
  margin: 0 auto 1rem;
  background: #1c1c1f;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 2.25rem;
}

.empty-state h3 {
  font-size: 1rem;
  font-weight: 600;
  color: #e8e8e8;
  margin-bottom: 0.5rem;
}

.empty-state p {
  font-size: 0.875rem;
  color: #9ca3af;
  margin-bottom: 1.25rem;
  line-height: 1.5;
}

.create-btn {
  background: linear-gradient(135deg, #6366f1, #8b5cf6, #a855f7);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.create-btn:hover {
  transform: translateY(-0.0625rem);
  box-shadow: 0 0.25rem 1rem rgba(139, 92, 246, 0.4);
  filter: brightness(1.1);
}

.content-area::-webkit-scrollbar {
  width: 0.375rem;
}

.content-area::-webkit-scrollbar-track {
  background: transparent;
}

.content-area::-webkit-scrollbar-thumb {
  background: #d0d0d0;
  border-radius: 0.1875rem;
}

.content-area::-webkit-scrollbar-thumb:hover {
  background: #b0b0b0;
}

/* Detail View Styles */
.detail-view-container {
  flex: 1;
  display: flex;
  flex-direction: column;
  animation: slideInRight 0.3s ease-out;
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(1.25rem);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.detail-top-section {
  padding: 1rem 1.25rem;
  border-bottom: 1px solid #2a2a2d;
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.back-btn {
  background: #1c1c1f;
  border: 1px solid #2a2a2d;
  color: #e8e8e8;
  width: 2rem;
  height: 2rem;
  border-radius: 0.375rem;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
  flex-shrink: 0;
  padding: 0;
}

.back-btn:hover {
  background: #252528;
  border-color: #8b5cf6;
  color: #8b5cf6;
}

.detail-title {
  font-size: 1.125rem;
  font-weight: 600;
  color: #e8e8e8;
  margin: 0;
}

.detail-content {
  flex: 1;
  overflow-y: auto;
  padding: 1.25rem;
}

.detail-description {
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: #1c1c1f;
  border-radius: 0.5rem;
  border: 1px solid #2a2a2d;
}

.detail-description h3 {
  font-size: 0.875rem;
  font-weight: 600;
  color: #e8e8e8;
  margin-bottom: 0.5rem;
}

.detail-description p {
  font-size: 0.8125rem;
  color: #9ca3af;
  line-height: 1.5;
}

.detail-form h3 {
  font-size: 0.875rem;
  font-weight: 600;
  color: #e8e8e8;
  margin-bottom: 1rem;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  font-size: 0.8125rem;
  font-weight: 500;
  color: #e8e8e8;
  margin-bottom: 0.375rem;
}

.required {
  color: #ef4444;
  margin-left: 0.125rem;
}

.form-input {
  width: 100%;
  padding: 0.625rem 0.75rem;
  background: #1c1c1f;
  border: 1px solid #2a2a2d;
  border-radius: 0.375rem;
  color: #e8e8e8;
  font-size: 0.875rem;
  transition: all 0.2s ease;
  font-family: inherit;
}

.form-input:focus {
  outline: none;
  border-color: #8b5cf6;
  box-shadow: 0 0 0 0.1875rem rgba(139, 92, 246, 0.1);
}

.form-input::placeholder {
  color: #6b7280;
}

.form-textarea {
  resize: vertical;
  min-height: 4rem;
}

.submit-btn {
  width: 100%;
  background: linear-gradient(135deg, #6366f1, #8b5cf6, #a855f7);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  margin-top: 1rem;
}

.submit-btn:hover {
  transform: translateY(-0.0625rem);
  box-shadow: 0 0.25rem 1rem rgba(139, 92, 246, 0.4);
  filter: brightness(1.1);
}

.detail-content::-webkit-scrollbar {
  width: 0.375rem;
}

.detail-content::-webkit-scrollbar-track {
  background: transparent;
}

.detail-content::-webkit-scrollbar-thumb {
  background: #d0d0d0;
  border-radius: 0.1875rem;
}

.detail-content::-webkit-scrollbar-thumb:hover {
  background: #b0b0b0;
}

/* PrimeNG Modal Customization */
::ng-deep .template-builder-modal .p-dialog-header {
  background: #111113;
  border-bottom: 1px solid #2a2a2d;
  padding: 1.25rem;
}

::ng-deep .template-builder-modal .p-dialog-content {
  background: #111113;
  padding: 1.5rem;
  max-height: 70vh;
  overflow-y: auto;
}

::ng-deep .template-builder-modal .p-dialog-footer {
  background: #111113;
  border-top: 1px solid #2a2a2d;
  padding: 1rem 1.5rem;
}

::ng-deep .template-builder-modal .p-dialog-header-close {
  color: #9ca3af;
}

::ng-deep .template-builder-modal .p-dialog-header-close:hover {
  color: #e8e8e8;
  background: #252528;
}

.modal-header-content {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-size: 1.125rem;
  font-weight: 600;
  color: #e8e8e8;
}

.modal-header-content svg {
  color: #8b5cf6;
}

.modal-content-wrapper {
  color: #e8e8e8;
}

.modal-footer-content {
  display: flex;
  gap: 0.75rem;
  justify-content: flex-end;
}

/* Template Builder Styles */
.builder-section {
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: #1c1c1f;
  border-radius: 0.5rem;
  border: 1px solid #2a2a2d;
}

.builder-section-title {
  font-size: 0.875rem;
  font-weight: 600;
  color: #e8e8e8;
  margin-bottom: 1rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.builder-section-title svg {
  color: #8b5cf6;
}

.field-builder {
  background: #0a0a0b;
  padding: 1rem;
  border-radius: 0.5rem;
  border: 1px solid #2a2a2d;
}

.form-row {
  display: flex;
  gap: 1rem;
  align-items: flex-end;
}

.checkbox-wrapper {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.625rem 0;
}

.form-checkbox {
  width: 1.125rem;
  height: 1.125rem;
  border-radius: 0.25rem;
  border: 1px solid #2a2a2d;
  background: #1c1c1f;
  cursor: pointer;
  accent-color: #8b5cf6;
}

.checkbox-label {
  font-size: 0.8125rem;
  color: #9ca3af;
  cursor: pointer;
  margin: 0;
  font-weight: 400;
}

.field-hint {
  display: block;
  font-size: 0.75rem;
  color: #6b7280;
  margin-top: 0.375rem;
}

.add-field-btn {
  width: 100%;
  background: #252528;
  color: #e8e8e8;
  border: 1px solid #2a2a2d;
  padding: 0.625rem 1rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin-top: 1rem;
}

.add-field-btn:hover {
  background: #2a2a2d;
  border-color: #8b5cf6;
  color: #8b5cf6;
}

.added-fields {
  margin-top: 1.5rem;
  padding-top: 1.5rem;
  border-top: 1px solid #2a2a2d;
}

.added-fields-title {
  font-size: 0.8125rem;
  font-weight: 600;
  color: #e8e8e8;
  margin-bottom: 0.75rem;
}

.field-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 0.75rem;
  padding: 0.75rem;
  background: #0a0a0b;
  border: 1px solid #2a2a2d;
  border-radius: 0.375rem;
  margin-bottom: 0.5rem;
  transition: all 0.2s ease;
}

.field-item:hover {
  border-color: #3a3a3d;
  background: #0d0d0f;
}

.field-item-content {
  flex: 1;
  min-width: 0;
}

.field-item-header {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 0.25rem;
  flex-wrap: wrap;
}

.field-item-label {
  font-size: 0.875rem;
  font-weight: 500;
  color: #e8e8e8;
}

.field-item-type {
  font-size: 0.6875rem;
  padding: 0.125rem 0.5rem;
  background: #252528;
  color: #9ca3af;
  border-radius: 0.25rem;
  text-transform: uppercase;
  font-weight: 500;
}

.field-item-meta {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.field-badge {
  font-size: 0.6875rem;
  padding: 0.125rem 0.5rem;
  background: linear-gradient(135deg, rgba(99, 102, 241, 0.2), rgba(139, 92, 246, 0.2));
  color: #c4b5fd;
  border-radius: 0.25rem;
  border: 1px solid rgba(139, 92, 246, 0.3);
}

.field-placeholder {
  font-size: 0.75rem;
  color: #6b7280;
  font-style: italic;
}

.field-options-count {
  font-size: 0.75rem;
  color: #9ca3af;
}

.remove-field-btn {
  background: transparent;
  border: 1px solid #2a2a2d;
  color: #9ca3af;
  width: 2rem;
  height: 2rem;
  border-radius: 0.375rem;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
  flex-shrink: 0;
  padding: 0;
}

.remove-field-btn:hover {
  background: #ef4444;
  border-color: #ef4444;
  color: white;
}

.no-fields-message {
  text-align: center;
  padding: 2rem 1rem;
  color: #6b7280;
  margin-top: 1.5rem;
  border-top: 1px solid #2a2a2d;
  padding-top: 1.5rem;
}

.no-fields-message svg {
  margin-bottom: 0.75rem;
  opacity: 0.5;
}

.no-fields-message p {
  font-size: 0.8125rem;
  line-height: 1.5;
}

.cancel-btn {
  background: #252528;
  color: #e8e8e8;
  border: 1px solid #2a2a2d;
  padding: 0.75rem 1.5rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.cancel-btn:hover {
  background: #2a2a2d;
  border-color: #3a3a3d;
}

.save-template-btn {
  background: linear-gradient(135deg, #6366f1, #8b5cf6, #a855f7);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 0.375rem;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.save-template-btn:hover {
  transform: translateY(-0.0625rem);
  box-shadow: 0 0.25rem 1rem rgba(139, 92, 246, 0.4);
  filter: brightness(1.1);
}

::ng-deep .template-builder-modal .p-dialog-content::-webkit-scrollbar {
  width: 0.375rem;
}

::ng-deep .template-builder-modal .p-dialog-content::-webkit-scrollbar-track {
  background: transparent;
}

::ng-deep .template-builder-modal .p-dialog-content::-webkit-scrollbar-thumb {
  background: #2a2a2d;
  border-radius: 0.1875rem;
}

::ng-deep .template-builder-modal .p-dialog-content::-webkit-scrollbar-thumb:hover {
  background: #3a3a3d;
}
