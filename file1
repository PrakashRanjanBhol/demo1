.carousel-wrapper {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  max-width: 100%;
  padding: 0.5rem;
}

.toggle-container-outer {
  flex: 1;
  overflow: hidden;
  position: relative;
}

.toggle-flex-container {
  display: flex;
  gap: 0.5rem;
  background-color: #1a1a1d;
  border-radius: 2rem;
  border: 1px solid #27272a;
  padding: 0.4rem;
  transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
}

.toggle-button {
  flex: 1 1 auto;
  text-align: center;
  padding: 0.6rem 1.2rem;
  color: #e0e0e0;
  border-radius: 1.5rem;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  user-select: none;
  font-size: 0.8rem;
  font-weight: 500;
  white-space: nowrap;
  background-color: transparent;
  position: relative;
  overflow: hidden;
}

.toggle-button::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(255, 255, 255, 0.05);
  border-radius: 1.5rem;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.toggle-button:hover::before {
  opacity: 1;
}

.toggle-button:hover {
  transform: translateY(-2px);
  color: #fff;
}

.toggle-button.active {
  background: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
  color: #FFF;
  font-weight: 600;
  box-shadow: 
    0 4px 12px rgba(99, 102, 241, 0.4),
    0 2px 6px rgba(139, 92, 246, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
  transform: translateY(-1px);
}

.toggle-button.active::before {
  display: none;
}

/* PrimeNG Button Overrides for Navigation */
.nav-button {
  width: 2.5rem !important;
  height: 2.5rem !important;
  background-color: #1a1a1d !important;
  border: 1px solid #27272a !important;
  color: #e0e0e0 !important;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
  flex-shrink: 0;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2) !important;
}

.nav-button .pi {
  font-size: 1.2rem;
  color: #e0e0e0;
  transition: color 0.3s ease;
}

.nav-button:hover:not(:disabled) {
  background: linear-gradient(135deg, #6366f1, #8b5cf6) !important;
  border-color: transparent !important;
  transform: scale(1.1);
  box-shadow: 0 4px 12px rgba(99, 102, 241, 0.4) !important;
}

.nav-button:hover:not(:disabled) .pi {
  color: #fff;
}

.nav-button:disabled {
  opacity: 0.3 !important;
  cursor: not-allowed !important;
  background-color: #1a1a1d !important;
}

.nav-button:disabled .pi {
  color: #666;
}

/* Smooth fade animation for options */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateX(10px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.toggle-button {
  animation: fadeIn 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .toggle-button {
    padding: 0.5rem 0.8rem;
    font-size: 0.75rem;
  }
  
  .nav-button {
    width: 2rem !important;
    height: 2rem !important;
  }
  
  .nav-button .pi {
    font-size: 1rem;
  }
}





<div class="carousel-wrapper">
  <button 
    *ngIf="showNavigation" 
    class="nav-button prev" 
    (click)="previous()"
    [disabled]="!canGoPrevious"
    pButton
    type="button"
    icon="pi pi-chevron-left"
    [rounded]="true"
    [text]="true"
  >
  </button>

  <div class="toggle-container-outer">
    <div class="toggle-flex-container">
      <div
        *ngFor="let option of visibleOptions"
        class="toggle-button"
        [class.active]="selectedAssistanceToggleType === option"
        (click)="assistanceToggleSwitch(option)"
      >
        {{ option }}
      </div>
    </div>
  </div>

  <button 
    *ngIf="showNavigation" 
    class="nav-button next" 
    (click)="next()"
    [disabled]="!canGoNext"
    pButton
    type="button"
    icon="pi pi-chevron-right"
    [rounded]="true"
    [text]="true"
  >
  </button>
</div>











import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-assistance-toggle-switch',
  templateUrl: './assistance-toggle.component.html',
  styleUrls: ['./assistance-toggle.component.css']
})
export class AssistanceToggleSwitchComponent {
  @Input() selectedAssistanceToggleType: string = 'General';
  @Output() assistanceToggleTypeChange = new EventEmitter<string>();

  options = ['General', 'Code RAG', 'Jira', 'Confluence', 'Reusable Components'];
  currentIndex = 0;
  maxVisible = 4;

  get visibleOptions(): string[] {
    if (this.options.length <= this.maxVisible) {
      return this.options;
    }
    return this.options.slice(this.currentIndex, this.currentIndex + this.maxVisible);
  }

  get showNavigation(): boolean {
    return this.options.length > this.maxVisible;
  }

  get canGoPrevious(): boolean {
    return this.currentIndex > 0;
  }

  get canGoNext(): boolean {
    return this.currentIndex + this.maxVisible < this.options.length;
  }

  assistanceToggleSwitch(option: string) {
    this.assistanceToggleTypeChange.emit(option);
  }

  previous() {
    if (this.canGoPrevious) {
      this.currentIndex--;
    }
  }

  next() {
    if (this.canGoNext) {
      this.currentIndex++;
    }
  }
}
