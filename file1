<div class="header">
    <!-- Action Cards Carousel -->
    <div class="action-cards-carousel">
        <button class="carousel-nav prev" (click)="scrollCarousel('prev')" 
                [disabled]="carouselIndex === 0">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="15 18 9 12 15 6"></polyline>
            </svg>
        </button>
        
        <div class="action-cards-wrapper" #carouselContainer>
            <div class="action-card" [class.active]="activeTab === 'overview'" (click)="setActiveTab('overview')">
                <div class="action-icon overview">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="7" height="7"></rect>
                        <rect x="14" y="3" width="7" height="7"></rect>
                        <rect x="14" y="14" width="7" height="7"></rect>
                        <rect x="3" y="14" width="7" height="7"></rect>
                    </svg>
                </div>
                <div class="action-content">
                    <h4>Overview</h4>
                    <p>Dashboard view</p>
                </div>
            </div>

            <div class="action-card" [class.active]="activeTab === 'crs'" (click)="setActiveTab('crs')">
                <div class="action-icon crs">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                        <polyline points="14 2 14 8 20 8"></polyline>
                        <line x1="12" y1="18" x2="12" y2="12"></line>
                        <line x1="9" y1="15" x2="15" y2="15"></line>
                    </svg>
                </div>
                <div class="action-content">
                    <h4>Create CRS</h4>
                    <p>Customer Requirements</p>
                </div>
            </div>

            <div class="action-card" [class.active]="activeTab === 'srs'" (click)="setActiveTab('srs')">
                <div class="action-icon srs">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                        <polyline points="14 2 14 8 20 8"></polyline>
                        <line x1="16" y1="13" x2="8" y2="13"></line>
                        <line x1="16" y1="17" x2="8" y2="17"></line>
                        <polyline points="10 9 9 9 8 9"></polyline>
                    </svg>
                </div>
                <div class="action-content">
                    <h4>Create SRS</h4>
                    <p>System Requirements</p>
                </div>
            </div>

            <div class="action-card" [class.active]="activeTab === 'task'" (click)="setActiveTab('task')">
                <div class="action-icon task">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M9 11l3 3L22 4"></path>
                        <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
                    </svg>
                </div>
                <div class="action-content">
                    <h4>Create Task</h4>
                    <p>Development task</p>
                </div>
            </div>

            <div class="action-card" [class.active]="activeTab === 'unittest'" (click)="setActiveTab('unittest')">
                <div class="action-icon testcase">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="9 11 12 14 22 4"></polyline>
                        <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
                    </svg>
                </div>
                <div class="action-content">
                    <h4>Create Test Case</h4>
                    <p>Quality assurance</p>
                </div>
            </div>
        </div>
        
        <button class="carousel-nav next" (click)="scrollCarousel('next')" 
                [disabled]="carouselIndex >= 1">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
        </button>
    </div>

    <!-- Carousel Indicators -->
    <div class="carousel-indicators">
        <span class="indicator" [class.active]="carouselIndex === 0" (click)="scrollToIndex(0)"></span>
        <span class="indicator" [class.active]="carouselIndex === 1" (click)="scrollToIndex(1)"></span>
    </div>

    <div class="header-controls">
        <!-- Keep your existing header controls as is -->
    </div>
</div>










/* Carousel Container */
.action-cards-carousel {
    display: flex;
    align-items: center;
    gap: 12px;
    flex: 1;
    position: relative;
    overflow: hidden;
    padding: 0 8px;
}

/* Carousel Navigation Buttons */
.carousel-nav {
    width: 32px;
    height: 32px;
    background: var(--sdlc-card-bg);
    border: 1px solid var(--sdlc-card-border);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    padding: 0;
    flex-shrink: 0;
    z-index: 2;
}

.carousel-nav svg {
    width: 16px;
    height: 16px;
    color: var(--sdlc-text-secondary);
    transition: color 0.3s ease;
}

.carousel-nav:hover:not(:disabled) {
    background: var(--sdlc-hover-bg);
    border-color: rgba(102, 126, 234, 0.5);
    transform: scale(1.1);
}

.carousel-nav:hover:not(:disabled) svg {
    color: var(--sdlc-text-primary);
}

.carousel-nav:disabled {
    opacity: 0.3;
    cursor: not-allowed;
}

/* Action Cards Wrapper for Carousel */
.action-cards-carousel .action-cards-wrapper {
    display: flex;
    gap: 0.75rem;
    flex-wrap: nowrap;
    overflow: hidden;
    transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Fixed width for each card to show exactly 4 at a time */
.action-cards-carousel .action-card {
    flex: 0 0 calc((100% - 2.25rem) / 4);
    min-width: calc((100% - 2.25rem) / 4);
    max-width: calc((100% - 2.25rem) / 4);
}

/* Overview Icon Styles */
.action-icon.overview {
    background: linear-gradient(135deg, rgba(168, 85, 247, 0.2) 0%, rgba(147, 51, 234, 0.2) 100%);
}

.action-icon.overview svg {
    stroke: var(--sdlc-accent-violet);
}

.action-card:hover .action-icon.overview,
.action-card.active .action-icon.overview {
    background: linear-gradient(135deg, rgba(168, 85, 247, 0.3) 0%, rgba(147, 51, 234, 0.3) 100%);
}

/* Carousel Indicators */
.carousel-indicators {
    display: flex;
    gap: 8px;
    justify-content: center;
    margin-top: 8px;
}

.indicator {
    width: 24px;
    height: 3px;
    background: var(--sdlc-border-primary);
    border-radius: 2px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.indicator:hover {
    background: var(--sdlc-card-border);
}

.indicator.active {
    background: var(--sdlc-accent-violet);
    box-shadow: 0 0 8px rgba(102, 126, 234, 0.5);
}

/* Hide carousel in minimized mode */
.slide-container.minimized .action-cards-carousel {
    display: none;
}

.slide-container.minimized .carousel-indicators {
    display: none;
}
















@ViewChild('carouselContainer') carouselContainer!: ElementRef;
carouselIndex = 0;

scrollCarousel(direction: 'prev' | 'next') {
    const container = this.carouselContainer.nativeElement;
    const cardWidth = container.querySelector('.action-card')?.offsetWidth || 0;
    const gap = 12;
    
    if (direction === 'next' && this.carouselIndex < 1) {
        this.carouselIndex++;
    } else if (direction === 'prev' && this.carouselIndex > 0) {
        this.carouselIndex--;
    }
    
    const translateX = -(cardWidth + gap) * this.carouselIndex;
    container.style.transform = `translateX(${translateX}px)`;
}

scrollToIndex(index: number) {
    const container = this.carouselContainer.nativeElement;
    const cardWidth = container.querySelector('.action-card')?.offsetWidth || 0;
    const gap = 12;
    
    this.carouselIndex = index;
    const translateX = -(cardWidth + gap) * index;
    container.style.transform = `translateX(${translateX}px)`;
}




