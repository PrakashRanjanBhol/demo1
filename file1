import { Component, OnInit, AfterViewInit, ElementRef, ViewChild, HostListener } from '@angular/core';

interface TocItem {
  id: string;
  text: string;
  level: number;
  element: HTMLElement;
}

@Component({
  selector: 'app-documentation',
  templateUrl: './documentation.component.html',
  styleUrls: ['./documentation.component.css']
})
export class DocumentationComponent implements OnInit, AfterViewInit {
  @ViewChild('mainContent', { static: false }) mainContent!: ElementRef<HTMLDivElement>;
  @ViewChild('sidebar', { static: false }) sidebar!: ElementRef<HTMLDivElement>;
  @ViewChild('contentDiv', { static: false }) contentDiv!: ElementRef<HTMLDivElement>;

  tocItems: TocItem[] = [];
  activeIndex = 0;
  isResizing = false;
  ignoreScroll = false;

  markdownContent = `# Application Development Best Practices

A comprehensive guide to building robust, scalable, and maintainable applications.

## Code Organization <span class="badge">Essential</span>

### Directory Structure
Organize your codebase with a clear and logical directory structure:

\`\`\`
src/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ common/
â”‚   â””â”€â”€ pages/
â”œâ”€â”€ services/
â”œâ”€â”€ utils/
â”œâ”€â”€ hooks/
â”œâ”€â”€ styles/
â””â”€â”€ tests/
\`\`\`

### File Naming Conventions
- Use **kebab-case** for file names: \`user-profile.component.js\`
- Use **PascalCase** for component files: \`UserProfile.jsx\`
- Use **camelCase** for utility files: \`apiHelper.js\`

## Error Handling <span class="badge warning-badge">Important</span>

### Try-Catch Blocks
Always wrap potentially failing operations in try-catch blocks:

\`\`\`javascript
async function fetchUserData(userId) {
    try {
        const response = await api.get(\`/users/\${userId}\`);
        return response.data;
    } catch (error) {
        console.error('Failed to fetch user data:', error);
        throw new Error('User data unavailable');
    }
}
\`\`\`

### Global Error Handlers
Implement global error handlers to catch unhandled exceptions:

> **Note**: Always log errors with sufficient context for debugging while avoiding exposure of sensitive information.

## Performance Optimization

### Code Splitting
Implement code splitting to reduce initial bundle size:

- Use dynamic imports for route-based splitting
- Implement component-level lazy loading
- Optimize third-party library imports

### Caching Strategies
1. **Browser Caching**: Set appropriate cache headers
2. **Memory Caching**: Cache expensive computations
3. **Database Caching**: Use Redis or similar solutions

## Security Best Practices <span class="badge error-badge">Critical</span>

### Input Validation
- Validate all user inputs on both client and server side
- Use whitelist validation over blacklist
- Sanitize data before database operations

### Authentication & Authorization
- Implement proper session management
- Use secure password hashing (bcrypt, Argon2)
- Apply principle of least privilege

## Testing Strategy

### Testing Pyramid
1. **Unit Tests** (70%): Test individual functions and components
2. **Integration Tests** (20%): Test component interactions
3. **E2E Tests** (10%): Test complete user workflows

### Code Coverage
Maintain at least 80% code coverage while focusing on critical business logic.

## Documentation

### Code Comments
Write clear, concise comments that explain **why**, not **what**:

\`\`\`javascript
// Calculate tax based on regional regulations
// Different regions have varying tax structures
const tax = calculateRegionalTax(amount, region);
\`\`\`

### README Files
Every project should include:
- Setup instructions
- Development workflow
- Deployment process
- Contributing guidelines`;

  ngOnInit(): void {
    // Component initialization
  }

  ngAfterViewInit(): void {
    this.renderMarkdown();
    this.generateTOC();
    this.setupScrollSpy();
  }

  private renderMarkdown(): void {
    if (this.contentDiv) {
      this.contentDiv.nativeElement.innerHTML = this.parseMarkdown(this.markdownContent);
      this.highlightCode();
    }
  }

  private parseMarkdown(markdown: string): string {
    return markdown
      .replace(/^### (.*$)/gim, '<h3>$1</h3>')
      .replace(/^## (.*$)/gim, '<h2>$1</h2>')
      .replace(/^# (.*$)/gim, '<h1>$1</h1>')
      .replace(/\*\*(.*)\*\*/gim, '<strong>$1</strong>')
      .replace(/\*(.*)\*/gim, '<em>$1</em>')
      .replace(/```(\w+)?\n([\s\S]*?)```/gim, '<pre><code class="language-$1">$2</code></pre>')
      .replace(/`([^`]+)`/gim, '<code>$1</code>')
      .replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>')
      .replace(/^\d+\. (.*$)/gim, '<ol><li>$1</li></ol>')
      .replace(/^- (.*$)/gim, '<ul><li>$1</li></ul>')
      .replace(/\n/gim, '<br>');
  }

  private highlightCode(): void {
    // Simple syntax highlighting for demonstration
    const codeBlocks = this.contentDiv.nativeElement.querySelectorAll('pre code');
    codeBlocks.forEach(block => {
      block.innerHTML = block.innerHTML
        .replace(/(function|const|let|var|async|await|try|catch|if|else|return)/g, '<span class="keyword">$1</span>')
        .replace(/('.*?'|".*?")/g, '<span class="string">$1</span>')
        .replace(/(\/\/.*)/g, '<span class="comment">$1</span>');
    });
  }

  private generateTOC(): void {
    if (!this.contentDiv) return;

    const headers = this.contentDiv.nativeElement.querySelectorAll('h1, h2, h3');
    this.tocItems = [];

    headers.forEach((header, index) => {
      const id = `heading-${index}`;
      header.id = id;
      
      this.tocItems.push({
        id,
        text: header.textContent || '',
        level: parseInt(header.tagName.charAt(1)),
        element: header as HTMLElement
      });
    });
  }

  private setupScrollSpy(): void {
    if (!this.mainContent) return;

    this.mainContent.nativeElement.addEventListener('scroll', () => {
      if (this.ignoreScroll) return;
      this.updateActiveLink();
    });
  }

  private updateActiveLink(): void {
    if (!this.mainContent || this.tocItems.length === 0) return;

    const scrollTop = this.mainContent.nativeElement.scrollTop;
    let currentIndex = 0;

    this.tocItems.forEach((item, index) => {
      const offset = item.element.offsetTop - this.mainContent.nativeElement.offsetTop;
      if (offset <= scrollTop + 100) {
        currentIndex = index;
      }
    });

    this.activeIndex = currentIndex;
  }

  onTocItemClick(index: number, event: Event): void {
    event.preventDefault();
    this.ignoreScroll = true;
    this.activeIndex = index;
    
    const targetElement = this.tocItems[index].element;
    targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
    
    setTimeout(() => {
      this.ignoreScroll = false;
    }, 1000);
  }

  onMouseDown(event: MouseEvent): void {
    this.isResizing = true;
    event.preventDefault();
  }

  @HostListener('document:mousemove', ['$event'])
  onMouseMove(event: MouseEvent): void {
    if (!this.isResizing || !this.sidebar) return;

    const newWidth = event.clientX;
    if (newWidth > 200 && newWidth < 500) {
      this.sidebar.nativeElement.style.width = `${newWidth}px`;
    }
  }

  @HostListener('document:mouseup')
  onMouseUp(): void {
    this.isResizing = false;
  }

  getTocItemClass(index: number): string {
    const level = this.tocItems[index]?.level || 1;
    const baseClass = `toc-item level-${level}`;
    return this.activeIndex === index ? `${baseClass} active` : baseClass;
  }
}







































<div class="app-container">
  <div class="sidebar" #sidebar>
    <div class="sidebar-header">
      <div class="header-card">
        <h3>
          <span class="icon">ðŸ“‹</span>
          Table of Contents
        </h3>
        <div class="sidebar-subtitle">Navigate through sections</div>
        <div class="best-practices-badge">
          <span class="checkmark">âœ“</span>
          Best Practices Guide
        </div>
      </div>
    </div>
    
    <div class="toc-container">
      <ul class="toc">
        <li *ngFor="let item of tocItems; let i = index" 
            [class]="getTocItemClass(i)">
          <a [href]="'#' + item.id" 
             (click)="onTocItemClick(i, $event)"
             [class.active]="activeIndex === i">
            {{ item.text }}
          </a>
        </li>
      </ul>
    </div>
  </div>

  <div class="resizer" 
       (mousedown)="onMouseDown($event)"></div>

  <div class="main-content" #mainContent>
    <div class="content" #contentDiv></div>
  </div>
</div>


























/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.app-container {
  display: flex;
  height: 100vh;
  background: #111113;
  color: #e4e4e7;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Open Sans', 'Helvetica Neue', sans-serif;
  overflow: hidden;
}

/* Sidebar Styles */
.sidebar {
  width: 350px;
  min-width: 350px;
  max-width: 350px;
  background: linear-gradient(145deg, #1a1a1d 0%, #0f0f11 50%, #1a1a1d 100%);
  border-right: 1px solid rgba(96, 165, 250, 0.15);
  overflow-y: auto;
  position: relative;
  box-shadow: 
    inset -1px 0 0 rgba(96, 165, 250, 0.1),
    4px 0 25px rgba(0, 0, 0, 0.4);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.sidebar::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 100%;
  background: 
    radial-gradient(circle at 25% 35%, rgba(96, 165, 250, 0.04) 0%, transparent 60%),
    radial-gradient(circle at 75% 65%, rgba(167, 139, 250, 0.03) 0%, transparent 60%),
    linear-gradient(135deg, rgba(96, 165, 250, 0.01) 0%, transparent 50%);
  pointer-events: none;
  z-index: 0;
}

.sidebar-header {
  position: relative;
  z-index: 1;
  padding: 0;
  border: none;
  background: none;
}

.header-card {
  margin: 28px 24px;
  background: linear-gradient(135deg, 
    rgba(96, 165, 250, 0.12) 0%, 
    rgba(167, 139, 250, 0.10) 45%, 
    rgba(59, 130, 246, 0.08) 100%);
  border: 1px solid rgba(96, 165, 250, 0.25);
  border-radius: 20px;
  padding: 28px 24px;
  position: relative;
  overflow: hidden;
  backdrop-filter: blur(15px);
  box-shadow: 
    0 10px 40px rgba(96, 165, 250, 0.12),
    inset 0 1px 0 rgba(255, 255, 255, 0.12),
    0 0 0 1px rgba(96, 165, 250, 0.05);
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
}

.header-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: linear-gradient(90deg, 
    transparent 0%, 
    rgba(96, 165, 250, 0.9) 15%, 
    rgba(167, 139, 250, 0.9) 50%,
    rgba(59, 130, 246, 0.9) 85%, 
    transparent 100%);
  border-radius: 20px 20px 0 0;
}

.header-card::after {
  content: '';
  position: absolute;
  top: -60%;
  left: -60%;
  width: 220%;
  height: 220%;
  background: 
    radial-gradient(circle at center, rgba(96, 165, 250, 0.04) 0%, transparent 65%),
    conic-gradient(from 0deg, transparent, rgba(167, 139, 250, 0.02), transparent);
  animation: etherealRotate 25s linear infinite;
  pointer-events: none;
}

.sidebar h3 {
  color: #f8fafc;
  font-size: 22px;
  font-weight: 900;
  margin-bottom: 10px;
  display: flex;
  align-items: center;
  gap: 14px;
  letter-spacing: -0.04em;
  position: relative;
  z-index: 2;
  text-shadow: 
    0 2px 12px rgba(96, 165, 250, 0.4),
    0 0 30px rgba(96, 165, 250, 0.2);
}

.sidebar .icon {
  font-size: 22px;
  filter: drop-shadow(0 0 15px rgba(96, 165, 250, 0.5));
  animation: gentleFloat 4s ease-in-out infinite;
}

.sidebar-subtitle {
  color: #cbd5e1;
  font-size: 15px;
  font-weight: 600;
  margin-top: 8px;
  opacity: 0.95;
  position: relative;
  z-index: 2;
  letter-spacing: -0.02em;
  background: linear-gradient(135deg, #cbd5e1 0%, #a78bfa 60%, #60a5fa 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.best-practices-badge {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  background: linear-gradient(135deg, 
    rgba(16, 185, 129, 0.25) 0%, 
    rgba(5, 150, 105, 0.20) 70%, 
    rgba(6, 182, 212, 0.15) 100%);
  border: 1px solid rgba(16, 185, 129, 0.4);
  color: #10b981;
  padding: 8px 16px;
  border-radius: 25px;
  font-size: 12px;
  font-weight: 800;
  margin-top: 16px;
  text-transform: uppercase;
  letter-spacing: 0.8px;
  position: relative;
  z-index: 2;
  box-shadow: 
    0 4px 15px rgba(16, 185, 129, 0.25),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
}

.best-practices-badge .checkmark {
  font-size: 11px;
  font-weight: 900;
  text-shadow: 0 0 8px rgba(16, 185, 129, 0.6);
}

.best-practices-badge:hover {
  transform: translateY(-1px);
  box-shadow: 
    0 6px 20px rgba(16, 185, 129, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.15);
}

/* Animations */
@keyframes gentleFloat {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg) scale(1); 
  }
  33% { 
    transform: translateY(-3px) rotate(1deg) scale(1.02); 
  }
  66% { 
    transform: translateY(-1px) rotate(-0.5deg) scale(1.01); 
  }
}

@keyframes etherealRotate {
  0% { transform: rotate(0deg) scale(1); }
  50% { transform: rotate(180deg) scale(1.05); }
  100% { transform: rotate(360deg) scale(1); }
}

/* TOC Styles */
.toc-container {
  padding: 32px 0 24px 0;
  position: relative;
  z-index: 1;
}

.toc {
  list-style: none;
  padding: 0 20px;
}

.toc-item {
  margin-bottom: 3px;
  position: relative;
}

.toc a {
  color: #a1a1aa;
  text-decoration: none;
  display: flex;
  align-items: center;
  padding: 16px 24px;
  border-radius: 14px;
  font-size: 15px;
  font-weight: 500;
  transition: all 0.35s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
  margin: 0 8px;
  letter-spacing: -0.02em;
  line-height: 1.4;
}

.toc a::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 4px;
  background: linear-gradient(180deg, 
    #60a5fa 0%, 
    #a78bfa 50%, 
    #06b6d4 100%);
  transform: scaleY(0);
  transform-origin: bottom;
  transition: transform 0.35s cubic-bezier(0.4, 0, 0.2, 1);
  border-radius: 0 3px 3px 0;
}

.toc a::after {
  content: '';
  position: absolute;
  inset: 0;
  background: linear-gradient(135deg, 
    rgba(96, 165, 250, 0.10) 0%, 
    rgba(167, 139, 250, 0.06) 50%,
    rgba(6, 182, 212, 0.04) 100%);
  opacity: 0;
  transition: opacity 0.35s ease;
  border-radius: inherit;
}

.toc a:hover {
  color: #60a5fa;
  transform: translateX(12px) scale(1.02);
  background: rgba(96, 165, 250, 0.08);
  box-shadow: 
    0 6px 20px rgba(96, 165, 250, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.08),
    0 0 0 1px rgba(96, 165, 250, 0.15);
}

.toc a:hover::before {
  transform: scaleY(1);
}

.toc a:hover::after {
  opacity: 1;
}

.toc a.active {
  background: linear-gradient(135deg, 
    rgba(96, 165, 250, 0.18) 0%, 
    rgba(167, 139, 250, 0.14) 50%,
    rgba(59, 130, 246, 0.10) 100%);
  color: #60a5fa;
  transform: translateX(12px) scale(1.02);
  font-weight: 700;
  box-shadow: 
    0 8px 30px rgba(96, 165, 250, 0.20),
    inset 0 1px 0 rgba(255, 255, 255, 0.12),
    0 0 0 1px rgba(96, 165, 250, 0.25);
  text-shadow: 0 0 20px rgba(96, 165, 250, 0.4);
}

.toc a.active::before {
  transform: scaleY(1);
  background: linear-gradient(180deg, #60a5fa, #a78bfa, #06b6d4);
  box-shadow: 0 0 15px rgba(96, 165, 250, 0.5);
}

.toc a.active::after {
  opacity: 1;
  background: linear-gradient(135deg, 
    rgba(96, 165, 250, 0.15) 0%, 
    rgba(167, 139, 250, 0.08) 100%);
}

/* Level-specific styles */
.toc .level-1 {
  font-weight: 700;
  font-size: 16px;
  margin: 12px 0 6px 0;
}

.toc .level-2 {
  margin-left: 20px;
  font-size: 15px;
  padding: 12px 20px;
}

.toc .level-2 a::before {
  content: 'â—¦';
  color: #60a5fa;
  margin-right: 14px;
  font-weight: bold;
  opacity: 0.7;
  font-size: 16px;
}

.toc .level-3 {
  margin-left: 40px;
  font-size: 14px;
  padding: 10px 16px;
  opacity: 0.95;
}

.toc .level-3 a::before {
  content: 'â–¸';
  color: #a78bfa;
  margin-right: 12px;
  font-size: 12px;
  opacity: 0.8;
}

/* Resizer */
.resizer {
  width: 6px;
  background: linear-gradient(180deg, 
    rgba(96, 165, 250, 0.1) 0%, 
    rgba(167, 139, 250, 0.08) 100%);
  cursor: col-resize;
  position: relative;
  transition: all 0.3s ease;
}

.resizer:hover {
  background: linear-gradient(180deg, 
    rgba(96, 165, 250, 0.3) 0%, 
    rgba(167, 139, 250, 0.25) 100%);
  box-shadow: 
    0 0 20px rgba(96, 165, 250, 0.4),
    inset 0 0 10px rgba(96, 165, 250, 0.2);
}

/* Main Content */
.main-content {
  flex: 1;
  overflow-y: auto;
  background: linear-gradient(135deg, 
    rgba(17, 17, 19, 0.95) 0%, 
    rgba(15, 15, 17, 0.98) 50%, 
    rgba(17, 17, 19, 0.95) 100%);
  position: relative;
}

.main-content::before {
  content: '';
  position: fixed;
  top: 0;
  right: 0;
  width: 70%;
  height: 100%;
  background: 
    radial-gradient(circle at 80% 20%, rgba(96, 165, 250, 0.02) 0%, transparent 60%),
    radial-gradient(circle at 20% 80%, rgba(167, 139, 250, 0.015) 0%, transparent 60%);
  pointer-events: none;
  z-index: 0;
}

.content {
  max-width: 900px;
  margin: 0 auto;
  padding: 60px 50px;
  line-height: 1.8;
  position: relative;
  z-index: 1;
}

/* Content Typography */
.content ::ng-deep h1 {
  color: #f8fafc;
  font-size: 3.2rem;
  font-weight: 900;
  margin-bottom: 24px;
  background: linear-gradient(135deg, 
    #60a5fa 0%, 
    #a78bfa 35%, 
    #06b6d4 70%, 
    #8b5cf6 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  letter-spacing: -0.05em;
  line-height: 1.1;
  text-shadow: 0 4px 20px rgba(96, 165, 250, 0.3);
}

.content ::ng-deep h2 {
  color: #60a5fa;
  font-size: 2rem;
  font-weight: 800;
  margin: 48px 0 24px 0;
  padding-bottom: 12px;
  border-bottom: 3px solid rgba(96, 165, 250, 0.3);
  position: relative;
  letter-spacing: -0.03em;
}

.content ::ng-deep h2::after {
  content: '';
  position: absolute;
  bottom: -3px;
  left: 0;
  width: 60px;
  height: 3px;
  background: linear-gradient(90deg, #60a5fa, #a78bfa);
  border-radius: 2px;
  box-shadow: 0 0 15px rgba(96, 165, 250, 0.5);
}

.content ::ng-deep h3 {
  color: #a78bfa;
  font-size: 1.4rem;
  font-weight: 700;
  margin: 36px 0 18px 0;
  position: relative;
  letter-spacing: -0.02em;
}

.content ::ng-deep h3::before {
  content: '';
  position: absolute;
  left: -20px;
  top: 50%;
  transform: translateY(-50%);
  width: 4px;
  height: 20px;
  background: linear-gradient(180deg, #a78bfa, #60a5fa);
  border-radius: 2px;
}

.content ::ng-deep p,
.content ::ng-deep ul,
.content ::ng-deep ol {
  color: #e2e8f0;
  margin-bottom: 20px;
  font-size: 16px;
  line-height: 1.8;
}

.content ::ng-deep ul,
.content ::ng-deep ol {
  margin-left: 28px;
}

.content ::ng-deep li {
  margin-bottom: 12px;
  padding-left: 10px;
  position: relative;
}

.content ::ng-deep ul li::before {
  content: 'â–¸';
  color: #60a5fa;
  position: absolute;
  left: -20px;
  font-weight: bold;
}

.content ::ng-deep ol li::before {
  color: #a78bfa;
  font-weight: bold;
}

/* Code Styling */
.content ::ng-deep code {
  background: linear-gradient(135deg, 
    rgba(39, 39, 42, 0.9) 0%, 
    rgba(24, 24, 27, 0.95) 100%);
  color: #fbbf24;
  padding: 4px 8px;
  border-radius: 6px;
  font-family: 'Fira Code', 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  font-size: 0.9em;
  border: 1px solid rgba(96, 165, 250, 0.2);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
}

.content ::ng-deep pre {
  background: linear-gradient(135deg, 
    rgba(24, 24, 27, 0.95) 0%, 
    rgba(39, 39, 42, 0.9) 100%);
  border: 1px solid rgba(96, 165, 250, 0.2);
  border-radius: 16px;
  margin: 32px 0;
  overflow: hidden;
  position: relative;
  box-shadow: 
    0 12px 40px rgba(0, 0, 0, 0.4),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

.content ::ng-deep pre::before {
  content: '';
  display: block;
  background: linear-gradient(135deg, 
    rgba(45, 45, 48, 0.95) 0%, 
    rgba(58, 58, 63, 0.9) 100%);
  border-bottom: 1px solid rgba(96, 165, 250, 0.2);
  padding: 16px 20px;
  position: relative;
}

.content ::ng-deep pre::after {
  content: '';
  position: absolute;
  top: 16px;
  left: 20px;
  width: 14px;
  height: 14px;
  border-radius: 50%;
  background: #ff5f57;
  box-shadow: 
    22px 0 0 #ffbd2e,
    44px 0 0 #28ca42,
    0 0 15px rgba(255, 95, 87, 0.4),
    22px 0 15px rgba(255, 189, 46, 0.4),
    44px 0 15px rgba(40, 202, 66, 0.4);
}

.content ::ng-deep pre code {
  display: block;
  padding: 24px;
  overflow-x: auto;
  background: transparent;
  border-radius: 0;
  margin: 0;
  border: none;
  box-shadow: none;
  font-size: 14px;
  line-height: 1.6;
}

/* Syntax highlighting */
.content ::ng-deep .keyword {
  color: #8b5cf6;
  font-weight: 600;
}

.content ::ng-deep .string {
  color: #10b981;
}

.content ::ng-deep .comment {
  color: #64748b;
  font-style: italic;
}

.content ::ng-deep blockquote {
  border-left: 4px solid #60a5fa;
  padding: 20px 24px;
  margin: 32px 0;
  font-style: italic;
  background: linear-gradient(135deg, 
    rgba(96, 165, 250, 0.08) 0%, 
    rgba(167, 139, 250, 0.04) 100%);
  border-radius: 0 12px 12px 0;
  position: relative;
  box-shadow: 
    0 4px 20px rgba(96, 165, 250, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.05);
}

.content ::ng-deep blockquote::before {
  content: '"';
  position: absolute;
  top: -10px;
  left: 10px;
  font-size: 4rem;
  color: rgba(96, 165, 250, 0.3);
  font-family: Georgia, serif;
  line-height: 1;
}

/* Badge Styles */
.content ::ng-deep .badge {
  display: inline-flex;
  align-items: center;
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  color: white;
  padding: 6px 14px;
  border-radius: 25px;
  font-size: 13px;
  font-weight: 700;
  margin-left: 12px;
  box-shadow: 
    0 4px 15px rgba(16, 185, 129, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
  letter-spacing: 0.3px;
}

.content ::ng-deep .warning-badge {
  background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
  box-shadow: 
    0 4px 15px rgba(245, 158, 11, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

.content ::ng-deep .error-badge {
  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
  box-shadow: 
    0 4px 15px rgba(239, 68, 68, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

/* Scrollbar Styling */
.sidebar::-webkit-scrollbar {
  width: 8px;
}

.sidebar::-webkit-scrollbar-track {
  background: rgba(17, 17, 19, 0.6);
  border-radius: 4px;
}

.sidebar::-webkit-scrollbar-thumb {
  background: linear-gradient(180deg, 
    rgba(96, 165, 250, 0.5) 0%, 
    rgba(167, 139, 250, 0.4) 100%);
  border-radius: 4px;
  border: 1px solid rgba(96, 165, 250, 0.2);
}

.sidebar::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(180deg, 
    rgba(96, 165, 250, 0.7) 0%, 
    rgba(167, 139, 250, 0.6) 100%);
  box-shadow: 0 0 10px rgba(96, 165, 250, 0.4);
}

.main-content::-webkit-scrollbar {
  width: 10px;
}

.main-content::-webkit-scrollbar-track {
  background: rgba(17, 17, 19, 0.8);
  border-radius: 5px;
}

.main-content::-webkit-scrollbar-thumb {
  background: linear-gradient(180deg, 
    rgba(96, 165, 250, 0.4) 0%, 
    rgba(167, 139, 250, 0.3) 100%);
  border-radius: 5px;
  border: 2px solid rgba(17, 17, 19, 0.5);
}

.main-content::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(180deg, 
    rgba(96, 165, 250, 0.6) 0%, 
    rgba(167, 139, 250, 0.5) 100%);
  box-shadow: 0 0 15px rgba(96, 165, 250, 0.3);
}

/* Responsive Design */
@media (max-width: 1024px) {
  .content {
    padding: 40px 30px;
  }
  
  .sidebar {
    width: 300px;
    min-width: 300px;
    max-width: 300px;
  }
  
  .content ::ng-deep h1 {
    font-size: 2.5rem;
  }
  
  .content ::ng-deep h2 {
    font-size: 1.8rem;
  }
}

@media (max-width: 768px) {
  .app-container {
    flex-direction: column;
  }
  
  .sidebar {
    width: 100%;
    min-width: auto;
    max-width: none;
    height: 250px;
    border-right: none;
    border-bottom: 1px solid rgba(96, 165, 250, 0.15);
  }
  
  .resizer {
    display: none;
  }
  
  .main-content {
    height: calc(100vh - 250px);
  }
  
  .content {
    padding: 30px 20px;
  }
  
  .header-card {
    margin: 20px 16px;
    padding: 20px 16px;
  }
  
  .sidebar h3 {
    font-size: 18px;
  }
  
  .toc {
    padding: 0 12px;
  }
  
  .toc a {
    padding: 12px 16px;
    margin: 0 4px;
  }
  
  .content ::ng-deep h1 {
    font-size: 2.2rem;
  }
  
  .content ::ng-deep h2 {
    font-size: 1.6rem;
  }
  
  .content ::ng-deep h3 {
    font-size: 1.3rem;
  }
}

@media (max-width: 480px) {
  .sidebar {
    height: 200px;
  }
  
  .main-content {
    height: calc(100vh - 200px);
  }
  
  .content {
    padding: 20px 15px;
  }
  
  .content ::ng-deep h1 {
    font-size: 1.9rem;
  }
  
  .content ::ng-deep h2 {
    font-size: 1.4rem;
  }
  
  .content ::ng-deep h3 {
    font-size: 1.2rem;
  }
  
  .content ::ng-deep pre code {
    font-size: 12px;
  }
}

/* Enhanced Focus States */
.toc a:focus-visible {
  outline: 2px solid #60a5fa;
  outline-offset: 2px;
}

/* Smooth scrolling */
html {
  scroll-behavior: smooth;
}

/* Selection styling */
::selection {
  background: rgba(96, 165, 250, 0.3);
  color: #f8fafc;
}

::-moz-selection {
  background: rgba(96, 165, 250, 0.3);
  color: #f8fafc;
}

/* Loading state animations */
@keyframes shimmer {
  0% {
    background-position: -468px 0;
  }
  100% {
    background-position: 468px 0;
  }
}

/* Additional hover effects */
.header-card:hover {
  transform: translateY(-2px);
  box-shadow: 
    0 15px 50px rgba(96, 165, 250, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.15),
    0 0 0 1px rgba(96, 165, 250, 0.08);
}

/* Subtle animations for active states */
@keyframes subtleGlow {
  0%, 100% { 
    opacity: 0.7; 
    transform: scale(1);
  }
  50% { 
    opacity: 1; 
    transform: scale(1.02);
  }
}

.toc a.active {
  animation: subtleGlow 4s ease-in-out infinite;
}
