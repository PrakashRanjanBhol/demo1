import { Component, OnInit, OnDestroy, ElementRef, ViewChild, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

// Declare external libraries
declare var marked: any;
declare var hljs: any;

interface MarkdownFile {
  folder: string;
  file: string;
}

interface ProcessedFile {
  folderName: string;
  fileName: string;
  content: string;
  path: string;
}

interface TocItem {
  id: string;
  text: string;
  level: number;
}

@Component({
  selector: 'app-documentation',
  standalone: true,
  imports: [CommonModule, HttpClientModule],
  template: `
    <div class="documentation-container">
      <!-- Sidebar -->
      <div class="sidebar" #sidebar>
        <h3>Table of Contents</h3>
        <div class="toc-container" #tocContainer>
          <div *ngIf="isLoading" class="loading">Loading TOC...</div>
          <div *ngIf="loadingError" class="error">Failed to load TOC</div>
          <div *ngIf="!isLoading && !loadingError">
            <a 
              *ngFor="let item of tocItems; let i = index"
              [href]="'#' + item.id"
              [class]="'toc-item level-' + item.level + (i === activeSection ? ' active' : '')"
              (click)="scrollToSection($event, item.id, i)">
              {{ item.text }}
            </a>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <div class="main-content">
        <div class="content-header">
          <h1>Documentation</h1>
        </div>
        <div class="content-body" #contentBody (scroll)="onScroll()">
          <div *ngIf="isLoading" class="loading">Loading documentation...</div>
          <div *ngIf="loadingError" class="error">{{ loadingError }}</div>
          <div *ngIf="!isLoading && !loadingError" [innerHTML]="htmlContent"></div>
        </div>
      </div>
    </div>

    <!-- Reload Button -->
    <button class="reload-btn" (click)="reloadContent()" title="Reload Content">
      â†»
    </button>
  `,
  styles: [`
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :host {
      display: block;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.6;
      color: #e4e4e7;
      background-color: #111113;
      height: 100vh;
    }

    .documentation-container {
      display: flex;
      height: 100vh;
      max-width: 1400px;
      margin: 0 auto;
      background: #1a1a1d;
      box-shadow: 0 0 20px rgba(0,0,0,0.3);
    }

    /* Sidebar Styles */
    .sidebar {
      width: 300px;
      background: #18181b;
      border-right: 1px solid #27272a;
      overflow-y: auto;
      padding: 20px;
    }

    .sidebar h3 {
      margin-bottom: 15px;
      color: #f4f4f5;
      font-size: 18px;
      font-weight: 600;
    }

    .toc-container {
      display: flex;
      flex-direction: column;
    }

    .toc-item {
      display: block;
      padding: 8px 0;
      text-decoration: none;
      color: #a1a1aa;
      border-left: 3px solid transparent;
      padding-left: 15px;
      transition: all 0.2s ease;
      font-size: 14px;
    }

    .toc-item:hover {
      color: #60a5fa;
      border-left-color: #60a5fa;
      background: rgba(96,165,250,0.1);
    }

    .toc-item.active {
      color: #60a5fa;
      border-left-color: #60a5fa;
      background: rgba(96,165,250,0.15);
      font-weight: 500;
    }

    .toc-item.level-1 {
      font-weight: 600;
      margin-top: 10px;
    }

    .toc-item.level-2 {
      padding-left: 30px;
      font-size: 13px;
    }

    .toc-item.level-3 {
      padding-left: 45px;
      font-size: 13px;
    }

    .toc-item.level-4 {
      padding-left: 60px;
      font-size: 12px;
    }

    .toc-item.level-5,
    .toc-item.level-6 {
      padding-left: 75px;
      font-size: 12px;
    }

    /* Main Content Styles */
    .main-content {
      flex: 1;
      display: flex;
      flex-direction: column;
    }

    .content-header {
      padding: 20px 30px;
      background: #1a1a1d;
      border-bottom: 1px solid #27272a;
    }

    .content-header h1 {
      color: #f4f4f5;
      font-size: 28px;
      font-weight: 700;
    }

    .content-body {
      flex: 1;
      overflow-y: auto;
      padding: 30px;
      background: #1a1a1d;
    }

    /* Loading States */
    .loading {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 200px;
      font-size: 18px;
      color: #a1a1aa;
    }

    .loading::after {
      content: '';
      width: 20px;
      height: 20px;
      border: 2px solid #60a5fa;
      border-top: 2px solid transparent;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-left: 10px;
    }

    .error {
      color: #ef4444;
      text-align: center;
      padding: 20px;
      font-size: 16px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Markdown Content Styles */
    :host ::ng-deep .content-body h1,
    :host ::ng-deep .content-body h2,
    :host ::ng-deep .content-body h3,
    :host ::ng-deep .content-body h4,
    :host ::ng-deep .content-body h5,
    :host ::ng-deep .content-body h6 {
      margin-top: 30px;
      margin-bottom: 15px;
      color: #f4f4f5;
      line-height: 1.3;
    }

    :host ::ng-deep .content-body h1 {
      font-size: 32px;
      border-bottom: 2px solid #27272a;
      padding-bottom: 10px;
    }

    :host ::ng-deep .content-body h2 {
      font-size: 26px;
      border-bottom: 1px solid #27272a;
      padding-bottom: 8px;
    }

    :host ::ng-deep .content-body h3 {
      font-size: 22px;
    }

    :host ::ng-deep .content-body h4 {
      font-size: 18px;
    }

    :host ::ng-deep .content-body p {
      margin-bottom: 15px;
      color: #d4d4d8;
    }

    :host ::ng-deep .content-body ul,
    :host ::ng-deep .content-body ol {
      margin: 15px 0;
      padding-left: 30px;
    }

    :host ::ng-deep .content-body li {
      margin-bottom: 5px;
      color: #d4d4d8;
    }

    :host ::ng-deep .content-body pre {
      background: #0f0f0f;
      border: 1px solid #27272a;
      border-radius: 6px;
      padding: 15px;
      margin: 20px 0;
      overflow-x: auto;
    }

    :host ::ng-deep .content-body code {
      background: #18181b;
      padding: 2px 6px;
      border-radius: 3px;
      font-family: 'Monaco', 'Menlo', 'Consolas', monospace;
      font-size: 90%;
      color: #fbbf24;
    }

    :host ::ng-deep .content-body pre code {
      background: none;
      padding: 0;
      color: #d4d4d8;
    }

    :host ::ng-deep .content-body blockquote {
      border-left: 4px solid #60a5fa;
      margin: 20px 0;
      padding: 10px 20px;
      background: #18181b;
      color: #a1a1aa;
    }

    :host ::ng-deep .content-body table {
      width: 100%;
      border-collapse: collapse;
      margin: 20px 0;
    }

    :host ::ng-deep .content-body th,
    :host ::ng-deep .content-body td {
      border: 1px solid #27272a;
      padding: 12px;
      text-align: left;
    }

    :host ::ng-deep .content-body th {
      background: #18181b;
      font-weight: 600;
      color: #f4f4f5;
    }

    :host ::ng-deep .content-body td {
      color: #d4d4d8;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .documentation-container {
        flex-direction: column;
        height: auto;
      }

      .sidebar {
        width: 100%;
        height: auto;
        max-height: 200px;
      }

      .content-body {
        padding: 20px;
      }
    }

    /* Reload Button */
    .reload-btn {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: #60a5fa;
      color: white;
      border: none;
      padding: 10px 15px;
      border-radius: 50%;
      cursor: pointer;
      font-size: 16px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.3);
      transition: all 0.2s ease;
    }

    .reload-btn:hover {
      background: #3b82f6;
      transform: translateY(-2px);
    }
  `]
})
export class DocumentationComponent implements OnInit, AfterViewInit, OnDestroy {
  @ViewChild('contentBody', { static: false }) contentBodyRef!: ElementRef<HTMLDivElement>;
  @ViewChild('sidebar', { static: false }) sidebarRef!: ElementRef<HTMLDivElement>;
  @ViewChild('tocContainer', { static: false }) tocContainerRef!: ElementRef<HTMLDivElement>;

  private destroy$ = new Subject<void>();

  htmlContent: SafeHtml = '';
  tocItems: TocItem[] = [];
  activeSection: number = 0;
  isLoading: boolean = true;
  loadingError: string = '';

  // Define your markdown file structure
  private markdownFiles: MarkdownFile[] = [
    { folder: 'Page1', file: 'page1.md' },
    { folder: 'Page2', file: 'page2.md' },
    { folder: 'Page3', file: 'page3.md' },
    { folder: 'Page4', file: 'page4.md' }
  ];

  constructor(
    private http: HttpClient,
    private sanitizer: DomSanitizer
  ) {}

  ngOnInit(): void {
    // Configure marked options if available
    if (typeof marked !== 'undefined') {
      marked.setOptions({
        gfm: true,
        breaks: false,
        pedantic: false
      });
    }

    this.loadAllMarkdownFiles();
  }

  ngAfterViewInit(): void {
    // Setup event listeners after view initialization
    setTimeout(() => {
      this.setupEventListeners();
    }, 100);
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private setupEventListeners(): void {
    // Window resize listener
    window.addEventListener('resize', () => {
      setTimeout(() => this.updateActiveSection(), 100);
    });
  }

  async loadAllMarkdownFiles(): Promise<void> {
    this.isLoading = true;
    this.loadingError = '';

    try {
      const filePromises = this.markdownFiles.map(({ folder, file }) => 
        this.loadMarkdownFile(folder, file)
      );

      const markdownFiles = await Promise.all(filePromises);
      this.processMarkdownFiles(markdownFiles);
      this.isLoading = false;
      
      // Generate TOC and setup highlighting after content is loaded
      setTimeout(() => {
        this.generateTOC();
        this.applySyntaxHighlighting();
      }, 100);
      
    } catch (error) {
      console.error('Error loading markdown files:', error);
      this.loadingError = 'Failed to load documentation files';
      this.isLoading = false;
    }
  }

  private async loadMarkdownFile(folder: string, file: string): Promise<ProcessedFile> {
    const path = `assets/markdown/${folder}/${file}`;
    
    try {
      const content = await this.http.get(path, { responseType: 'text' })
        .pipe(takeUntil(this.destroy$))
        .toPromise();
      
      return {
        folderName: folder,
        fileName: file,
        content: content || '',
        path
      };
    } catch (error) {
      console.warn(`Failed to load ${path}:`, error);
      return {
        folderName: folder,
        fileName: file,
        content: `# Error Loading Content\n\nFailed to load content from ${path}`,
        path
      };
    }
  }

  private processMarkdownFiles(markdownFiles: ProcessedFile[]): void {
    let combinedMarkdown = '';

    markdownFiles.forEach((file, index) => {
      // Simply add the markdown content as-is, using existing headers from .md files
      let content = file.content.trim();
      
      // Add some spacing between files
      if (index > 0) {
        combinedMarkdown += '\n\n';
      }
      
      combinedMarkdown += content;
    });

    const parsedHtml = this.parseMarkdown(combinedMarkdown);
    this.htmlContent = this.sanitizer.bypassSecurityTrustHtml(parsedHtml);
  }

  private parseMarkdown(md: string): string {
    if (typeof marked !== 'undefined') {
      return marked.parse(md);
    } else {
      console.error('Marked library not loaded');
      return `<p>Error: Markdown parser not available</p><pre>${md}</pre>`;
    }
  }

  private generateTOC(): void {
    if (!this.contentBodyRef?.nativeElement) return;

    const headers = this.contentBodyRef.nativeElement.querySelectorAll('h1, h2, h3, h4, h5, h6');
    this.tocItems = [];

    headers.forEach((header, index) => {
      const level = parseInt(header.tagName.charAt(1));
      const text = header.textContent?.replace(/\s+/g, ' ').trim() || '';
      const id = 'heading-' + index;

      header.id = id;
      this.tocItems.push({ id, text, level });
    });
  }

  private applySyntaxHighlighting(): void {
    if (this.contentBodyRef?.nativeElement && typeof hljs !== 'undefined') {
      this.contentBodyRef.nativeElement.querySelectorAll('pre code').forEach((block) => {
        hljs.highlightElement(block);
      });
    }
  }

  onScroll(): void {
    this.updateActiveSection();
  }

  private updateActiveSection(): void {
    if (!this.contentBodyRef?.nativeElement) return;

    const headers = this.contentBodyRef.nativeElement.querySelectorAll('h1, h2, h3, h4, h5, h6');
    let currentSection = 0;

    const scrollPos = this.contentBodyRef.nativeElement.scrollTop + 50;

    headers.forEach((header, index) => {
      const headerTop = (header as HTMLElement).offsetTop;
      if (headerTop <= scrollPos) {
        currentSection = index;
      }
    });

    if (this.activeSection !== currentSection) {
      this.activeSection = currentSection;
      this.updateSidebarScroll();
    }
  }

  private updateSidebarScroll(): void {
    if (!this.tocContainerRef?.nativeElement) return;

    const activeLink = this.tocContainerRef.nativeElement.querySelectorAll('a')[this.activeSection];
    if (activeLink) {
      activeLink.scrollIntoView({
        block: 'nearest',
        behavior: 'smooth'
      });
    }
  }

  scrollToSection(event: Event, id: string, index: number): void {
    event.preventDefault();

    const element = document.getElementById(id);
    if (element && this.contentBodyRef?.nativeElement) {
      const elementTop = element.offsetTop;

      this.contentBodyRef.nativeElement.scrollTo({
        top: elementTop - 20, // Add small offset
        behavior: 'smooth'
      });
    }

    this.activeSection = index;
  }

  reloadContent(): void {
    this.loadAllMarkdownFiles();
  }
}
