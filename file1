import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';

@Component({
  selector: 'app-llm-notification',
  template: `
    <div 
      class="notification" 
      [class.visible]="isVisible"
      *ngIf="show">
      <div class="notification-header">
        <div class="status-icon"></div>
        <h3 class="notification-title">{{ title }}</h3>
        <button class="close-btn" (click)="closeNotification()">&times;</button>
      </div>
      
      <div class="notification-message">
        {{ message }}
      </div>
      
      <div class="notification-actions">
        <button 
          class="retry-btn" 
          [disabled]="isRetrying"
          (click)="retryConnection()">
          {{ isRetrying ? 'Retrying...' : 'Retry' }}
        </button>
        <div class="status-text">
          {{ statusText }}
          <div class="loading-dots" *ngIf="showLoadingDots">
            <span></span>
            <span></span>
            <span></span>
          </div>
        </div>
      </div>
    </div>
  `,
  styleUrls: ['./llm-notification.component.css']
})
export class LlmNotificationComponent implements OnInit {
  @Input() title: string = 'Models Unavailable';
  @Input() message: string = 'All LLM models are currently unavailable. Please check your connection or try again later.';
  @Input() statusText: string = 'Checking status';
  @Input() autoHide: boolean = false;
  @Input() autoHideDelay: number = 10000;
  @Input() show: boolean = true;
  
  @Output() onRetry = new EventEmitter<void>();
  @Output() onClose = new EventEmitter<void>();
  
  isVisible: boolean = false;
  isRetrying: boolean = false;
  showLoadingDots: boolean = true;

  ngOnInit() {
    setTimeout(() => {
      this.isVisible = true;
    }, 100);

    if (this.autoHide) {
      setTimeout(() => {
        this.closeNotification();
      }, this.autoHideDelay);
    }
  }

  closeNotification() {
    this.isVisible = false;
    setTimeout(() => {
      this.show = false;
      this.onClose.emit();
    }, 300);
  }

  retryConnection() {
    this.isRetrying = true;
    this.onRetry.emit();
    setTimeout(() => {
      this.isRetrying = false;
    }, 2000);
  }
}























.notification {
  position: fixed;
  bottom: 20px;
  right: 20px;
  background: linear-gradient(135deg, rgba(30, 30, 34, 0.95) 0%, rgba(25, 25, 29, 0.98) 100%);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.08);
  border-radius: 16px;
  padding: 20px 24px;
  max-width: 380px;
  min-width: 320px;
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4),
              0 8px 16px rgba(0, 0, 0, 0.2),
              inset 0 1px 0 rgba(255, 255, 255, 0.05);
  transform: translateX(120%);
  opacity: 0;
  transition: all 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
  z-index: 1000;
}

.notification.visible {
  transform: translateX(0);
  opacity: 1;
}

.notification-header {
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 12px;
}

.status-icon {
  width: 32px;
  height: 32px;
  background: linear-gradient(135deg, #ff6b6b, #ee5a24);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  animation: pulse 2s infinite;
  box-shadow: 0 4px 12px rgba(255, 107, 107, 0.2);
}

.status-icon::before {
  content: 'âš ';
  color: white;
  font-size: 16px;
  font-weight: bold;
}

@keyframes pulse {
  0%, 100% {
    transform: scale(1);
    box-shadow: 0 4px 12px rgba(255, 107, 107, 0.2),
                0 0 0 0 rgba(238, 90, 36, 0.4);
  }
  50% {
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(255, 107, 107, 0.3),
                0 0 0 8px rgba(238, 90, 36, 0);
  }
}

.notification-title {
  font-size: 16px;
  font-weight: 600;
  color: #ffffff;
  margin: 0;
  flex: 1;
}

.close-btn {
  background: none;
  border: none;
  font-size: 20px;
  color: rgba(255, 255, 255, 0.5);
  cursor: pointer;
  padding: 4px;
  border-radius: 4px;
  transition: all 0.2s ease;
  line-height: 1;
}

.close-btn:hover {
  background: rgba(255, 255, 255, 0.1);
  color: rgba(255, 255, 255, 0.8);
}

.notification-message {
  color: rgba(255, 255, 255, 0.8);
  font-size: 14px;
  line-height: 1.5;
  margin-bottom: 16px;
}

.notification-actions {
  display: flex;
  gap: 12px;
  align-items: center;
}

.retry-btn {
  background: linear-gradient(135deg, #4299e1, #3182ce);
  color: white;
  border: none;
  padding: 8px 16px;
  border-radius: 8px;
  font-size: 13px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  box-shadow: 0 2px 4px rgba(66, 153, 225, 0.2);
}

.retry-btn:hover:not(:disabled) {
  background: linear-gradient(135deg, #3182ce, #2c5aa0);
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(66, 153, 225, 0.3);
}

.retry-btn:active:not(:disabled) {
  transform: translateY(0);
}

.retry-btn:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

.status-text {
  font-size: 12px;
  color: rgba(255, 255, 255, 0.6);
  display: flex;
  align-items: center;
  gap: 6px;
}

.loading-dots {
  display: inline-flex;
  gap: 2px;
}

.loading-dots span {
  width: 4px;
  height: 4px;
  background: rgba(255, 255, 255, 0.6);
  border-radius: 50%;
  animation: loadingDots 1.4s infinite ease-in-out;
}

.loading-dots span:nth-child(1) {
  animation-delay: -0.32s;
}

.loading-dots span:nth-child(2) {
  animation-delay: -0.16s;
}

@keyframes loadingDots {
  0%, 80%, 100% {
    transform: scale(0.8);
    opacity: 0.5;
  }
  40% {
    transform: scale(1);
    opacity: 1;
  }
}

@media (max-width: 480px) {
  .notification {
    left: 20px;
    right: 20px;
    max-width: none;
    min-width: auto;
    bottom: 20px;
  }
}



