// app.component.ts - Example usage with dark mode toggle
import { Component } from '@angular/core';
import { SpinnerOverlayComponent } from './spinner-overlay/spinner-overlay.component';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [SpinnerOverlayComponent],
  template: `
    <div [class.dark-mode]="isDarkMode">
      <div style="padding: 20px; text-align: center;">
        <button (click)="toggleTheme()" style="padding: 10px 20px; margin-bottom: 20px;">
          Toggle {{ isDarkMode ? 'Light' : 'Dark' }} Mode
        </button>
      </div>
      <app-spinner-overlay></app-spinner-overlay>
    </div>
  `,
  styles: [`
    :host {
      display: block;
      min-height: 100vh;
      transition: background-color 0.3s ease;
    }
    
    .dark-mode {
      background-color: #111827;
    }
  `]
})
export class AppComponent {
  isDarkMode = false;

  toggleTheme(): void {
    this.isDarkMode = !this.isDarkMode;
  }
}

/* 
Alternative: Set dark mode on document body
You can also add the 'dark-mode' class to document.body:

export class AppComponent {
  isDarkMode = false;

  toggleTheme(): void {
    this.isDarkMode = !this.isDarkMode;
    if (this.isDarkMode) {
      document.body.classList.add('dark-mode');
    } else {
      document.body.classList.remove('dark-mode');
    }
  }
}
*/











/* Light mode (default) */
:host {
  --sdlc-loader-bg-primary: #f5f5f5;
  --sdlc-loader-bg-overlay: transparent;
  --sdlc-loader-text-primary: #1f2937;
  --sdlc-loader-text-secondary: #6b7280;
  --sdlc-loader-spinner-primary: #6366f1;
  --sdlc-loader-spinner-secondary: #8b5cf6;
  --sdlc-loader-spinner-track: rgba(200, 200, 200, 0.2);
  --sdlc-loader-dot-color: #6366f1;
  --sdlc-loader-button-bg: #3498db;
  --sdlc-loader-button-bg-hover: #2980b9;
  --sdlc-loader-button-text: white;
  --sdlc-loader-box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  
  display: block;
  font-family: Arial, sans-serif;
  padding: 20px;
}

/* Dark mode */
:host-context(.dark-mode),
:host(.dark-mode) {
  --sdlc-loader-bg-primary: #1f2937;
  --sdlc-loader-bg-overlay: rgba(0, 0, 0, 0.3);
  --sdlc-loader-text-primary: #f9fafb;
  --sdlc-loader-text-secondary: #9ca3af;
  --sdlc-loader-spinner-primary: #818cf8;
  --sdlc-loader-spinner-secondary: #a78bfa;
  --sdlc-loader-spinner-track: rgba(100, 100, 100, 0.2);
  --sdlc-loader-dot-color: #818cf8;
  --sdlc-loader-button-bg: #2563eb;
  --sdlc-loader-button-bg-hover: #1d4ed8;
  --sdlc-loader-button-text: white;
  --sdlc-loader-box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
}

.container {
  position: relative;
  max-width: 600px;
  margin: 0 auto;
  padding: 30px;
  background: var(--sdlc-loader-bg-primary);
  border-radius: 8px;
  box-shadow: var(--sdlc-loader-box-shadow);
}

.content {
  transition: opacity 0.3s ease;
  color: var(--sdlc-loader-text-primary);
}

.content h2 {
  color: var(--sdlc-loader-text-primary);
  margin-top: 0;
}

.content p {
  color: var(--sdlc-loader-text-primary);
}

.container.loading .content {
  opacity: 0.3;
  pointer-events: none;
}

.spinner-overlay {
  display: none;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 10;
  background: var(--sdlc-loader-bg-overlay);
  border-radius: 8px;
}

.container.loading .spinner-overlay {
  display: flex;
}

.spinner {
  width: 50px;
  height: 50px;
  border: 4px solid var(--sdlc-loader-spinner-track);
  border-top: 4px solid var(--sdlc-loader-spinner-primary);
  border-right: 4px solid var(--sdlc-loader-spinner-secondary);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.loading-text {
  margin-top: 20px;
  color: var(--sdlc-loader-text-primary);
  font-size: 18px;
  font-weight: 600;
  font-style: italic;
  display: flex;
  align-items: center;
  gap: 8px;
}

.loading-dots {
  display: flex;
  gap: 4px;
}

.loading-dots span {
  width: 6px;
  height: 6px;
  background: var(--sdlc-loader-dot-color);
  border-radius: 50%;
  animation: blink 1.4s infinite;
}

.loading-dots span:nth-child(2) {
  animation-delay: 0.2s;
}

.loading-dots span:nth-child(3) {
  animation-delay: 0.4s;
}

.loading-subtext {
  margin-top: 8px;
  color: var(--sdlc-loader-text-secondary);
  font-size: 14px;
  font-style: italic;
}

@keyframes blink {
  0%, 60%, 100% { opacity: 0.2; }
  30% { opacity: 1; }
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

button {
  padding: 10px 20px;
  background: var(--sdlc-loader-button-bg);
  color: var(--sdlc-loader-button-text);
  border: none;
  border-radius: 5px;
  cursor: pointer;
  margin-top: 15px;
  transition: background 0.2s ease;
}

button:hover {
  background: var(--sdlc-loader-button-bg-hover);
}

button:focus {
  outline: 2px solid var(--sdlc-loader-spinner-primary);
  outline-offset: 2px;
}












<div class="container" [class.loading]="isLoading">
  <div class="content">
    <h2>Background Content</h2>
    <p>This is your main content. When loading, it will become semi-transparent but remain visible.</p>
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
    <button (click)="toggleLoading()">Toggle Loading State</button>
  </div>
  
  <div class="spinner-overlay">
    <div class="spinner"></div>
    <div class="loading-text">
      Loading CRS Information
      <div class="loading-dots">
        <span></span>
        <span></span>
        <span></span>
      </div>
    </div>
    <div class="loading-subtext">Please wait</div>
  </div>
</div>











import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-spinner-overlay',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './spinner-overlay.component.html',
  styleUrls: ['./spinner-overlay.component.css']
})
export class SpinnerOverlayComponent {
  isLoading = false;

  toggleLoading(): void {
    this.isLoading = !this.isLoading;
  }
}
