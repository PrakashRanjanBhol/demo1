// login.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})
export class LoginComponent implements OnInit {
  loginForm: FormGroup;
  isLoading = false;
  isSSOLoading = false;
  usernameError = '';
  passwordError = '';

  constructor(private fb: FormBuilder) {
    this.loginForm = this.fb.group({
      username: ['', Validators.required],
      password: ['', Validators.required],
      rememberMe: [false]
    });
  }

  ngOnInit(): void {
    // Load remembered username if exists
    const rememberedUsername = localStorage.getItem('rememberedUsername');
    if (rememberedUsername) {
      this.loginForm.patchValue({
        username: rememberedUsername,
        rememberMe: true
      });
    }
  }

  get isFormValid(): boolean {
    return this.loginForm.valid;
  }

  onLogin(): void {
    if (!this.isFormValid) return;

    this.isLoading = true;
    this.usernameError = '';
    this.passwordError = '';

    const { username, password, rememberMe } = this.loginForm.value;

    // Simulate API call
    this.mockLoginApiCall(username, password).then(
      (response) => {
        this.isLoading = false;
        
        // Handle remember me
        if (rememberMe) {
          localStorage.setItem('rememberedUsername', username);
        } else {
          localStorage.removeItem('rememberedUsername');
        }

        console.log('Login successful:', response);
        // Handle successful login (e.g., navigate to dashboard)
      },
      (error) => {
        this.isLoading = false;
        
        if (error.type === 'username') {
          this.usernameError = 'Invalid username';
        } else if (error.type === 'password') {
          this.passwordError = 'Invalid password';
        }
      }
    );
  }

  onSSOLogin(): void {
    this.isSSOLoading = true;
    console.log('SSO Login clicked');
    
    // Simulate SSO API call
    setTimeout(() => {
      this.isSSOLoading = false;
      console.log('SSO Login successful');
      // Handle successful SSO login
    }, 2000);
  }

  // Mock API call - Replace with actual HTTP service
  private mockLoginApiCall(username: string, password: string): Promise<any> {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        // Simulate API response
        if (username !== 'admin') {
          reject({ type: 'username', message: 'Invalid username' });
        } else if (password !== 'password123') {
          reject({ type: 'password', message: 'Invalid password' });
        } else {
          resolve({ success: true, token: 'mock-jwt-token' });
        }
      }, 1500);
    });
  }

  clearUsernameError(): void {
    this.usernameError = '';
  }

  clearPasswordError(): void {
    this.passwordError = '';
  }
}

// ============================================
// login.component.html
// ============================================
<div class="login-container">
  <div class="login-card">
    <h1 class="login-title">
      <span class="app-name">Test</span>
    </h1>
    <p class="login-subtitle">Please login to your account</p>

    <div class="login-methods">
      <!-- Username/Password Login -->
      <div class="login-section">
        <h3 class="section-title">Login with Credentials</h3>
        <form [formGroup]="loginForm" (ngSubmit)="onLogin()">
          <!-- Username Field -->
          <div class="form-group">
            <label for="username">Username</label>
            <input
              type="text"
              id="username"
              formControlName="username"
              [class.error]="usernameError"
              [disabled]="isSSOLoading"
              (input)="clearUsernameError()"
              placeholder="Enter username"
            />
            <span class="error-text" *ngIf="usernameError">{{ usernameError }}</span>
          </div>

          <!-- Password Field -->
          <div class="form-group">
            <label for="password">Password</label>
            <input
              type="password"
              id="password"
              formControlName="password"
              [class.error]="passwordError"
              [disabled]="isSSOLoading"
              (input)="clearPasswordError()"
              placeholder="Enter password"
            />
            <span class="error-text" *ngIf="passwordError">{{ passwordError }}</span>
          </div>

          <!-- Remember Me Checkbox -->
          <div class="remember-me">
            <label class="checkbox-label">
              <input type="checkbox" formControlName="rememberMe" [disabled]="isSSOLoading" />
              <span>Remember me</span>
            </label>
          </div>

          <!-- Login Button -->
          <button
            type="submit"
            class="login-btn"
            [disabled]="!isFormValid || isLoading || isSSOLoading"
          >
            <span class="spinner" *ngIf="isLoading"></span>
            {{ isLoading ? 'Logging In...' : 'Login' }}
          </button>
        </form>
      </div>

      <!-- Divider -->
      <div class="vertical-divider">
        <span>OR</span>
      </div>

      <!-- SSO Login -->
      <div class="login-section sso-section">
        <h3 class="section-title">Single Sign-On</h3>
        <p class="sso-description">Login using your organization's SSO</p>
        <button 
          type="button" 
          class="sso-btn" 
          (click)="onSSOLogin()"
          [disabled]="isLoading || isSSOLoading"
        >
          <span class="spinner" *ngIf="isSSOLoading"></span>
          <svg class="sso-icon" *ngIf="!isSSOLoading" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm-1-13h2v6h-2zm0 8h2v2h-2z"/>
          </svg>
          {{ isSSOLoading ? 'SSO Connecting...' : 'SSO Login' }}
        </button>
      </div>
    </div>
  </div>
</div>

// ============================================
// login.component.css
// ============================================
.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: calc(100vh - 60px);
  padding: 1.25rem;
}

.login-card {
  background: #ffffff;
  border-radius: 0.75rem;
  border: 1px solid #cbd5e0;
  padding: 2rem;
  width: 100%;
  max-width: 47rem;
}

.login-title {
  font-size: 1.5rem;
  font-weight: 700;
  color: #2d3748;
  margin: 0 0 0.375rem 0;
  text-align: center;
}

.app-name {
  color: #2d3748;
  font-size: 1.75rem;
  font-weight: 600;
  letter-spacing: 0.0625rem;
  position: relative;
  display: inline-block;
}

.login-subtitle {
  font-size: 0.8125rem;
  color: #718096;
  margin: 0 0 1.5rem 0;
  text-align: center;
}

.login-methods {
  display: flex;
  gap: 2rem;
  align-items: flex-start;
}

.login-section {
  flex: 1;
}

.section-title {
  font-size: 0.875rem;
  font-weight: 600;
  color: #2d3748;
  margin: 0 0 1rem 0;
  text-align: center;
}

.vertical-divider {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 2.5rem;
  min-height: 15.625rem;
}

.vertical-divider::before {
  content: '';
  width: 0.0625rem;
  flex: 1;
  background: #cbd5e0;
}

.vertical-divider::after {
  content: '';
  width: 0.0625rem;
  flex: 1;
  background: #cbd5e0;
}

.vertical-divider span {
  background: #ffffff;
  padding: 0.75rem 0;
  color: #a0aec0;
  font-size: 0.75rem;
  font-weight: 500;
}

.sso-section {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  min-height: 15.625rem;
}

.sso-description {
  font-size: 0.75rem;
  color: #718096;
  margin: 0 0 1.25rem 0;
  text-align: center;
}

.form-group {
  margin-bottom: 1rem;
}

.form-group label {
  display: block;
  font-size: 0.875rem;
  font-weight: 500;
  color: #4a5568;
  margin-bottom: 0.5rem;
}

.form-group input[type="text"],
.form-group input[type="password"] {
  width: 100%;
  padding: 0.625rem 0.875rem;
  font-size: 0.875rem;
  border: 1px solid #cbd5e0;
  border-radius: 0.5rem;
  transition: all 0.3s ease;
  box-sizing: border-box;
}

.form-group input[type="text"]:focus,
.form-group input[type="password"]:focus {
  outline: none;
  border-color: #667eea;
  border-width: 0.125rem;
}

.form-group input[type="text"]:disabled,
.form-group input[type="password"]:disabled {
  background-color: #f7fafc;
  cursor: not-allowed;
  opacity: 0.6;
}

.form-group input.error {
  border-color: #f56565;
  border-width: 0.125rem;
}

.error-text {
  display: block;
  color: #f56565;
  font-size: 0.75rem;
  margin-top: 0.375rem;
}

.remember-me {
  margin-bottom: 1.25rem;
}

.checkbox-label {
  display: flex;
  align-items: center;
  cursor: pointer;
  font-size: 0.8125rem;
  color: #4a5568;
}

.checkbox-label input[type="checkbox"] {
  margin-right: 0.5rem;
  cursor: pointer;
  width: 1rem;
  height: 1rem;
}

.checkbox-label input[type="checkbox"]:disabled {
  cursor: not-allowed;
  opacity: 0.6;
}

.login-btn {
  width: 100%;
  padding: 0.75rem;
  font-size: 0.9375rem;
  font-weight: 600;
  color: #ffffff;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border: none;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.login-btn:hover:not(:disabled) {
  transform: translateY(-0.125rem);
  box-shadow: 0 0.375rem 1.25rem rgba(102, 126, 234, 0.4);
}

.login-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.spinner {
  width: 1rem;
  height: 1rem;
  border: 0.125rem solid #ffffff;
  border-top-color: transparent;
  border-radius: 50%;
  animation: spin 0.6s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.sso-btn {
  width: 100%;
  max-width: 12.5rem;
  padding: 0.75rem 1.5rem;
  font-size: 0.9375rem;
  font-weight: 600;
  color: #4a5568;
  background: #ffffff;
  border: 0.125rem solid #cbd5e0;
  border-radius: 0.5rem;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.625rem;
}

.sso-btn:hover:not(:disabled) {
  border-color: #a0aec0;
  background: #f7fafc;
  transform: translateY(-0.125rem);
}

.sso-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.sso-btn .spinner {
  border-color: #4a5568;
  border-top-color: transparent;
}

.sso-icon {
  width: 1.25rem;
  height: 1.25rem;
}

@media (max-width: 768px) {
  .login-methods {
    flex-direction: column;
    gap: 1.25rem;
  }

  .vertical-divider {
    width: 100%;
    padding-top: 0;
    height: 2.5rem;
    min-height: auto;
  }

  .vertical-divider::before {
    width: auto;
    height: 0.0625rem;
    flex: 1;
  }

  .vertical-divider::after {
    width: auto;
    height: 0.0625rem;
    flex: 1;
  }

  .sso-section {
    padding-top: 0;
    min-height: auto;
  }
}
