import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-sidebar',
  templateUrl: './sidebar.component.html',
  styleUrls: ['./sidebar.component.css']
})
export class SidebarComponent implements OnInit {
  postsCount: number = 0;
  targetPostsCount: number = 1247;
  joinDate: string = 'March 15, 2023';
  membershipDuration: string = '2+ years of community engagement';

  user = {
    name: 'John Doe',
    initials: 'JD',
    role: 'Premium Member'
  };

  quickLinks = [
    { name: 'Playground', icon: 'fas fa-layer-group', href: '#' },
    { name: 'Statistics', icon: 'fas fa-chart-line', href: '#' },
    { name: 'Download', icon: 'fas fa-download', href: '#' },
    { name: 'Operations', icon: 'fas fa-cogs', href: '#' },
    { name: 'Dashboard', icon: 'fas fa-th-large', href: '#' },
    { name: 'Laboratory', icon: 'fas fa-flask', href: '#' }
  ];

  documentationSections = [
    {
      title: 'Getting Started',
      description: 'Learn the basics of navigating and using the application interface',
      badge: 'NEW'
    },
    {
      title: 'API Reference',
      description: 'Complete documentation for all available endpoints and methods',
      badge: null
    },
    {
      title: 'Best Practices',
      description: 'Tips and recommendations for optimal application usage',
      badge: null
    },
    {
      title: 'Troubleshooting',
      description: 'Common issues and their solutions to help you get unstuck',
      badge: null
    },
    {
      title: 'Release Notes',
      description: 'Latest updates, features, and improvements in this version',
      badge: 'v2.4'
    }
  ];

  constructor() { }

  ngOnInit(): void {
    this.animatePostsCounter();
    this.calculateMembershipDuration();
  }

  private animatePostsCounter(): void {
    const duration = 2000; // 2 seconds
    const startTime = performance.now();
    
    const updateCounter = (currentTime: number) => {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      this.postsCount = Math.floor(progress * this.targetPostsCount);
      
      if (progress < 1) {
        requestAnimationFrame(updateCounter);
      }
    };
    
    requestAnimationFrame(updateCounter);
  }

  private calculateMembershipDuration(): void {
    const joinDate = new Date('2023-03-15');
    const now = new Date();
    const diffTime = Math.abs(now.getTime() - joinDate.getTime());
    const diffYears = Math.floor(diffTime / (1000 * 60 * 60 * 24 * 365));
    
    if (diffYears >= 1) {
      this.membershipDuration = `${diffYears}+ years of community engagement`;
    } else {
      const diffMonths = Math.floor(diffTime / (1000 * 60 * 60 * 24 * 30));
      this.membershipDuration = `${diffMonths} months of community engagement`;
    }
  }

  onLinkClick(link: any): void {
    // Handle navigation logic here
    console.log('Clicked on:', link.name);
  }

  onDocumentationClick(section: any): void {
    // Handle documentation section click
    console.log('Clicked on documentation:', section.title);
  }
}















<div class="sidebar">
  <!-- User Stats Section -->
  <div class="user-stats">
    <div class="user-profile">
      <div class="user-avatar">{{ user.initials }}</div>
      <div class="user-info">
        <h3>{{ user.name }}</h3>
        <div class="user-role">{{ user.role }}</div>
      </div>
    </div>
    
    <div class="stats-grid">
      <div class="stat-item posts-counter">
        <div class="stat-header">
          <div class="stat-icon">
            <i class="fas fa-file-alt"></i>
          </div>
          <span class="stat-label">Total Posts</span>
        </div>
        <span class="stat-value">{{ postsCount | number }}</span>
        <div class="stat-subtitle">Published articles & updates</div>
      </div>
      
      <div class="stat-item">
        <div class="stat-header">
          <div class="stat-icon">
            <i class="fas fa-calendar-alt"></i>
          </div>
          <span class="stat-label">Member Since</span>
        </div>
        <span class="stat-value">{{ joinDate }}</span>
        <div class="stat-subtitle">{{ membershipDuration }}</div>
      </div>
    </div>
  </div>

  <!-- Quick Links Section -->
  <div class="quick-links">
    <div class="section-title">Quick Links</div>

    <a *ngFor="let link of quickLinks" 
       [href]="link.href" 
       class="link-item"
       (click)="onLinkClick(link)">
      <div class="link-icon">
        <i [class]="link.icon"></i>
      </div>
      {{ link.name }}
    </a>
  </div>

  <!-- Documentation Section -->
  <div class="documentation">
    <div class="section-title">
      <div class="link-icon">
        <i class="fas fa-book"></i>
      </div>
      User Manual
    </div>

    <div *ngFor="let section of documentationSections; let isLast = last" 
         class="doc-section"
         (click)="onDocumentationClick(section)">
      <div class="doc-title">
        {{ section.title }}
        <span *ngIf="section.badge" class="badge">{{ section.badge }}</span>
      </div>
      <div class="doc-description">
        {{ section.description }}
      </div>
    </div>

    <div class="divider" 
         *ngIf="documentationSections.length > 0 && documentationSections[documentationSections.length - 1].badge">
    </div>
  </div>
</div>
























.sidebar {
  width: 320px;
  height: 100vh;
  background: #111113;
  border-radius: 12px;
  padding: 24px 20px;
  position: relative;
  overflow-y: auto;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  color: white;
}

.sidebar::-webkit-scrollbar {
  width: 4px;
}

.sidebar::-webkit-scrollbar-track {
  background: rgba(255, 255, 255, 0.05);
  border-radius: 2px;
}

.sidebar::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.2);
  border-radius: 2px;
}

/* User Stats Section */
.user-stats {
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
  border: 1px solid rgba(102, 126, 234, 0.2);
  border-radius: 12px;
  padding: 20px;
  margin-bottom: 32px;
  position: relative;
  overflow: hidden;
}

.user-stats::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 3px;
  background: linear-gradient(135deg, #667eea, #764ba2);
}

.user-profile {
  display: flex;
  align-items: center;
  margin-bottom: 16px;
}

.user-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: linear-gradient(135deg, #667eea, #764ba2);
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 12px;
  font-weight: 600;
  font-size: 1rem;
  color: white;
}

.user-info h3 {
  color: #ffffff;
  font-size: 0.875rem;
  font-weight: 600;
  margin-bottom: 2px;
  margin: 0;
}

.user-info .user-role {
  color: #8b8b8d;
  font-size: 0.75rem;
  font-weight: 500;
}

.stats-grid {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.stat-item {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.06), rgba(255, 255, 255, 0.02));
  border-radius: 10px;
  padding: 16px;
  text-align: left;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  border: 1px solid rgba(255, 255, 255, 0.08);
  position: relative;
  overflow: hidden;
}

.stat-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 2px;
  background: linear-gradient(135deg, #667eea, #764ba2);
  transform: scaleX(0);
  transition: transform 0.3s ease;
}

.stat-item:hover::before {
  transform: scaleX(1);
}

.stat-item:hover {
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.04));
  transform: translateY(-2px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
  border-color: rgba(102, 126, 234, 0.2);
}

.stat-header {
  display: flex;
  align-items: center;
  margin-bottom: 8px;
}

.stat-icon {
  width: 18px;
  height: 18px;
  margin-right: 10px;
  opacity: 0.7;
  transition: all 0.3s ease;
  border-radius: 4px;
  padding: 3px;
  background: rgba(102, 126, 234, 0.08);
  display: flex;
  align-items: center;
  justify-content: center;
}

.stat-icon i {
  font-size: 12px;
  color: #667eea;
}

.stat-item:hover .stat-icon {
  opacity: 1;
  background: rgba(102, 126, 234, 0.15);
  transform: scale(1.05);
}

.stat-label {
  font-size: 0.6875rem;
  color: #8b8b8d;
  text-transform: uppercase;
  letter-spacing: 0.8px;
  font-weight: 600;
  flex: 1;
}

.stat-value {
  display: block;
  font-size: 1.25rem;
  font-weight: 700;
  color: #ffffff;
  margin-bottom: 2px;
  background: linear-gradient(135deg, #ffffff, #e0e0e2);
  background-clip: text;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.stat-subtitle {
  font-size: 0.6875rem;
  color: #9a9a9c;
  font-weight: 500;
  opacity: 0.9;
  line-height: 1.3;
}

.quick-links {
  margin-bottom: 32px;
}

.section-title {
  color: #8b8b8d;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 1px;
  margin-bottom: 16px;
  padding-left: 8px;
  display: flex;
  align-items: center;
}

.section-title .link-icon {
  margin-right: 8px;
}

.link-item {
  display: flex;
  align-items: center;
  padding: 12px 12px;
  margin-bottom: 4px;
  border-radius: 8px;
  color: #e0e0e2;
  text-decoration: none;
  font-size: 0.875rem;
  font-weight: 500;
  transition: all 0.2s ease;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.link-item:hover {
  background: rgba(255, 255, 255, 0.08);
  transform: translateX(2px);
  color: #ffffff;
}

.link-item::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  height: 100%;
  width: 3px;
  background: linear-gradient(135deg, #667eea, #764ba2);
  transform: scaleY(0);
  transition: transform 0.2s ease;
}

.link-item:hover::before {
  transform: scaleY(1);
}

.link-icon {
  width: 20px;
  height: 20px;
  margin-right: 12px;
  opacity: 0.8;
  transition: opacity 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.link-icon i {
  font-size: 14px;
  color: #e0e0e2;
}

.link-item:hover .link-icon {
  opacity: 1;
}

/* Documentation Section */
.documentation {
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  padding-top: 24px;
}

.doc-section {
  background: rgba(255, 255, 255, 0.03);
  border-radius: 8px;
  padding: 16px;
  margin-bottom: 12px;
  border: 1px solid rgba(255, 255, 255, 0.05);
  transition: all 0.2s ease;
  cursor: pointer;
}

.doc-section:hover {
  background: rgba(255, 255, 255, 0.05);
  border-color: rgba(255, 255, 255, 0.1);
}

.doc-title {
  display: flex;
  align-items: center;
  font-size: 0.8125rem;
  font-weight: 600;
  color: #e0e0e2;
  margin-bottom: 6px;
}

.doc-description {
  font-size: 0.6875rem;
  color: #8b8b8d;
  line-height: 1.4;
}

.badge {
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
  font-size: 0.5625rem;
  padding: 2px 6px;
  border-radius: 4px;
  margin-left: 8px;
  font-weight: 600;
}

.divider {
  height: 1px;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
  margin: 20px 0;
}

/* Animation for counting effect */
@keyframes countUp {
  from { 
    opacity: 0; 
    transform: translateY(10px); 
  }
  to { 
    opacity: 1; 
    transform: translateY(0); 
  }
}

.stat-value {
  animation: countUp 0.6s ease-out;
}

/* Pulse effect for posts counter */
.posts-counter {
  position: relative;
}

.posts-counter::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 10px;
  background: linear-gradient(135deg, rgba(102, 126, 234, 0.05), rgba(118, 75, 162, 0.05));
  opacity: 0;
  animation: pulse 3s infinite;
  pointer-events: none;
}

@keyframes pulse {
  0%, 100% { 
    opacity: 0; 
    transform: scale(1); 
  }
  50% { 
    opacity: 1; 
    transform: scale(1.01); 
  }
}

/* Shimmer effect */
.stat-item::after {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.06), transparent);
  transition: left 0.5s ease;
  pointer-events: none;
}

.stat-item:hover::after {
  left: 100%;
}





















<!-- Add this to your app.component.html or wherever you want to use the sidebar -->
<div style="background: #1a1a1c; padding: 20px; min-height: 100vh;">
  <app-sidebar></app-sidebar>
</div>

