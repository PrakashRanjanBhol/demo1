// app.component.ts
import { Component, OnInit, OnDestroy } from '@angular/core';

interface LogEntry {
  timestamp: string;
  type: 'info' | 'warning' | 'error';
  message: string;
}

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit, OnDestroy {
  isLoggerOpen = false;
  logEntries: LogEntry[] = [
    { timestamp: '10:23:45', type: 'info', message: '[INFO] Application started successfully' },
    { timestamp: '10:23:46', type: 'info', message: '[INFO] Database connection established' },
    { timestamp: '10:24:12', type: 'warning', message: '[WARN] High memory usage detected (85%)' },
    { timestamp: '10:24:45', type: 'info', message: '[INFO] User authentication successful' },
    { timestamp: '10:25:03', type: 'error', message: '[ERROR] Failed to load configuration file' },
    { timestamp: '10:25:15', type: 'info', message: '[INFO] Fallback configuration loaded' },
    { timestamp: '10:25:30', type: 'info', message: '[INFO] System ready for requests' }
  ];

  private logMessages = [
    '[INFO] Processing user request',
    '[INFO] Cache updated successfully',
    '[WARN] Slow query detected',
    '[ERROR] Network timeout occurred',
    '[INFO] Background task completed',
    '[WARN] Disk space low (15% remaining)',
    '[INFO] Session cleanup completed',
    '[INFO] API endpoint responding normally',
    '[WARN] High CPU usage detected',
    '[ERROR] Failed to connect to external service',
    '[INFO] User session refreshed',
    '[INFO] Database backup completed',
    '[WARN] Memory usage threshold reached',
    '[ERROR] Invalid request format'
  ];

  private logTypes: ('info' | 'warning' | 'error')[] = ['info', 'warning', 'error'];
  private intervalId: any;

  ngOnInit(): void {
    this.startAutoLogging();
  }

  ngOnDestroy(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId);
    }
  }

  toggleLogger(): void {
    this.isLoggerOpen = !this.isLoggerOpen;
    
    // Auto-scroll to bottom when opening
    if (this.isLoggerOpen) {
      setTimeout(() => {
        this.scrollToBottom();
      }, 100);
    }
  }

  private startAutoLogging(): void {
    this.intervalId = setInterval(() => {
      this.addRandomLogEntry();
    }, 3000);
  }

  private addRandomLogEntry(): void {
    const now = new Date();
    const timestamp = now.toTimeString().split(' ')[0];
    const randomType = this.logTypes[Math.floor(Math.random() * this.logTypes.length)];
    const randomMessage = this.logMessages[Math.floor(Math.random() * this.logMessages.length)];

    const newEntry: LogEntry = {
      timestamp,
      type: randomType,
      message: randomMessage
    };

    this.logEntries.push(newEntry);

    // Keep only last 50 entries
    if (this.logEntries.length > 50) {
      this.logEntries = this.logEntries.slice(-50);
    }

    // Auto-scroll to bottom after view update
    setTimeout(() => {
      this.scrollToBottom();
    }, 0);
  }

  private scrollToBottom(): void {
    const loggerContent = document.querySelector('.logger-content');
    if (loggerContent) {
      loggerContent.scrollTop = loggerContent.scrollHeight;
    }
  }
}

// app.component.html
<div class="app-container">
  <!-- Main content area -->
  <div class="main-content">
    <h1 class="demo-title">Angular Sliding Logger Demo</h1>
    <p class="demo-description">
      This Angular component demonstrates a sidebar with a sliding logger container. 
      Click the logger icon at the bottom of the sidebar to slide up the logger panel 
      from bottom to top. The logger shows at 50% height with auto-scrolling capabilities.
    </p>
    <div class="feature-list">
      <div class="feature-item">
        <div class="feature-icon">üìä</div>
        <div class="feature-text">Real-time log monitoring</div>
      </div>
      <div class="feature-item">
        <div class="feature-icon">üéØ</div>
        <div class="feature-text">Auto-categorized entries</div>
      </div>
      <div class="feature-item">
        <div class="feature-icon">‚ö°</div>
        <div class="feature-text">Smooth sliding animations</div>
      </div>
    </div>
  </div>

  <!-- Sidebar container -->
  <div class="sidebar">
    <!-- Main sidebar content -->
    <div class="sidebar-content">
      <h2 class="sidebar-title">Control Panel</h2>
      <div class="sidebar-item" [class.active]="false">
        <span class="sidebar-icon">üìä</span>
        Dashboard
      </div>
      <div class="sidebar-item">
        <span class="sidebar-icon">üìà</span>
        Analytics
      </div>
      <div class="sidebar-item">
        <span class="sidebar-icon">üìã</span>
        Reports
      </div>
      <div class="sidebar-item">
        <span class="sidebar-icon">‚öôÔ∏è</span>
        Settings
      </div>
      <div class="sidebar-item">
        <span class="sidebar-icon">üë§</span>
        Profile
      </div>
      <div class="sidebar-item">
        <span class="sidebar-icon">‚ùì</span>
        Help & Support
      </div>
    </div>

    <!-- Logger trigger button -->
    <button class="logger-trigger" (click)="toggleLogger()" [class.active]="isLoggerOpen">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
      </svg>
      <div class="logger-badge" *ngIf="logEntries.length > 0">{{ logEntries.length }}</div>
    </button>
  </div>

  <!-- Logger container -->
  <div class="logger-container" [class.active]="isLoggerOpen">
    <!-- Logger header -->
    <div class="logger-header">
      <div class="logger-title">
        <svg viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
        </svg>
        System Logger
        <span class="log-count">({{ logEntries.length }})</span>
      </div>
      <div class="logger-actions">
        <button class="action-btn" title="Clear logs">
          <svg viewBox="0 0 24 24" width="16" height="16" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M3 6h18M8 6V4a2 2 0 012-2h4a2 2 0 012 2v2m3 0v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6h14z"/>
          </svg>
        </button>
        <button class="collapse-btn" (click)="toggleLogger()" title="Close logger">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M19 14l-7-7-7 7"/>
          </svg>
        </button>
      </div>
    </div>

    <!-- Logger content -->
    <div class="logger-content">
      <div 
        *ngFor="let entry of logEntries; trackBy: trackByIndex" 
        class="log-entry"
        [ngClass]="entry.type">
        <div class="log-header">
          <span class="log-timestamp">{{ entry.timestamp }}</span>
          <span class="log-type-badge" [ngClass]="entry.type">{{ entry.type.toUpperCase() }}</span>
        </div>
        <div class="log-message">{{ entry.message }}</div>
      </div>
      <div class="log-end-marker" *ngIf="logEntries.length > 0">
        <span>End of logs</span>
      </div>
    </div>
  </div>
</div>

// app.component.css
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.app-container {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: #111113;
  height: 100vh;
  overflow-x: hidden;
  color: #f8fafc;
}

/* Main content area */
.main-content {
  margin-right: 320px;
  padding: 40px;
  height: 100vh;
  background: #111113;
  overflow-y: auto;
}

.demo-title {
  font-size: 32px;
  font-weight: 700;
  color: #f8fafc;
  margin-bottom: 16px;
  background: linear-gradient(135deg, #f8fafc 0%, #c084fc 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.demo-description {
  color: #94a3b8;
  font-size: 16px;
  line-height: 1.6;
  margin-bottom: 32px;
}

.feature-list {
  display: flex;
  flex-direction: column;
  gap: 16px;
  margin-top: 32px;
}

.feature-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 16px;
  background: rgba(255, 255, 255, 0.02);
  border-radius: 8px;
  border: 1px solid #2a2a2d;
  transition: all 0.2s ease;
}

.feature-item:hover {
  background: rgba(255, 255, 255, 0.04);
  border-color: #3730a3;
}

.feature-icon {
  font-size: 24px;
}

.feature-text {
  color: #e2e8f0;
  font-weight: 500;
}

/* Main sidebar container */
.sidebar {
  position: fixed;
  right: 0;
  top: 0;
  width: 320px;
  height: 100vh;
  background: #1a1a1c;
  border-left: 1px solid #2a2a2d;
  box-shadow: -2px 0 10px rgba(0, 0, 0, 0.5);
  display: flex;
  flex-direction: column;
}

/* Main content of sidebar */
.sidebar-content {
  flex: 1;
  padding: 20px;
  background: linear-gradient(135deg, #4c1d95 0%, #581c87 100%);
  color: white;
}

.sidebar-title {
  font-size: 24px;
  font-weight: 600;
  margin-bottom: 20px;
  text-align: center;
}

.sidebar-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 14px 16px;
  margin-bottom: 8px;
  border-radius: 8px;
  font-size: 14px;
  opacity: 0.9;
  cursor: pointer;
  transition: all 0.2s ease;
  border: 1px solid transparent;
}

.sidebar-item:hover {
  opacity: 1;
  background: rgba(255, 255, 255, 0.1);
  border-color: rgba(255, 255, 255, 0.2);
}

.sidebar-item.active {
  background: rgba(255, 255, 255, 0.15);
  border-color: rgba(255, 255, 255, 0.3);
}

.sidebar-icon {
  font-size: 16px;
  width: 20px;
  text-align: center;
}

/* Logger trigger button */
.logger-trigger {
  position: absolute;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  width: 54px;
  height: 54px;
  background: #3730a3;
  border: none;
  border-radius: 50%;
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0 4px 12px rgba(55, 48, 163, 0.4);
  transition: all 0.3s ease;
  z-index: 10;
  position: relative;
}

.logger-trigger:hover {
  background: #312e81;
  transform: translateX(-50%) translateY(-2px);
  box-shadow: 0 6px 20px rgba(55, 48, 163, 0.5);
}

.logger-trigger.active {
  background: #6366f1;
  box-shadow: 0 6px 20px rgba(99, 102, 241, 0.4);
}

.logger-trigger svg {
  width: 24px;
  height: 24px;
}

.logger-badge {
  position: absolute;
  top: -6px;
  right: -6px;
  background: #ef4444;
  color: white;
  font-size: 10px;
  font-weight: 600;
  padding: 2px 6px;
  border-radius: 10px;
  min-width: 18px;
  text-align: center;
  line-height: 1.2;
}

/* Logger container */
.logger-container {
  position: fixed;
  right: 0;
  bottom: 0;
  width: 320px;
  height: 50vh;
  background: #1a1a1c;
  border-top: 1px solid #2a2a2d;
  border-left: 1px solid #2a2a2d;
  box-shadow: -2px -2px 20px rgba(0, 0, 0, 0.5);
  transform: translateY(100%);
  transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  z-index: 20;
  display: flex;
  flex-direction: column;
}

.logger-container.active {
  transform: translateY(0);
}

/* Logger header */
.logger-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 16px 20px;
  background: #202024;
  border-bottom: 1px solid #2a2a2d;
  min-height: 60px;
}

.logger-title {
  font-size: 16px;
  font-weight: 600;
  color: #f8fafc;
  display: flex;
  align-items: center;
  gap: 8px;
}

.log-count {
  font-size: 12px;
  color: #94a3b8;
  font-weight: 400;
}

.logger-actions {
  display: flex;
  gap: 8px;
}

.action-btn,
.collapse-btn {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  color: #94a3b8;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

.action-btn:hover,
.collapse-btn:hover {
  background: #2a2a2d;
  color: #f1f5f9;
}

.collapse-btn svg,
.action-btn svg {
  width: 16px;
  height: 16px;
}

/* Logger content */
.logger-content {
  flex: 1;
  padding: 16px 20px;
  overflow-y: auto;
  background: #1a1a1c;
}

.log-entry {
  padding: 12px 16px;
  margin-bottom: 8px;
  border-radius: 8px;
  font-family: 'Monaco', 'Consolas', monospace;
  font-size: 12px;
  line-height: 1.4;
  border-left: 3px solid #2a2a2d;
  transition: all 0.2s ease;
  border: 1px solid transparent;
}

.log-entry:hover {
  background-color: rgba(255, 255, 255, 0.02);
  border-color: rgba(255, 255, 255, 0.1);
}

.log-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 4px;
}

.log-message {
  font-size: 13px;
  line-height: 1.5;
}

.log-entry.info {
  background: #0f172a;
  border-left-color: #0ea5e9;
}

.log-entry.info .log-message {
  color: #7dd3fc;
}

.log-entry.warning {
  background: #1c1917;
  border-left-color: #f59e0b;
}

.log-entry.warning .log-message {
  color: #fbbf24;
}

.log-entry.error {
  background: #1f1315;
  border-left-color: #ef4444;
}

.log-entry.error .log-message {
  color: #fca5a5;
}

.log-timestamp {
  opacity: 0.7;
  font-size: 11px;
  font-weight: 500;
  color: #64748b;
}

.log-type-badge {
  font-size: 9px;
  font-weight: 600;
  padding: 2px 6px;
  border-radius: 4px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.log-type-badge.info {
  background: rgba(14, 165, 233, 0.2);
  color: #0ea5e9;
}

.log-type-badge.warning {
  background: rgba(245, 158, 11, 0.2);
  color: #f59e0b;
}

.log-type-badge.error {
  background: rgba(239, 68, 68, 0.2);
  color: #ef4444;
}

.log-end-marker {
  text-align: center;
  padding: 16px;
  color: #64748b;
  font-size: 12px;
  border-top: 1px solid #2a2a2d;
  margin-top: 16px;
}

/* Scrollbar styling */
.logger-content::-webkit-scrollbar {
  width: 6px;
}

.logger-content::-webkit-scrollbar-track {
  background: #2a2a2d;
}

.logger-content::-webkit-scrollbar-thumb {
  background: #444447;
  border-radius: 3px;
}

.logger-content::-webkit-scrollbar-thumb:hover {
  background: #52525b;
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .main-content {
    margin-right: 0;
    padding: 20px;
  }
  
  .sidebar {
    width: 100vw;
    max-width: 320px;
  }
  
  .logger-container {
    width: 100vw;
    max-width: 320px;
  }

  .feature-list {
    margin-top: 24px;
  }

  .demo-title {
    font-size: 28px;
  }
}

// app.module.ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';

import { AppComponent } from './app.component';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    CommonModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
