import { Injectable, OnDestroy } from '@angular/core';
import { webSocket, WebSocketSubject } from 'rxjs/webSocket';
import { Observable, Subject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class WebsocketService implements OnDestroy {
  private socket$?: WebSocketSubject<any>;
  private connectionUrl: string = '';
  private messagesSubject$ = new Subject<any>();
  public messages$: Observable<any> = this.messagesSubject$.asObservable();

  // Establish WebSocket connection
  connect(url: string): void {
    if (this.socket$) {
      console.warn('WebSocket is already connected.');
      return;
    }
    this.connectionUrl = url;
    this.socket$ = webSocket({
      url: url,
      deserializer: e => JSON.parse(e.data),
      serializer: value => JSON.stringify(value)
    });

    this.socket$.subscribe({
      next: (msg) => this.messagesSubject$.next(msg),
      error: (err) => console.error('WebSocket error:', err),
      complete: () => console.log('WebSocket connection closed.')
    });

    console.log('Connected to WebSocket:', url);
  }

  // Send message to server
  sendMessage(msg: any): void {
    if (!this.socket$) {
      console.error('WebSocket is not connected.');
      return;
    }
    this.socket$.next(msg);
  }

  // Close WebSocket connection
  close(): void {
    if (this.socket$) {
      this.socket$.complete();
      this.socket$ = undefined;
      console.log('WebSocket connection closed manually.');
    }
  }

  ngOnDestroy(): void {
    this.close();
  }
}









import { Component, OnDestroy } from '@angular/core';
import { WebsocketService } from './websocket.service';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-websocket-demo',
  template: `
    <div>
      <h3>WebSocket Demo</h3>
      <button (click)="connect()">Connect</button>
      <button (click)="send()">Send Message</button>
      <button (click)="disconnect()">Disconnect</button>

      <h4>Messages:</h4>
      <ul>
        <li *ngFor="let msg of messages">{{ msg | json }}</li>
      </ul>
    </div>
  `
})
export class WebsocketDemoComponent implements OnDestroy {
  messages: any[] = [];
  private sub?: Subscription;

  constructor(private wsService: WebsocketService) {}

  connect() {
    this.wsService.connect('wss://echo.websocket.events'); // Example test server
    this.sub = this.wsService.messages$.subscribe(msg => {
      this.messages.push(msg);
    });
  }

  send() {
    this.wsService.sendMessage({ text: 'Hello from Angular!' });
  }

  disconnect() {
    this.wsService.close();
    this.sub?.unsubscribe();
  }

  ngOnDestroy(): void {
    this.disconnect();
  }
}





