import { Component, Input } from '@angular/core';

@Component({
  selector: 'app-feedback-portal',
  templateUrl: './feedback-portal.component.html',
  styleUrls: ['./feedback-portal.component.scss']
})
export class FeedbackPortalComponent {
  @Input() display: boolean = false;
  @Input() onClose: () => void = () => { };

  comments = [
    {
      initials: 'EP',
      name: 'Emma Parker',
      time: '2 days ago',
      text: 'This would be a fantastic addition! I often work late and the bright interface can be straining. Would love to see this prioritized.'
    },
    {
      initials: 'JD',
      name: 'John Doe (You)',
      time: '1 day ago',
      text: 'I agree this would be useful. For implementation, we could consider using CSS variables to make the theme switching smooth and maintainable.'
    },
    {
      initials: 'TL',
      name: 'Thomas Lee (Developer)',
      time: '5 hours ago',
      text: "Thanks for the suggestion! We've added this to our roadmap for Q3. We'll start with a basic implementation and then expand based on user feedback."
    }
  ];

  newComment: string = '';

  postComment() {
    if (this.newComment.trim()) {
      this.comments.push({
        initials: 'JD',
        name: 'John Doe (You)',
        time: 'Just now',
        text: this.newComment.trim()
      });
      this.newComment = '';
    }
  }
}
















<p-dialog [(visible)]="display" [modal]="true" [style]="{ width: '800px' }" [closable]="true" (onHide)="onClose()"
    header="Feedback Detail">
    <div class="feedback-container">
        <div class="metadata">
            <span class="badge">Feature Request</span>
            <span class="id">#123</span> •
            <span>Created 2 days ago by <strong>Sarah Johnson</strong></span> •
            <span>142 views</span>
        </div>

        <div class="description">
            <p>We should implement a dark mode option for the application to reduce eye strain during nighttime usage
                and to match system preferences.</p>
            <p>Implementation steps:</p>
            <ol>
                <li>Add a theme toggle in the user settings</li>
                <li>Detect system preference for automatic switching</li>
                <li>Create a dark color palette that meets accessibility standards</li>
                <li>Test across all application components</li>
            </ol>
        </div>

        <div class="comments-header">
            <span>Comments ({{ comments.length }})</span>
        </div>

        <div class="comments">
            <div class="comment" *ngFor="let comment of comments">
                <div class="avatar">{{ comment.initials }}</div>
                <div class="comment-body">
                    <div class="comment-header">
                        <strong>{{ comment.name }}</strong>
                        <span class="timestamp">{{ comment.time }}</span>
                    </div>
                    <p>{{ comment.text }}</p>
                    <div class="actions">
                        <span class="reply">Reply</span> •
                        <span class="report">Report</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="comment-input">
            <textarea [(ngModel)]="newComment" pInputTextarea placeholder="Share your thoughts..."></textarea>
            <button pButton type="button" label="Post Comment" (click)="postComment()"
                class="p-button-sm mt-2"></button>
        </div>
    </div>
</p-dialog>

<button (click)="display = true;">Click</button>











.feedback-container {
  padding: 1rem;
  background-color: #212121;
  color: #e0e0e0;
}

.feedback-container .metadata {
  color: #bdbdbd;
  font-size: 0.9rem;
  margin-top: 0.5rem;
}

.feedback-container .badge {
  background-color: #33691e;
  color: #c8e6c9;
  padding: 0.1875rem 0.5rem; /* 3px 8px */
  border-radius: 0.3125rem;   /* 5px */
  font-size: 0.75rem;
  margin-right: 0.3125rem;    /* 5px */
}

.feedback-container .description {
  margin-top: 1rem;
  font-size: 0.95rem;
  color: #eeeeee;
}

.feedback-container .description ol {
  padding-left: 1.25rem;
  margin: 0.5rem 0;
  color: #cccccc;
}

.feedback-container .comments-header {
  display: flex;
  justify-content: space-between;
  margin-top: 1.5rem;
  font-weight: 500;
  font-size: 1rem;
  color: #ffffff;
}

.feedback-container .comments {
  margin-top: 1rem;
}

.feedback-container .comment {
  display: flex;
  margin-bottom: 1rem;
  border: 1px solid #424242;
  border-radius: 0.375rem;
  padding: 0.75rem;
  background-color: #2c2c2c;
}

.feedback-container .avatar {
  background-color: #7a6ff0;
  color: #ffffff;
  font-weight: bold;
  width: 2.5rem;
  height: 2.5rem;
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-right: 1rem;
  font-size: 1rem;
}

.feedback-container .comment-body {
  flex: 1;
}

.feedback-container .comment-header {
  font-size: 0.9rem;
  color: #e0e0e0;
  display: flex;
  justify-content: space-between;
}

.feedback-container .timestamp {
  color: #9e9e9e;
  font-size: 0.85rem;
}

.feedback-container .comment-body p {
  margin: 0.3rem 0;
  font-size: 0.95rem;
  color: #eeeeee;
}

.feedback-container .actions {
  font-size: 0.8rem;
  color: #64b5f6;
  cursor: pointer;
}

.feedback-container .actions span:hover {
  text-decoration: underline;
}

.feedback-container .comment-input {
  margin-top: 1.5rem;
  display: flex;
  flex-direction: column;
}

.feedback-container textarea {
  width: 100%;
  min-height: 5rem;
  border-radius: 0.5rem;
  border: 1px solid #555;
  background-color: #2a2a2a;
  color: #f1f1f1;
  padding: 0.75rem;
  resize: vertical;
  font-family: inherit;
  font-size: 1rem;
  line-height: 1.5;
}
