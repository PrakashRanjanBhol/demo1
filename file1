isEditing = false;
editTitle = '';
editDescription = '';
originalTitle = '';
originalDescription = '';






editTicket(): void {
  if (this.isEditing) return;
  
  this.isEditing = true;
  this.originalTitle = this.ticketData.title;
  this.originalDescription = this.ticketData.description;
  this.editTitle = this.ticketData.title;
  this.editDescription = this.ticketData.description;
}

saveTicket(): void {
  if (!this.editTitle.trim()) {
    alert('Title cannot be empty!');
    return;
  }

  this.ticketData.title = this.editTitle.trim();
  this.ticketData.description = this.editDescription.trim();
  this.parseMarkdown(this.ticketData.description);
  this.isEditing = false;
  alert('Ticket saved successfully!');
}

cancelEdit(): void {
  this.editTitle = this.originalTitle;
  this.editDescription = this.originalDescription;
  this.isEditing = false;
}









<div class="actions">
  <!-- Edit Mode Actions -->
  <ng-container *ngIf="isEditing">
    <div class="action-icon save" (click)="saveTicket()" title="Save">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
      </svg>
    </div>
    <div class="action-icon cancel" (click)="cancelEdit()" title="Cancel">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
      </svg>
    </div>
  </ng-container>
  
  <!-- Normal Mode Actions -->
  <ng-container *ngIf="!isEditing">
    <div class="action-icon edit" (click)="editTicket()" title="Edit">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
      </svg>
    </div>
    <div class="action-icon delete" (click)="deleteTicket()" title="Delete">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
      </svg>
    </div>
    <div class="action-icon enhance" (click)="enhanceTicket()" title="Enhance">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
      </svg>
    </div>
    <div class="action-icon upload" *ngIf="isDraft" (click)="uploadTicket()" title="Upload">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
      </svg>
    </div>
  </ng-container>
</div>













<!-- Title: Edit Mode -->
<input 
  *ngIf="isEditing" 
  type="text" 
  class="edit-input" 
  [(ngModel)]="editTitle"
  placeholder="Enter ticket title"
/>

<!-- Title: View Mode -->
<h1 *ngIf="!isEditing" class="ticket-title">
  {{ ticketData.title || 'Untitled Ticket' }}
</h1>











<!-- Description: Edit Mode -->
<textarea 
  *ngIf="isEditing" 
  class="edit-textarea" 
  [(ngModel)]="editDescription"
  placeholder="Enter ticket description"
  rows="10"
></textarea>

<!-- Description: View Mode -->
<div *ngIf="!isEditing" class="description-content" [innerHTML]="parsedDescription"></div>











.action-icon.edit svg {
  stroke: #3b82f6;
}

.action-icon.save svg {
  stroke: #10b981;
}

.action-icon.cancel svg {
  stroke: #ef4444;
}

.edit-input {
  width: 100%;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(99, 102, 241, 0.3);
  color: var(--sdlc-details-color-title);
  font-size: 24px;
  font-weight: 700;
  padding: 8px 12px;
  border-radius: 6px;
  font-family: inherit;
  outline: none;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

.edit-input:focus {
  border-color: rgba(99, 102, 241, 0.6);
  box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
}

.edit-textarea {
  width: 100%;
  min-height: 200px;
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(99, 102, 241, 0.3);
  color: var(--sdlc-details-color-description);
  font-size: 14px;
  line-height: 1.7;
  padding: 12px;
  border-radius: 6px;
  font-family: inherit;
  resize: vertical;
  outline: none;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

.edit-textarea:focus {
  border-color: rgba(99, 102, 241, 0.6);
  box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
}

/* Light mode input styles */
:host-context(.light-mode) .edit-input,
:host-context(.light-mode) .edit-textarea {
  background: rgba(0, 0, 0, 0.02);
  border-color: rgba(99, 102, 241, 0.4);
}

:host-context(.light-mode) .edit-input:focus,
:host-context(.light-mode) .edit-textarea:focus {
  border-color: rgba(99, 102, 241, 0.7);
  box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.15);
}

