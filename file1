import { Component, OnInit, OnDestroy, ElementRef, ViewChild, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

// Declare external libraries
declare var marked: any;
declare var hljs: any;

interface MarkdownFile {
  folder: string;
  file: string;
}

interface ProcessedFile {
  folderName: string;
  fileName: string;
  content: string;
  path: string;
}

interface TocItem {
  id: string;
  text: string;
  level: number;
}

@Component({
  selector: 'app-documentation',
  standalone: true,
  imports: [CommonModule, HttpClientModule],
  template: `
    <div class="documentation-container">
      <!-- Sidebar -->
      <div class="sidebar" #sidebar>
        <div class="sidebar-header">
          <div class="header-icon">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
          </div>
          <div class="header-content">
            <h2>Best Practices</h2>
            <p>Documentation Guide</p>
          </div>
        </div>
        
        <div class="toc-container" #tocContainer>
          <div *ngIf="isLoading" class="loading">Loading TOC...</div>
          <div *ngIf="loadingError" class="error">Failed to load TOC</div>
          <div *ngIf="!isLoading && !loadingError" class="toc-content">
            <a 
              *ngFor="let item of tocItems; let i = index"
              [href]="'#' + item.id"
              [class]="'toc-item level-' + item.level + (i === activeSection ? ' active' : '')"
              (click)="scrollToSection($event, item.id, i)">
              <span class="toc-bullet"></span>
              <span class="toc-text">{{ item.text }}</span>
            </a>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <div class="main-content">
        <div class="content-header">
          <div class="header-left">
            <h1>Documentation</h1>
            <div class="header-meta">
              <span class="meta-item">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 2L13.09 8.26L22 9L13.09 9.74L12 16L10.91 9.74L2 9L10.91 8.26L12 2Z" fill="currentColor"/>
                </svg>
                Updated Today
              </span>
              <span class="meta-item">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M13 2L3 14H12L11 22L21 10H12L13 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                {{ tocItems.length }} Sections
              </span>
            </div>
          </div>
          <div class="header-actions">
            <button class="action-btn search-btn" title="Search Documentation">
              <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="11" cy="11" r="8" stroke="currentColor" stroke-width="2"/>
                <path d="m21 21-4.35-4.35" stroke="currentColor" stroke-width="2"/>
              </svg>
            </button>
            <button class="action-btn" (click)="reloadContent()" title="Reload Content">
              <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M1 4V10H7M23 20V14H17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10M23 14L18.36 18.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
          </div>
        </div>
        
        <div class="content-body" #contentBody (scroll)="onScroll()">
          <div *ngIf="isLoading" class="loading-content">
            <div class="loading-spinner"></div>
            <p>Loading documentation...</p>
          </div>
          <div *ngIf="loadingError" class="error-content">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
              <line x1="12" y1="8" x2="12" y2="12" stroke="currentColor" stroke-width="2"/>
              <line x1="12" y1="16" x2="12.01" y2="16" stroke="currentColor" stroke-width="2"/>
            </svg>
            <h3>Error Loading Content</h3>
            <p>{{ loadingError }}</p>
          </div>
          <div *ngIf="!isLoading && !loadingError" class="markdown-content" [innerHTML]="htmlContent"></div>
        </div>
      </div>
    </div>
  `,
  styles: [`
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :host {
      display: block;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      line-height: 1.7;
      color: #e4e4e7;
      background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 100%);
      min-height: 100vh;
    }

    .documentation-container {
      display: flex;
      min-height: 100vh;
      max-width: 1600px;
      margin: 0 auto;
      background: rgba(26, 26, 45, 0.8);
      backdrop-filter: blur(10px);
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    }

    /* Enhanced Sidebar Styles */
    .sidebar {
      width: 350px;
      background: linear-gradient(180deg, #16213e 0%, #1a1a2e 100%);
      border-right: 1px solid rgba(59, 130, 246, 0.1);
      overflow-y: auto;
      position: relative;
    }

    .sidebar::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.5), transparent);
    }

    .sidebar-header {
      padding: 30px 25px;
      background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
      border-bottom: 3px solid rgba(59, 130, 246, 0.3);
      position: relative;
      overflow: hidden;
    }

    .sidebar-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: 
        radial-gradient(circle at 20% 80%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.05) 0%, transparent 50%);
    }

    .sidebar-header .header-icon {
      margin-bottom: 15px;
      color: rgba(255, 255, 255, 0.9);
      position: relative;
      z-index: 1;
    }

    .sidebar-header .header-content {
      position: relative;
      z-index: 1;
    }

    .sidebar-header h2 {
      font-size: 24px;
      font-weight: 700;
      color: #ffffff;
      margin-bottom: 5px;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .sidebar-header p {
      font-size: 14px;
      color: rgba(255, 255, 255, 0.8);
      font-weight: 400;
    }

    .toc-container {
      padding: 20px 0;
      height: calc(100vh - 140px);
      overflow-y: auto;
    }

    .toc-container::-webkit-scrollbar {
      width: 6px;
    }

    .toc-container::-webkit-scrollbar-track {
      background: rgba(59, 130, 246, 0.1);
    }

    .toc-container::-webkit-scrollbar-thumb {
      background: rgba(59, 130, 246, 0.3);
      border-radius: 3px;
    }

    .toc-container::-webkit-scrollbar-thumb:hover {
      background: rgba(59, 130, 246, 0.5);
    }

    .toc-content {
      display: flex;
      flex-direction: column;
      gap: 2px;
    }

    .toc-item {
      display: flex;
      align-items: center;
      padding: 12px 25px;
      text-decoration: none;
      color: #a1a1aa;
      border-left: 3px solid transparent;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      font-size: 14px;
      position: relative;
      overflow: hidden;
    }

    .toc-item::before {
      content: '';
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 0;
      background: linear-gradient(90deg, rgba(59, 130, 246, 0.1), transparent);
      transition: width 0.3s ease;
    }

    .toc-item:hover::before {
      width: 100%;
    }

    .toc-item:hover {
      color: #60a5fa;
      border-left-color: #60a5fa;
      background: rgba(59, 130, 246, 0.05);
      transform: translateX(5px);
    }

    .toc-item.active {
      color: #60a5fa;
      border-left-color: #3b82f6;
      background: linear-gradient(90deg, rgba(59, 130, 246, 0.15), rgba(59, 130, 246, 0.05));
      font-weight: 500;
      transform: translateX(8px);
    }

    .toc-item.active .toc-bullet {
      background: #3b82f6;
      transform: scale(1.2);
    }

    .toc-bullet {
      width: 6px;
      height: 6px;
      border-radius: 50%;
      background: #52525b;
      margin-right: 12px;
      transition: all 0.3s ease;
      flex-shrink: 0;
    }

    .toc-item:hover .toc-bullet {
      background: #60a5fa;
      transform: scale(1.1);
    }

    .toc-text {
      line-height: 1.4;
    }

    .toc-item.level-1 {
      font-weight: 600;
      padding-left: 25px;
      margin-top: 5px;
    }

    .toc-item.level-1 .toc-bullet {
      width: 8px;
      height: 8px;
    }

    .toc-item.level-2 {
      padding-left: 45px;
      font-size: 13px;
    }

    .toc-item.level-3 {
      padding-left: 60px;
      font-size: 13px;
    }

    .toc-item.level-4 {
      padding-left: 75px;
      font-size: 12px;
    }

    .toc-item.level-5,
    .toc-item.level-6 {
      padding-left: 90px;
      font-size: 12px;
    }

    /* Enhanced Main Content */
    .main-content {
      flex: 1;
      display: flex;
      flex-direction: column;
      background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
    }

    .content-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 30px 40px;
      background: rgba(26, 26, 45, 0.8);
      backdrop-filter: blur(10px);
      border-bottom: 1px solid rgba(59, 130, 246, 0.1);
      position: relative;
    }

    .content-header::after {
      content: '';
      position: absolute;
      bottom: 0;
      left: 40px;
      right: 40px;
      height: 1px;
      background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.3), transparent);
    }

    .header-left h1 {
      color: #f4f4f5;
      font-size: 32px;
      font-weight: 700;
      margin-bottom: 8px;
      background: linear-gradient(135deg, #60a5fa, #3b82f6);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .header-meta {
      display: flex;
      gap: 20px;
    }

    .meta-item {
      display: flex;
      align-items: center;
      gap: 6px;
      color: #a1a1aa;
      font-size: 14px;
      font-weight: 500;
    }

    .meta-item svg {
      color: #60a5fa;
    }

    .header-actions {
      display: flex;
      gap: 12px;
    }

    .action-btn {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 44px;
      height: 44px;
      background: rgba(59, 130, 246, 0.1);
      border: 1px solid rgba(59, 130, 246, 0.2);
      border-radius: 10px;
      color: #60a5fa;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .action-btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(59, 130, 246, 0.1);
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .action-btn:hover::before {
      opacity: 1;
    }

    .action-btn:hover {
      background: rgba(59, 130, 246, 0.2);
      border-color: rgba(59, 130, 246, 0.4);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(59, 130, 246, 0.15);
    }

    .content-body {
      flex: 1;
      overflow-y: auto;
      padding: 40px;
      background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
    }

    .content-body::-webkit-scrollbar {
      width: 8px;
    }

    .content-body::-webkit-scrollbar-track {
      background: rgba(59, 130, 246, 0.1);
    }

    .content-body::-webkit-scrollbar-thumb {
      background: rgba(59, 130, 246, 0.3);
      border-radius: 4px;
    }

    .content-body::-webkit-scrollbar-thumb:hover {
      background: rgba(59, 130, 246, 0.5);
    }

    /* Enhanced Loading States */
    .loading-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 400px;
      color: #a1a1aa;
    }

    .loading-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(59, 130, 246, 0.1);
      border-top: 3px solid #3b82f6;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 20px;
    }

    .error-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 400px;
      color: #ef4444;
      text-align: center;
    }

    .error-content svg {
      margin-bottom: 20px;
      color: #ef4444;
    }

    .error-content h3 {
      margin-bottom: 10px;
      font-size: 20px;
    }

    /* Enhanced Markdown Content Styles */
    .markdown-content {
      max-width: none;
      background: rgba(26, 26, 45, 0.3);
      padding: 40px;
      border-radius: 16px;
      border: 1px solid rgba(59, 130, 246, 0.1);
      backdrop-filter: blur(10px);
    }

    :host ::ng-deep .markdown-content h1,
    :host ::ng-deep .markdown-content h2,
    :host ::ng-deep .markdown-content h3,
    :host ::ng-deep .markdown-content h4,
    :host ::ng-deep .markdown-content h5,
    :host ::ng-deep .markdown-content h6 {
      margin-top: 40px;
      margin-bottom: 20px;
      color: #f4f4f5;
      line-height: 1.3;
      position: relative;
    }

    :host ::ng-deep .markdown-content h1:first-child {
      margin-top: 0;
    }

    :host ::ng-deep .markdown-content h1 {
      font-size: 36px;
      font-weight: 800;
      background: linear-gradient(135deg, #60a5fa, #3b82f6);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      border-bottom: 2px solid rgba(59, 130, 246, 0.2);
      padding-bottom: 15px;
      margin-bottom: 25px;
    }

    :host ::ng-deep .markdown-content h2 {
      font-size: 28px;
      font-weight: 700;
      color: #e2e8f0;
      border-bottom: 1px solid rgba(59, 130, 246, 0.2);
      padding-bottom: 10px;
      margin-bottom: 20px;
    }

    :host ::ng-deep .markdown-content h3 {
      font-size: 24px;
      font-weight: 600;
      color: #cbd5e1;
    }

    :host ::ng-deep .markdown-content h4 {
      font-size: 20px;
      font-weight: 600;
      color: #94a3b8;
    }

    :host ::ng-deep .markdown-content h5 {
      font-size: 18px;
      font-weight: 500;
      color: #94a3b8;
    }

    :host ::ng-deep .markdown-content h6 {
      font-size: 16px;
      font-weight: 500;
      color: #94a3b8;
    }

    :host ::ng-deep .markdown-content p {
      margin-bottom: 20px;
      color: #e2e8f0;
      font-size: 16px;
      line-height: 1.8;
    }

    :host ::ng-deep .markdown-content strong {
      color: #f1f5f9;
      font-weight: 600;
    }

    :host ::ng-deep .markdown-content em {
      color: #cbd5e1;
      font-style: italic;
    }

    :host ::ng-deep .markdown-content ul,
    :host ::ng-deep .markdown-content ol {
      margin: 20px 0;
      padding-left: 40px;
    }

    :host ::ng-deep .markdown-content li {
      margin-bottom: 8px;
      color: #e2e8f0;
      line-height: 1.7;
    }

    :host ::ng-deep .markdown-content li::marker {
      color: #60a5fa;
    }

    :host ::ng-deep .markdown-content pre {
      background: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 100%);
      border: 1px solid rgba(59, 130, 246, 0.2);
      border-radius: 12px;
      padding: 24px;
      margin: 25px 0;
      overflow-x: auto;
      position: relative;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    }

    :host ::ng-deep .markdown-content pre::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.5), transparent);
    }

    :host ::ng-deep .markdown-content code {
      background: rgba(59, 130, 246, 0.1);
      border: 1px solid rgba(59, 130, 246, 0.2);
      padding: 4px 8px;
      border-radius: 6px;
      font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
      font-size: 14px;
      color: #fbbf24;
      font-weight: 500;
    }

    :host ::ng-deep .markdown-content pre code {
      background: none;
      border: none;
      padding: 0;
      color: #e2e8f0;
      font-size: 14px;
    }

    :host ::ng-deep .markdown-content blockquote {
      border-left: 4px solid #3b82f6;
      margin: 25px 0;
      padding: 20px 24px;
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.1) 0%, rgba(59, 130, 246, 0.05) 100%);
      color: #cbd5e1;
      border-radius: 8px;
      position: relative;
    }

    :host ::ng-deep .markdown-content blockquote::before {
      content: '"';
      position: absolute;
      top: 10px;
      left: 10px;
      font-size: 48px;
      color: rgba(59, 130, 246, 0.3);
      font-weight: bold;
      line-height: 1;
    }

    :host ::ng-deep .markdown-content blockquote p {
      margin: 0;
      padding-left: 30px;
    }

    :host ::ng-deep .markdown-content table {
      width: 100%;
      border-collapse: collapse;
      margin: 25px 0;
      background: rgba(26, 26, 45, 0.5);
      border-radius: 12px;
      overflow: hidden;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    }

    :host ::ng-deep .markdown-content th,
    :host ::ng-deep .markdown-content td {
      padding: 16px 20px;
      text-align: left;
      border-bottom: 1px solid rgba(59, 130, 246, 0.1);
    }

    :host ::ng-deep .markdown-content th {
      background: linear-gradient(135deg, rgba(59, 130, 246, 0.2) 0%, rgba(59, 130, 246, 0.1) 100%);
      font-weight: 600;
      color: #f1f5f9;
      font-size: 14px;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    :host ::ng-deep .markdown-content td {
      color: #e2e8f0;
    }

    :host ::ng-deep .markdown-content tr:hover {
      background: rgba(59, 130, 246, 0.05);
    }

    :host ::ng-deep .markdown-content a {
      color: #60a5fa;
      text-decoration: none;
      font-weight: 500;
      position: relative;
      transition: all 0.3s ease;
    }

    :host ::ng-deep .markdown-content a:hover {
      color: #3b82f6;
      text-decoration: underline;
    }

    :host ::ng-deep .markdown-content hr {
      border: none;
      height: 2px;
      background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.3), transparent);
      margin: 40px 0;
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
      .sidebar {
        width: 300px;
      }
      
      .content-header {
        padding: 25px 30px;
      }
      
      .content-body,
      .markdown-content {
        padding: 30px;
      }
    }

    @media (max-width: 768px) {
      .documentation-container {
        flex-direction: column;
      }

      .sidebar {
        width: 100%;
        max-height: 60vh;
      }

      .content-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
        padding: 20px;
      }

      .header-actions {
        align-self: flex-end;
      }

      .content-body,
      .markdown-content {
        padding: 20px;
      }

      .sidebar-header {
        padding: 20px;
      }

      .sidebar-header h2 {
        font-size: 20px;
      }
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  `]
})
export class DocumentationComponent implements OnInit, AfterViewInit, OnDestroy {
  @ViewChild('contentBody', { static: false }) contentBodyRef!: ElementRef<HTMLDivElement>;
  @ViewChild('sidebar', { static: false }) sidebarRef!: ElementRef<HTMLDivElement>;
  @ViewChild('tocContainer', { static: false }) tocContainerRef!: ElementRef<HTMLDivElement>;

  private destroy$ = new Subject<void>();

  htmlContent: SafeHtml = '';
  tocItems: TocItem[] = [];
  activeSection: number = 0;
  isLoading: boolean = true;
  loadingError: string = '';

  // Define your markdown file structure
  private markdownFiles: MarkdownFile[] = [
    { folder: 'Page1', file: 'page1.md' },
    { folder: 'Page2', file: 'page2.md' },
    { folder: 'Page3', file: 'page3.md' },
    { folder: 'Page4', file: 'page4.md' }
  ];

  constructor(
    private http: HttpClient,
    private sanitizer: DomSanitizer
  ) {}

  ngOnInit(): void {
    // Configure marked options if available
    if (typeof marked !== 'undefined') {
      marked.setOptions({
        gfm: true,
        breaks: false,
        pedantic: false
      });
    }

    this.loadAllMarkdownFiles();
  }

  ngAfterViewInit(): void {
    // Setup event listeners after view initialization
    setTimeout(() => {
      this.setupEventListeners();
    }, 100);
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  private setupEventListeners(): void {
    // Window resize listener
    window.addEventListener('resize', () => {
      setTimeout(() => this.updateActiveSection(), 100);
    });
  }

  async loadAllMarkdownFiles(): Promise<voi
