import { Component, OnInit, ViewChild } from '@angular/core';
import { OverlayPanel } from 'primeng/overlaypanel';

interface FileNode {
  name: string;
  type: 'folder' | 'file';
  children?: FileNode[];
  isExpanded?: boolean;
  selected?: boolean;
  ticketKey?: string;
  queries?: string[];
}

interface RawProjectMap {
  [key: string]: {
    key: string;
    id: string;
    type: string;
    icon: string;
  };
}

interface Project {
  id: number;
  name: string;
  isFavourite: boolean;
  structure: FileNode[];
}

@Component({
  selector: 'project-sidebar',
  templateUrl: './project-sidebar.component.html',
  styleUrls: ['./project-sidebar.component.scss']
})
export class ProjectSidebarComponent implements OnInit {
  @ViewChild('op') overlayPanel!: OverlayPanel;

  queryList: string[] = [];
  selectedFiles: FileNode[] = [];
  loadingProjectIds: number[] = [];

  rawAllProjects: RawProjectMap = {
    "1": { key: "Project Alpha", id: "1", type: "project", icon: "" },
    "2": { key: "Project Beta", id: "2", type: "project", icon: "" },
    "3": { key: "Project Gamma", id: "3", type: "project", icon: "" },
    "4": { key: "Project Delta", id: "4", type: "project", icon: "" },
    "5": { key: "Project Epsilon", id: "5", type: "project", icon: "" }
  };

  rawFavouriteProjects: RawProjectMap = {
    "1": { key: "Project Alpha", id: "1", type: "project", icon: "" },
    "2": { key: "Project Beta", id: "2", type: "project", icon: "" }
  };

  allProjects: Project[] = [];
  favouriteProjects: Project[] = [];

  ngOnInit() {
    this.allProjects = this.normalizeProjects(this.rawAllProjects);
    const favIds = Object.keys(this.rawFavouriteProjects);
    this.favouriteProjects = this.allProjects.filter(p => favIds.includes(p.id.toString()));
    this.allProjects.forEach(p => p.isFavourite = favIds.includes(p.id.toString()));
  }

  normalizeProjects(data: RawProjectMap): Project[] {
    return Object.entries(data).map(([id, value]) => ({
      id: Number(id),
      name: value.key,
      isFavourite: false,
      structure: [{ name: 'JIRA', type: 'folder', children: [], isExpanded: false }]
    }));
  }

  toggleFavourite(project: Project) {
    project.isFavourite = !project.isFavourite;
    if (project.isFavourite) {
      this.favouriteProjects.push(project);
    } else {
      this.favouriteProjects = this.favouriteProjects.filter(p => p.id !== project.id);
    }
  }

  async toggleExpand(project: Project) {
    const root = project.structure[0];

    // collapse if already expanded
    if (root.isExpanded) {
      root.isExpanded = false;
      return;
    }

    root.isExpanded = true;

    if (!root.children || root.children.length === 0) {
      this.loadingProjectIds.push(project.id);
      root.children = undefined; // triggers loading UI
      const data = await this.fetchJiraInfo(project.id);
      root.children = this.transformJiraToNodes(data);
      this.loadingProjectIds = this.loadingProjectIds.filter(id => id !== project.id);
    }
  }

  isLoading(projectId: number): boolean {
    return this.loadingProjectIds.includes(projectId);
  }

  transformJiraToNodes(data: any): FileNode[] {
    return Object.entries(data).map(([category, value]: any) => ({
      name: category,
      type: 'folder',
      isExpanded: false,
      queries: value.queries,
      children: value.tickets.map((ticket: any) => ({
        name: `${ticket.key}: ${ticket.summary}`,
        type: 'file',
        ticketKey: ticket.key,
        queries: value.queries
      }))
    }));
  }

  fetchJiraInfo(projectId: number): Promise<any> {
    return new Promise(resolve => {
      setTimeout(() => {
        resolve({
          Task: {
            icon: '',
            tickets: [
              { type: 'Task', summary: 'ABC', key: `T-${projectId}-1` },
              { type: 'Task', summary: 'EFG', key: `T-${projectId}-2` }
            ],
            queries: ['What is your name?', 'What is your age?']
          },
          Epic: {
            icon: '',
            tickets: [
              { type: 'Epic', summary: 'XYZ', key: `E-${projectId}-1` },
              { type: 'Epic', summary: 'LMN', key: `E-${projectId}-2` }
            ],
            queries: ['What is your birth place?', 'What is your hobby?']
          }
        });
      }, 1500);
    });
  }

  onFileToggle(file: FileNode) {
    if (!file.selected) {
      if (this.selectedFiles.length >= 5) {
        alert('You can select a maximum of 5 tickets.');
        return;
      }
      file.selected = true;
      this.selectedFiles.push(file);
    } else {
      file.selected = false;
      this.selectedFiles = this.selectedFiles.filter(f => f !== file);
    }
  }

  showOverlay(event: MouseEvent, node: FileNode) {
    event.preventDefault();
    this.queryList = node.queries ?? [];
    this.overlayPanel.toggle(event);
  }

  askQuery(query: string) {
    alert(`Ask: ${query}`);
    this.overlayPanel.hide();
  }
}
