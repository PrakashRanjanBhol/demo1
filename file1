<div class="page-container">
    <button class="trigger-button" (click)="openSlide()">Open Panel</button>

    <div class="slide-container" [class.active]="isActive" [class.minimized]="viewMode === 'minimized'"
        [class.default]="viewMode === 'default'" [class.fullwidth]="viewMode === 'fullwidth'">
        <div class="header">
            <div class="header-tabs">
                <button class="tab-btn" [class.active]="activeTab === 'crs'" (click)="setActiveTab('crs')">
                    CRS Maker
                </button>
                <button class="tab-btn" [class.active]="activeTab === 'srs'" (click)="setActiveTab('srs')">
                    SRS Maker
                </button>
                <button class="tab-btn" [class.active]="activeTab === 'task'" (click)="setActiveTab('task')">
                    Task Maker
                </button>
                <button class="tab-btn" [class.active]="activeTab === 'unittest'" (click)="setActiveTab('unittest')">
                    Unit Testcase Maker
                </button>
            </div>

            <!-- Project Dropdown with Search -->
            <div class="project-dropdown-wrapper">
                <button class="project-dropdown-btn" (click)="toggleProjectDropdown()">
                    <svg class="project-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
                    </svg>
                    <span class="project-label">{{ selectedProject }}</span>
                    <svg class="chevron-icon" [class.open]="isProjectDropdownOpen" viewBox="0 0 24 24" fill="none"
                        stroke="currentColor" stroke-width="2">
                        <polyline points="6 9 12 15 18 9"></polyline>
                    </svg>
                </button>

                <div class="project-dropdown-menu" *ngIf="isProjectDropdownOpen">
                    <!-- Search Box -->
                    <div class="project-search-box">
                        <svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="11" cy="11" r="8"></circle>
                            <path d="m21 21-4.35-4.35"></path>
                        </svg>
                        <input type="text" class="project-search-input" placeholder="Search projects..."
                            [value]="searchQuery" (input)="onSearchInput($event)" />
                        <button class="clear-search-btn" *ngIf="searchQuery" (click)="clearSearch()">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <line x1="18" y1="6" x2="6" y2="18"></line>
                                <line x1="6" y1="6" x2="18" y2="18"></line>
                            </svg>
                        </button>
                    </div>

                    <!-- Project Count -->
                    <div class="project-count" *ngIf="searchQuery">
                        {{ filteredProjects.length }} project{{ filteredProjects.length !== 1 ? 's' : '' }} found
                    </div>

                    <!-- Project List -->
                    <div class="project-list">
                        <button class="project-item" *ngFor="let project of filteredProjects"
                            (click)="selectProject(project)" [class.selected]="selectedProject.includes(project.code)">
                            <div class="project-info">
                                <span class="project-name">{{ project.name }}</span>
                                <span class="project-code">{{ project.code }}</span>
                            </div>
                            <svg class="check-icon" *ngIf="selectedProject.includes(project.code)" viewBox="0 0 24 24"
                                fill="none" stroke="currentColor" stroke-width="2">
                                <polyline points="20 6 9 17 4 12"></polyline>
                            </svg>
                        </button>

                        <!-- No Results Message -->
                        <div class="no-results" *ngIf="filteredProjects.length === 0">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <circle cx="11" cy="11" r="8"></circle>
                                <path d="m21 21-4.35-4.35"></path>
                            </svg>
                            <p>No projects found</p>
                            <span>Try adjusting your search</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="header-controls">
                <!-- Rest of your controls remain the same -->
                <button class="control-btn default" *ngIf="viewMode === 'minimized'" (click)="setViewMode('default')"
                    title="Default View">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="18" height="18" rx="2"></rect>
                        <line x1="9" y1="3" x2="9" y2="21"></line>
                    </svg>
                </button>
                <button class="control-btn fullwidth" *ngIf="viewMode === 'minimized'"
                    (click)="setViewMode('fullwidth')" title="Full Width">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="18" height="18" rx="2"></rect>
                    </svg>
                </button>

                <button class="control-btn minimize" *ngIf="viewMode === 'default'" (click)="setViewMode('minimized')"
                    title="Minimize">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="4 14 10 14 10 20"></polyline>
                        <polyline points="20 10 14 10 14 4"></polyline>
                        <line x1="14" y1="10" x2="21" y2="3"></line>
                        <line x1="3" y1="21" x2="10" y2="14"></line>
                    </svg>
                </button>
                <button class="control-btn fullwidth" *ngIf="viewMode === 'default'" (click)="setViewMode('fullwidth')"
                    title="Full Width">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="18" height="18" rx="2"></rect>
                    </svg>
                </button>

                <button class="control-btn minimize" *ngIf="viewMode === 'fullwidth'" (click)="setViewMode('minimized')"
                    title="Minimize">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="4 14 10 14 10 20"></polyline>
                        <polyline points="20 10 14 10 14 4"></polyline>
                        <line x1="14" y1="10" x2="21" y2="3"></line>
                        <line x1="3" y1="21" x2="10" y2="14"></line>
                    </svg>
                </button>
                <button class="control-btn default" *ngIf="viewMode === 'fullwidth'" (click)="setViewMode('default')"
                    title="Default View">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <rect x="3" y="3" width="18" height="18" rx="2"></rect>
                        <line x1="9" y1="3" x2="9" y2="21"></line>
                    </svg>
                </button>

                <button class="control-btn close" (click)="closeSlide()" title="Close">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <line x1="18" y1="6" x2="6" y2="18"></line>
                        <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                </button>
            </div>
        </div>

        <div class="content">
            <div class="layout-container">
                <aside class="left-sidebar">
                    <!-- <app-crs-maker></app-crs-maker> -->
                    <app-srs-maker></app-srs-maker>
                </aside>

                <main class="center-area">
                    <section class="body">
                        <app-ticket-details></app-ticket-details>
                    </section>
                </main>
            </div>
        </div>
    </div>
</div>










.page-container {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    overflow-x: hidden;
    background: #f5f5f5;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

.trigger-button {
    padding: 16px 48px;
    font-size: 1.2rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 30px;
    cursor: pointer;
    transition: transform 0.2s, box-shadow 0.2s;
    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
}

.trigger-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
}

.slide-container {
    position: fixed;
    top: 60px;
    left: -100vw;
    width: calc(100vw - 320px);
    height: calc(100vh - 60px);
    background-color: #111113;
    display: flex;
    flex-direction: column;
    color: #fff;
    transition: left 0.4s ease-out, width 0.4s ease-out;
    z-index: 1000;
}

.slide-container.active {
    left: 0;
}

/* Minimized Mode: 320px width from left */
.slide-container.minimized {
    width: 320px;
}

/* Default Mode: Full width minus 320px from right */
.slide-container.default {
    width: calc(100vw - 320px);
}

/* Fullwidth Mode: Full width */
.slide-container.fullwidth {
    width: 100vw;
}

.slide-container>.header {
    background-color: #1a1a1c;
    padding: 16px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #2a2a2c;
}

.slide-container .header-tabs {
    display: flex;
    gap: 8px;
}

.slide-container.minimized .header-tabs {
    flex-wrap: wrap;
}

.slide-container .tab-btn {
    padding: 8px 16px;
    font-size: 0.875rem;
    font-weight: 500;
    background: rgba(255, 255, 255, 0.05);
    color: #a0a0a0;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s;
    white-space: nowrap;
}

.slide-container .tab-btn:hover {
    background: rgba(255, 255, 255, 0.1);
    color: #fff;
}

.slide-container .tab-btn.active {
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    color: #fff;
    border-color: transparent;
}

.slide-container .header-controls {
    display: flex;
    gap: 12px;
}

.slide-container .control-btn {
    width: 32px;
    height: 32px;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    border-radius: 6px;
    color: #fff;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.2s;
}

.slide-container .control-btn:hover {
    background: rgba(255, 255, 255, 0.2);
}

.slide-container .control-btn.close:hover {
    background: #e74c3c;
}

.slide-container .control-btn svg {
    width: 18px;
    height: 18px;
}

.slide-container>.content {
    flex: 1;
    display: flex;
    overflow: hidden;
    /* Changed from overflow-y: auto to overflow: hidden */
    padding: 0;
}

.slide-container .layout-container {
    display: flex;
    width: 100%;
    height: 100%;
}

.slide-container .left-sidebar {
    width: 320px;
    background-color: #1a1a1c;
    border-right: 1px solid #2a2a2c;
    overflow-y: auto;
    flex-shrink: 0;
}

.slide-container .center-area {
    flex: 1;
    display: flex;
    flex-direction: column;
    background-color: #111113;
    position: relative;
    overflow: hidden;
    /* Add this to prevent scrolling on center-area */
}

.slide-container .body {
    flex: 1;
    padding: 30px;
    overflow-y: auto;
}

/* Project Dropdown Styles */
.project-dropdown-wrapper {
    position: relative;
    margin: 0 16px;
}

.project-dropdown-btn {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 8px 16px;
    min-width: 220px;
    max-width: 320px;
    background: rgba(255, 255, 255, 0.05);
    color: #fff;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s;
    font-size: 0.875rem;
    font-weight: 500;
}

.project-dropdown-btn:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.2);
}

.project-icon {
    width: 18px;
    height: 18px;
    flex-shrink: 0;
}

.project-label {
    flex: 1;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    text-align: left;
}

.chevron-icon {
    width: 16px;
    height: 16px;
    flex-shrink: 0;
    transition: transform 0.2s;
}

.chevron-icon.open {
    transform: rotate(180deg);
}

.project-dropdown-menu {
    position: absolute;
    top: calc(100% + 8px);
    left: 0;
    width: 380px;
    background: #1a1a1c;
    border: 1px solid #2a2a2c;
    border-radius: 8px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
    z-index: 1001;
    animation: dropdownFadeIn 0.2s ease-out;
    display: flex;
    flex-direction: column;
    max-height: 480px;
}

@keyframes dropdownFadeIn {
    from {
        opacity: 0;
        transform: translateY(-8px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Search Box */
.project-search-box {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 12px 16px;
    border-bottom: 1px solid #2a2a2c;
    background: rgba(255, 255, 255, 0.02);
    position: sticky;
    top: 0;
    z-index: 1;
}

.search-icon {
    width: 18px;
    height: 18px;
    color: #666;
    flex-shrink: 0;
}

.project-search-input {
    flex: 1;
    background: transparent;
    border: none;
    color: #fff;
    font-size: 0.875rem;
    outline: none;
    padding: 0;
}

.project-search-input::placeholder {
    color: #666;
}

.clear-search-btn {
    width: 20px;
    height: 20px;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    border-radius: 4px;
    color: #999;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    flex-shrink: 0;
}

.clear-search-btn:hover {
    background: rgba(255, 255, 255, 0.15);
    color: #fff;
}

.clear-search-btn svg {
    width: 12px;
    height: 12px;
}

/* Project Count */
.project-count {
    padding: 8px 16px;
    font-size: 0.75rem;
    color: #999;
    background: rgba(255, 255, 255, 0.02);
    border-bottom: 1px solid #2a2a2c;
}

/* Project List */
.project-list {
    flex: 1;
    overflow-y: auto;
    min-height: 0;
}

.project-item {
    width: 100%;
    padding: 12px 16px;
    background: transparent;
    color: #a0a0a0;
    border: none;
    text-align: left;
    cursor: pointer;
    transition: all 0.2s;
    border-bottom: 1px solid rgba(255, 255, 255, 0.03);
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 12px;
}

.project-item:last-child {
    border-bottom: none;
}

.project-item:hover {
    background: rgba(255, 255, 255, 0.08);
    color: #fff;
}

.project-item.selected {
    background: linear-gradient(135deg, rgba(99, 102, 241, 0.2), rgba(139, 92, 246, 0.2));
    color: #fff;
}

.project-info {
    display: flex;
    flex-direction: column;
    gap: 4px;
    flex: 1;
    min-width: 0;
}

.project-name {
    font-size: 0.875rem;
    font-weight: 500;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.project-code {
    font-size: 0.75rem;
    color: #666;
    font-family: 'Courier New', monospace;
}

.project-item:hover .project-code,
.project-item.selected .project-code {
    color: #999;
}

.check-icon {
    width: 18px;
    height: 18px;
    color: #6366f1;
    flex-shrink: 0;
}

/* No Results */
.no-results {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 48px 24px;
    text-align: center;
    color: #666;
}

.no-results svg {
    width: 48px;
    height: 48px;
    margin-bottom: 16px;
    opacity: 0.5;
}

.no-results p {
    font-size: 0.875rem;
    font-weight: 500;
    color: #999;
    margin: 0 0 4px 0;
}

.no-results span {
    font-size: 0.75rem;
    color: #666;
}

/* Custom scrollbar for dropdown */
.project-list::-webkit-scrollbar {
    width: 6px;
}

.project-list::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
}

.project-list::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
}

.project-list::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.3);
}

/* Responsive adjustments */
.slide-container.minimized .project-dropdown-wrapper {
    display: none;
}










import { Component } from '@angular/core';

@Component({
  selector: 'app-sdlc',
  templateUrl: './sdlc.component.html',
  styleUrls: ['./sdlc.component.scss']
})
export class SdlcComponent {
  isActive = false;
  viewMode: 'minimized' | 'default' | 'fullwidth' = 'default';
  activeTab = 'crs';
  isProjectDropdownOpen = false;
  selectedProject = 'Select Project';
  searchQuery = '';

  // Sample projects - replace with your actual data
  projects = Array.from({ length: 100 }, (_, i) => ({
    id: i + 1,
    name: `Project ${String.fromCharCode(65 + (i % 26))}${Math.floor(i / 26) + 1}`,
    code: `PRJ-${String(i + 1).padStart(3, '0')}`
  }));

  get filteredProjects() {
    if (!this.searchQuery.trim()) {
      return this.projects;
    }
    const query = this.searchQuery.toLowerCase();
    return this.projects.filter(project =>
      project.name.toLowerCase().includes(query) ||
      project.code.toLowerCase().includes(query)
    );
  }

  openSlide() {
    this.isActive = true;
    this.viewMode = 'default';
  }

  closeSlide() {
    this.isActive = false;
    this.viewMode = 'default';
  }

  setViewMode(mode: 'minimized' | 'default' | 'fullwidth') {
    this.viewMode = mode;
  }

  setActiveTab(tab: string) {
    this.activeTab = tab;
  }

  toggleProjectDropdown() {
    this.isProjectDropdownOpen = !this.isProjectDropdownOpen;
    if (this.isProjectDropdownOpen) {
      this.searchQuery = '';
      // Focus search input after dropdown opens
      setTimeout(() => {
        const searchInput = document.querySelector('.project-search-input') as HTMLInputElement;
        if (searchInput) {
          searchInput.focus();
        }
      }, 100);
    }
  }

  selectProject(project: any) {
    this.selectedProject = `${project.name} (${project.code})`;
    this.isProjectDropdownOpen = false;
    this.searchQuery = '';
  }

  onSearchInput(event: Event) {
    const target = event.target as HTMLInputElement;
    this.searchQuery = target.value;
  }

  clearSearch() {
    this.searchQuery = '';
  }
}




----------------------------


<div class="sidebar">
    <!-- Fixed Header with Tabs -->
    <div class="tabs-header">
        <div class="tabs-container">
            <button class="tab" [class.active]="activeTab === 0" (click)="switchTab(0)">
                <svg class="tab-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M12 5v14M5 12h14" />
                </svg>
                Create SRS
            </button>
            <button class="tab" [class.active]="activeTab === 1" (click)="switchTab(1)">
                <svg class="tab-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M3 12h18M3 6h18M3 18h18" />
                </svg>
                View SRS
            </button>
        </div>
    </div>

    <!-- Scrollable Content Area -->
    <div class="content-wrapper">
        <!-- Create SRS Tab Content -->
        <div class="tab-content" [class.active]="activeTab === 0">
            <!-- CRS Selection Dropdown -->
            <div class="form-group">
                <label for="srs-select">Select CRS *</label>
                <div class="srs-dropdown-wrapper">
                    <button class="srs-dropdown-btn" [class.selected]="selectedCRS"
                        [class.error]="!selectedCRS && requirement" (click)="toggleCRSDropdown()">
                        <svg class="folder-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z">
                            </path>
                        </svg>
                        <div class="srs-label" *ngIf="selectedCRS; else placeholder">
                            <span class="srs-name">{{ selectedCRS.name }}</span>
                            <span class="srs-id">{{ selectedCRS.id }}</span>
                        </div>
                        <ng-template #placeholder>
                            <span class="placeholder-text">Select a CRS ticket...</span>
                        </ng-template>
                        <svg class="chevron-icon" [class.open]="isCRSDropdownOpen" viewBox="0 0 24 24" fill="none"
                            stroke="currentColor" stroke-width="2">
                            <polyline points="6 9 12 15 18 9"></polyline>
                        </svg>
                    </button>

                    <div class="srs-dropdown-menu" *ngIf="isCRSDropdownOpen">
                        <!-- Search Box -->
                        <div class="srs-search-box">
                            <svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                stroke-width="2">
                                <circle cx="11" cy="11" r="8"></circle>
                                <path d="m21 21-4.35-4.35"></path>
                            </svg>
                            <input type="text" class="srs-search-input" placeholder="Search CRS tickets..."
                                [value]="crsSearchQuery" (input)="onCRSSearchInput($event)" />
                            <button class="clear-search-btn" *ngIf="crsSearchQuery" (click)="clearCRSSearch()">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <line x1="18" y1="6" x2="6" y2="18"></line>
                                    <line x1="6" y1="6" x2="18" y2="18"></line>
                                </svg>
                            </button>
                        </div>

                        <!-- CRS Count -->
                        <div class="srs-count" *ngIf="crsSearchQuery">
                            {{ filteredCRSItems.length }} CRS ticket{{ filteredCRSItems.length !== 1 ? 's' : '' }} found
                        </div>

                        <!-- CRS List -->
                        <div class="srs-list">
                            <button class="srs-item" *ngFor="let crs of filteredCRSItems" (click)="selectCRS(crs)"
                                [class.selected]="selectedCRS?.id === crs.id">
                                <div class="srs-info">
                                    <span class="srs-item-name">{{ crs.name }}</span>
                                    <span class="srs-item-id">{{ crs.id }}</span>
                                    <span class="srs-item-desc">{{ crs.description }}</span>
                                </div>
                                <svg class="check-icon" *ngIf="selectedCRS?.id === crs.id" viewBox="0 0 24 24"
                                    fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="20 6 9 17 4 12"></polyline>
                                </svg>
                            </button>

                            <!-- No Results Message -->
                            <div class="no-results" *ngIf="filteredCRSItems.length === 0">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <circle cx="11" cy="11" r="8"></circle>
                                    <path d="m21 21-4.35-4.35"></path>
                                </svg>
                                <p>No CRS tickets found</p>
                                <span>Try adjusting your search</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label for="requirement">Requirement Prompt *</label>
                <textarea id="requirement" [(ngModel)]="requirement"
                    placeholder="Describe your software requirements..."></textarea>
            </div>

            <div class="form-group">
                <label for="additional">Additional Details</label>
                <textarea id="additional" [(ngModel)]="additionalDetails"
                    placeholder="Add any additional context or details..."></textarea>
            </div>

            <button class="generate-btn" [disabled]="!requirement.trim() || !selectedCRS" (click)="onGenerateSRS()">
                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z" />
                </svg>
                Generate SRS Tickets
            </button>
        </div>

        <!-- View SRS Tab Content -->
        <div class="tab-content" [class.active]="activeTab === 1">
            <!-- <app-ticket-list></app-ticket-list> -->
            <app-srs-ticket-list></app-srs-ticket-list>
        </div>
    </div>
</div>







.sidebar {
    height: 100%;
    display: flex;
    flex-direction: column;
    background: #1a1a1c;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 0.5rem 2rem rgba(0, 0, 0, 0.4);
}

/* Fixed Header */
.tabs-header {
    position: sticky;
    top: 0;
    z-index: 10;
    background: #1a1a1c;
    padding: 1rem 1rem 0 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

.tabs-container {
    background: rgba(255, 255, 255, 0.04);
    border-radius: 0.75rem;
    padding: 0.375rem;
    position: relative;
    display: flex;
    gap: 0.375rem;
    margin-bottom: 1rem;
}

.tab {
    flex: 1;
    padding: 0.625rem 1rem;
    background: transparent;
    border: none;
    color: #8a8a8e;
    font-size: 0.8125rem;
    font-weight: 600;
    cursor: pointer;
    border-radius: 0.625rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    z-index: 1;
    overflow: hidden;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.375rem;
}

.tab::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    opacity: 0;
    transition: opacity 0.3s ease;
    border-radius: 0.625rem;
    z-index: -1;
}

.tab:hover:not(.active) {
    color: #b4b4b8;
    background: rgba(255, 255, 255, 0.06);
}

.tab.active {
    color: white;
}

.tab.active::before {
    opacity: 1;
    box-shadow: 0 0.25rem 1rem rgba(99, 102, 241, 0.4),
        0 0 0 1px rgba(255, 255, 255, 0.1) inset;
}

/* Scrollable Content Wrapper */
.content-wrapper {
    flex: 1;
    overflow-y: auto;
    overflow-x: hidden;
    padding: 1.5rem 1rem;
}

.content-wrapper::-webkit-scrollbar {
    width: 0.375rem;
}

.content-wrapper::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 0.1875rem;
}

.content-wrapper::-webkit-scrollbar-thumb {
    background: rgba(99, 102, 241, 0.5);
    border-radius: 0.1875rem;
}

.content-wrapper::-webkit-scrollbar-thumb:hover {
    background: rgba(99, 102, 241, 0.7);
}

.tab-content {
    display: none;
    animation: fadeIn 0.4s ease;
}

.tab-content.active {
    display: block;
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(0.625rem);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.form-group {
    margin-bottom: 1.25rem;
}

label {
    display: block;
    color: #b4b4b8;
    font-size: 0.8125rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
}

textarea {
    width: 100%;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 0.5rem;
    color: #ffffff;
    padding: 0.75rem;
    font-size: 0.875rem;
    font-family: inherit;
    resize: vertical;
    min-height: 6.25rem;
    transition: all 0.3s ease;
}

textarea::placeholder {
    color: #5a5a5e;
}

textarea:focus {
    outline: none;
    border-color: #6366f1;
    background: rgba(255, 255, 255, 0.08);
    box-shadow: 0 0 0 0.1875rem rgba(99, 102, 241, 0.1);
}

.generate-btn {
    width: 100%;
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    color: white;
    border: none;
    border-radius: 0.5rem;
    padding: 0.75rem 1.25rem;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
    box-shadow: 0 0.25rem 0.75rem rgba(99, 102, 241, 0.3);
}

.generate-btn:hover {
    transform: translateY(-0.125rem);
    box-shadow: 0 0.375rem 1rem rgba(99, 102, 241, 0.4);
}

.generate-btn:active {
    transform: translateY(0);
}

.generate-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

.icon {
    width: 1rem;
    height: 1rem;
}

.tab-icon {
    width: 0.75rem;
    height: 0.75rem;
}

.empty-state {
    text-align: center;
    padding: 3.75rem 1.25rem;
    color: #5a5a5e;
}

.empty-icon {
    font-size: 3rem;
    margin-bottom: 0.75rem;
    opacity: 0.5;
}

.empty-text {
    font-size: 0.875rem;
}

/* SRS Dropdown Styles */
.srs-dropdown-wrapper {
    position: relative;
}

.srs-dropdown-btn {
    width: 100%;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 0.5rem;
    color: #fff;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.875rem;
    text-align: left;
}

.srs-dropdown-btn:hover {
    background: rgba(255, 255, 255, 0.08);
    border-color: rgba(255, 255, 255, 0.2);
}

.srs-dropdown-btn.selected {
    border-color: #6366f1;
    background: rgba(99, 102, 241, 0.1);
}

.srs-dropdown-btn.error {
    border-color: #ef4444;
}

.folder-icon {
    width: 1.125rem;
    height: 1.125rem;
    flex-shrink: 0;
    color: #6366f1;
}

.srs-label {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    min-width: 0;
}

.srs-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: #fff;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.srs-id {
    font-size: 0.75rem;
    color: #999;
    font-family: 'Courier New', monospace;
}

.placeholder-text {
    flex: 1;
    color: #5a5a5e;
}

.chevron-icon {
    width: 1rem;
    height: 1rem;
    flex-shrink: 0;
    transition: transform 0.2s;
    color: #999;
}

.chevron-icon.open {
    transform: rotate(180deg);
}

.srs-dropdown-menu {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    right: 0;
    background: #1a1a1c;
    border: 1px solid #2a2a2c;
    border-radius: 0.5rem;
    box-shadow: 0 0.5rem 1.5rem rgba(0, 0, 0, 0.4);
    z-index: 1001;
    animation: dropdownFadeIn 0.2s ease-out;
    display: flex;
    flex-direction: column;
    max-height: 400px;
}

@keyframes dropdownFadeIn {
    from {
        opacity: 0;
        transform: translateY(-0.5rem);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Search Box */
.srs-search-box {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    background: rgba(255, 255, 255, 0.02);
    position: sticky;
    top: 0;
    z-index: 1;
}

.search-icon {
    width: 1.125rem;
    height: 1.125rem;
    color: #666;
    flex-shrink: 0;
}

.srs-search-input {
    flex: 1;
    background: transparent;
    border: none;
    color: #fff;
    font-size: 0.875rem;
    outline: none;
    padding: 0;
}

.srs-search-input::placeholder {
    color: #666;
}

.clear-search-btn {
    width: 1.25rem;
    height: 1.25rem;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    border-radius: 0.25rem;
    color: #999;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    flex-shrink: 0;
}

.clear-search-btn:hover {
    background: rgba(255, 255, 255, 0.15);
    color: #fff;
}

.clear-search-btn svg {
    width: 0.75rem;
    height: 0.75rem;
}

/* SRS Count */
.srs-count {
    padding: 0.5rem 0.75rem;
    font-size: 0.75rem;
    color: #999;
    background: rgba(255, 255, 255, 0.02);
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

/* SRS List */
.srs-list {
    flex: 1;
    overflow-y: auto;
    min-height: 0;
}

.srs-item {
    width: 100%;
    padding: 0.75rem;
    background: transparent;
    color: #a0a0a0;
    border: none;
    text-align: left;
    cursor: pointer;
    transition: all 0.2s;
    border-bottom: 1px solid rgba(255, 255, 255, 0.03);
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    gap: 0.75rem;
}

.srs-item:last-child {
    border-bottom: none;
}

.srs-item:hover {
    background: rgba(255, 255, 255, 0.08);
    color: #fff;
}

.srs-item.selected {
    background: linear-gradient(135deg, rgba(99, 102, 241, 0.2), rgba(139, 92, 246, 0.2));
    color: #fff;
}

.srs-info {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    flex: 1;
    min-width: 0;
}

.srs-item-name {
    font-size: 0.875rem;
    font-weight: 500;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.srs-item-id {
    font-size: 0.75rem;
    color: #666;
    font-family: 'Courier New', monospace;
}

.srs-item-desc {
    font-size: 0.75rem;
    color: #888;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.srs-item:hover .srs-item-id,
.srs-item:hover .srs-item-desc,
.srs-item.selected .srs-item-id,
.srs-item.selected .srs-item-desc {
    color: #999;
}

.check-icon {
    width: 1.125rem;
    height: 1.125rem;
    color: #6366f1;
    flex-shrink: 0;
    margin-top: 0.125rem;
}

/* No Results */
.no-results {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem 1.5rem;
    text-align: center;
    color: #666;
}

.no-results svg {
    width: 3rem;
    height: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

.no-results p {
    font-size: 0.875rem;
    font-weight: 500;
    color: #999;
    margin: 0 0 0.25rem 0;
}

.no-results span {
    font-size: 0.75rem;
    color: #666;
}

/* Custom scrollbar for dropdown */
.srs-list::-webkit-scrollbar {
    width: 0.375rem;
}

.srs-list::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
}

.srs-list::-webkit-scrollbar-thumb {
    background: rgba(99, 102, 241, 0.5);
    border-radius: 0.1875rem;
}

.srs-list::-webkit-scrollbar-thumb:hover {
    background: rgba(99, 102, 241, 0.7);
}






import { Component } from '@angular/core';

interface SRSTicket {
  id: string;
  crsId: string;
  crsName: string;
  requirement: string;
  additionalDetails: string;
  createdAt: Date;
}

interface CRSItem {
  id: string;
  name: string;
  description: string;
}

@Component({
  selector: 'app-srs-maker',
  templateUrl: './srs-maker.component.html',
  styleUrls: ['./srs-maker.component.scss']
})
export class SrsMakerComponent {

  activeTab: number = 0;
  requirement: string = '';
  additionalDetails: string = '';
  tickets: SRSTicket[] = [];

  // CRS Dropdown
  isCRSDropdownOpen = false;
  selectedCRS: CRSItem | null = null;
  crsSearchQuery = '';

  // Sample CRS data - replace with your actual data from service
  crsItems: CRSItem[] = Array.from({ length: 50 }, (_, i) => ({
    id: `CRS-${String(i + 1).padStart(4, '0')}`,
    name: `Customer Requirement ${i + 1}`,
    description: `Description for CRS ${i + 1}`
  }));

  get filteredCRSItems() {
    if (!this.crsSearchQuery.trim()) {
      return this.crsItems;
    }
    const query = this.crsSearchQuery.toLowerCase();
    return this.crsItems.filter(crs =>
      crs.id.toLowerCase().includes(query) ||
      crs.name.toLowerCase().includes(query) ||
      crs.description.toLowerCase().includes(query)
    );
  }

  switchTab(index: number): void {
    this.activeTab = index;
  }

  toggleCRSDropdown(): void {
    this.isCRSDropdownOpen = !this.isCRSDropdownOpen;
    if (this.isCRSDropdownOpen) {
      this.crsSearchQuery = '';
      setTimeout(() => {
        const searchInput = document.querySelector('.crs-search-input') as HTMLInputElement;
        if (searchInput) {
          searchInput.focus();
        }
      }, 100);
    }
  }

  selectCRS(crs: CRSItem): void {
    this.selectedCRS = crs;
    this.isCRSDropdownOpen = false;
    this.crsSearchQuery = '';
  }

  onCRSSearchInput(event: Event): void {
    const target = event.target as HTMLInputElement;
    this.crsSearchQuery = target.value;
  }

  clearCRSSearch(): void {
    this.crsSearchQuery = '';
  }

  onGenerateSRS(): void {
    if (!this.requirement.trim() || !this.selectedCRS) {
      // You might want to show a validation message
      return;
    }

    const ticket: SRSTicket = {
      id: `SRS-${String(this.tickets.length + 1).padStart(4, '0')}`,
      crsId: this.selectedCRS.id,
      crsName: this.selectedCRS.name,
      requirement: this.requirement,
      additionalDetails: this.additionalDetails,
      createdAt: new Date()
    };

    this.tickets.unshift(ticket);

    // Clear form
    this.requirement = '';
    this.additionalDetails = '';
    this.selectedCRS = null;

    // Switch to View SRS tab
    this.switchTab(1);

    console.log('Created SRS ticket:', ticket);
  }

}





-----------------------




<div class="srs-ticket-list-wrapper">
    <!-- CRS Filter Dropdown -->
    <div class="crs-filter-section">
        <div class="crs-filter-header">
            <h3 class="filter-title">Filter by CRS</h3>
            <button class="clear-filter-btn" *ngIf="selectedCRS" (click)="clearCRSFilter()" title="Clear filter">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
                Clear
            </button>
        </div>

        <div class="crs-dropdown-wrapper">
            <button class="crs-dropdown-btn" [class.selected]="selectedCRS" (click)="toggleCRSDropdown()">
                <svg class="folder-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
                </svg>
                <div class="crs-label" *ngIf="selectedCRS; else placeholder">
                    <span class="crs-name">{{ selectedCRS.name }}</span>
                    <span class="crs-id">{{ selectedCRS.id }}</span>
                </div>
                <ng-template #placeholder>
                    <span class="placeholder-text">All CRS Tickets</span>
                </ng-template>
                <svg class="chevron-icon" [class.open]="isCRSDropdownOpen" viewBox="0 0 24 24" fill="none"
                    stroke="currentColor" stroke-width="2">
                    <polyline points="6 9 12 15 18 9"></polyline>
                </svg>
            </button>

            <div class="crs-dropdown-menu" *ngIf="isCRSDropdownOpen">
                <!-- Search Box -->
                <div class="crs-search-box">
                    <svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="11" cy="11" r="8"></circle>
                        <path d="m21 21-4.35-4.35"></path>
                    </svg>
                    <input type="text" class="crs-search-input" placeholder="Search CRS tickets..."
                        [value]="crsSearchQuery" (input)="onCRSSearchInput($event)" />
                    <button class="clear-search-btn" *ngIf="crsSearchQuery" (click)="clearCRSSearch()">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <line x1="18" y1="6" x2="6" y2="18"></line>
                            <line x1="6" y1="6" x2="18" y2="18"></line>
                        </svg>
                    </button>
                </div>

                <!-- CRS Count -->
                <div class="crs-count" *ngIf="crsSearchQuery">
                    {{ filteredCRSItems.length }} CRS ticket{{ filteredCRSItems.length !== 1 ? 's' : '' }} found
                </div>

                <!-- CRS List -->
                <div class="crs-list">
                    <button class="crs-item" *ngFor="let crs of filteredCRSItems" (click)="selectCRS(crs)"
                        [class.selected]="selectedCRS?.id === crs.id">
                        <div class="crs-info">
                            <span class="crs-item-name">{{ crs.name }}</span>
                            <span class="crs-item-id">{{ crs.id }}</span>
                            <span class="crs-item-desc">{{ crs.description }}</span>
                        </div>
                        <svg class="check-icon" *ngIf="selectedCRS?.id === crs.id" viewBox="0 0 24 24" fill="none"
                            stroke="currentColor" stroke-width="2">
                            <polyline points="20 6 9 17 4 12"></polyline>
                        </svg>
                    </button>

                    <!-- No Results Message -->
                    <div class="no-results" *ngIf="filteredCRSItems.length === 0">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <circle cx="11" cy="11" r="8"></circle>
                            <path d="m21 21-4.35-4.35"></path>
                        </svg>
                        <p>No CRS tickets found</p>
                        <span>Try adjusting your search</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Ticket Cards Container -->
    <div class="ticket-container">
        <div *ngFor="let ticket of tickets" class="ticket-card card-{{ticket.type}}"
            [class.active]="isActive(ticket.id)" (click)="selectTicket(ticket.id)">
            <!-- Blinking dot indicator for active card -->
            <span class="active-indicator" *ngIf="isActive(ticket.id)"></span>

            <div class="ticket-header">
                <!-- Story Icon -->
                <svg *ngIf="ticket.type === 'story'" class="ticket-type type-story" viewBox="0 0 16 16"
                    fill="currentColor">
                    <rect x="1" y="1" width="14" height="14" rx="2" />
                </svg>

                <!-- Task Icon -->
                <svg *ngIf="ticket.type === 'task'" class="ticket-type type-task" viewBox="0 0 16 16"
                    fill="currentColor">
                    <path
                        d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z" />
                </svg>

                <!-- Bug Icon -->
                <svg *ngIf="ticket.type === 'bug'" class="ticket-type type-bug" viewBox="0 0 16 16" fill="currentColor">
                    <circle cx="8" cy="8" r="7" />
                </svg>

                <div class="ticket-title">{{ticket.title}}</div>
            </div>
            <div class="ticket-footer">
                <div class="ticket-meta">
                    <span class="ticket-id">{{ticket.id}}</span>
                </div>
                <span class="ticket-status status-{{ticket.status}}">
                    {{ticket.status}}
                </span>
            </div>
        </div>

        <!-- Empty State -->
        <div class="empty-state" *ngIf="tickets.length === 0">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M9 11l3 3L22 4"></path>
                <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
            </svg>
            <p>No SRS tickets found</p>
            <span *ngIf="selectedCRS">Try selecting a different CRS or clear the filter</span>
            <span *ngIf="!selectedCRS">Create your first SRS ticket to get started</span>
        </div>
    </div>
</div>











:host {
    display: block;
    width: 100%;
    height: 100%;
}

.srs-ticket-list-wrapper {
    display: flex;
    flex-direction: column;
    height: 100%;
    gap: 1.5rem;
}

/* CRS Filter Section */
.crs-filter-section {
    flex-shrink: 0;
}

.crs-filter-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
}

.filter-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: #E8EAED;
    margin: 0;
    letter-spacing: 0.025rem;
}

.clear-filter-btn {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.375rem 0.75rem;
    background: rgba(255, 107, 107, 0.1);
    border: 1px solid rgba(255, 107, 107, 0.3);
    border-radius: 0.375rem;
    color: #FF6B6B;
    font-size: 0.75rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
}

.clear-filter-btn:hover {
    background: rgba(255, 107, 107, 0.2);
    border-color: rgba(255, 107, 107, 0.5);
}

.clear-filter-btn svg {
    width: 0.875rem;
    height: 0.875rem;
}

/* CRS Dropdown Styles */
.crs-dropdown-wrapper {
    position: relative;
}

.crs-dropdown-btn {
    width: 100%;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.875rem 1rem;
    background: linear-gradient(135deg, #1e2329 0%, #252b33 100%);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 0.75rem;
    color: #fff;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.875rem;
    text-align: left;
    box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.3);
}

.crs-dropdown-btn:hover {
    background: linear-gradient(135deg, #252b33 0%, #2a2f36 100%);
    border-color: rgba(102, 126, 234, 0.3);
    box-shadow: 0 0.375rem 1rem rgba(102, 126, 234, 0.2);
    transform: translateY(-0.063rem);
}

.crs-dropdown-btn.selected {
    border-color: rgba(102, 126, 234, 0.5);
    background: linear-gradient(135deg, #2a2f36 0%, #252b33 100%);
    box-shadow: 0 0.375rem 1rem rgba(102, 126, 234, 0.25);
}

.folder-icon {
    width: 1.25rem;
    height: 1.25rem;
    flex-shrink: 0;
    color: #667eea;
}

.crs-label {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
    min-width: 0;
}

.crs-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: #E8EAED;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.crs-id {
    font-size: 0.75rem;
    color: #667eea;
    font-family: 'Courier New', monospace;
    font-weight: 600;
}

.placeholder-text {
    flex: 1;
    color: #8a8a8e;
    font-weight: 500;
}

.chevron-icon {
    width: 1.125rem;
    height: 1.125rem;
    flex-shrink: 0;
    transition: transform 0.2s;
    color: #8a8a8e;
}

.chevron-icon.open {
    transform: rotate(180deg);
}

.crs-dropdown-menu {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    right: 0;
    background: #1a1a1c;
    border: 1px solid #2a2a2c;
    border-radius: 0.75rem;
    box-shadow: 0 0.75rem 2rem rgba(0, 0, 0, 0.5);
    z-index: 1001;
    animation: dropdownFadeIn 0.2s ease-out;
    display: flex;
    flex-direction: column;
    max-height: 400px;
}

@keyframes dropdownFadeIn {
    from {
        opacity: 0;
        transform: translateY(-0.5rem);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Search Box */
.crs-search-box {
    display: flex;
    align-items: center;
    gap: 0.625rem;
    padding: 0.875rem 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    background: rgba(255, 255, 255, 0.02);
    position: sticky;
    top: 0;
    z-index: 1;
    border-radius: 0.75rem 0.75rem 0 0;
}

.search-icon {
    width: 1.125rem;
    height: 1.125rem;
    color: #666;
    flex-shrink: 0;
}

.crs-search-input {
    flex: 1;
    background: transparent;
    border: none;
    color: #E8EAED;
    font-size: 0.875rem;
    outline: none;
    padding: 0;
}

.crs-search-input::placeholder {
    color: #666;
}

.clear-search-btn {
    width: 1.375rem;
    height: 1.375rem;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    border-radius: 0.313rem;
    color: #999;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    flex-shrink: 0;
}

.clear-search-btn:hover {
    background: rgba(255, 255, 255, 0.15);
    color: #fff;
}

.clear-search-btn svg {
    width: 0.875rem;
    height: 0.875rem;
}

/* CRS Count */
.crs-count {
    padding: 0.625rem 1rem;
    font-size: 0.75rem;
    color: #999;
    background: rgba(255, 255, 255, 0.02);
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

/* CRS List */
.crs-list {
    flex: 1;
    overflow-y: auto;
    min-height: 0;
}

.crs-item {
    width: 100%;
    padding: 0.875rem 1rem;
    background: transparent;
    color: #a0a0a0;
    border: none;
    text-align: left;
    cursor: pointer;
    transition: all 0.2s;
    border-bottom: 1px solid rgba(255, 255, 255, 0.03);
    display: flex;
    align-items: flex-start;
    justify-content: space-between;
    gap: 0.75rem;
}

.crs-item:last-child {
    border-bottom: none;
}

.crs-item:hover {
    background: rgba(255, 255, 255, 0.08);
    color: #E8EAED;
}

.crs-item.selected {
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.2), rgba(118, 75, 162, 0.2));
    color: #E8EAED;
}

.crs-info {
    display: flex;
    flex-direction: column;
    gap: 0.313rem;
    flex: 1;
    min-width: 0;
}

.crs-item-name {
    font-size: 0.875rem;
    font-weight: 500;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.crs-item-id {
    font-size: 0.75rem;
    color: #666;
    font-family: 'Courier New', monospace;
    font-weight: 600;
}

.crs-item-desc {
    font-size: 0.75rem;
    color: #888;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.crs-item:hover .crs-item-id,
.crs-item:hover .crs-item-desc {
    color: #999;
}

.crs-item.selected .crs-item-id {
    color: #667eea;
}

.crs-item.selected .crs-item-desc {
    color: #999;
}

.check-icon {
    width: 1.125rem;
    height: 1.125rem;
    color: #667eea;
    flex-shrink: 0;
    margin-top: 0.125rem;
}

/* No Results */
.no-results {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem 1.5rem;
    text-align: center;
    color: #666;
}

.no-results svg {
    width: 3rem;
    height: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

.no-results p {
    font-size: 0.875rem;
    font-weight: 500;
    color: #999;
    margin: 0 0 0.375rem 0;
}

.no-results span {
    font-size: 0.75rem;
    color: #666;
}

/* Custom scrollbar for dropdown */
.crs-list::-webkit-scrollbar {
    width: 0.375rem;
}

.crs-list::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
}

.crs-list::-webkit-scrollbar-thumb {
    background: rgba(102, 126, 234, 0.5);
    border-radius: 0.1875rem;
}

.crs-list::-webkit-scrollbar-thumb:hover {
    background: rgba(102, 126, 234, 0.7);
}

/* Ticket Container */
.ticket-container {
    flex: 1;
    overflow-y: auto;
    overflow-x: hidden;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.ticket-container::-webkit-scrollbar {
    width: 0.375rem;
}

.ticket-container::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 0.313rem;
}

.ticket-container::-webkit-scrollbar-thumb {
    background: linear-gradient(180deg, #667eea 0%, #764ba2 100%);
    border-radius: 0.313rem;
}

.ticket-container::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(180deg, #764ba2 0%, #667eea 100%);
}

.ticket-card {
    width: 100%;
    min-height: 7.5rem;
    background: linear-gradient(135deg, #1e2329 0%, #252b33 100%);
    border-radius: 0.75rem;
    padding: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.08);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.3);
    position: relative;
    overflow: hidden;
    flex-shrink: 0;
}

/* Blinking dot indicator */
.active-indicator {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
    width: 0.625rem;
    height: 0.625rem;
    background: #667eea;
    border-radius: 50%;
    z-index: 10;
    animation: blink 1.5s ease-in-out infinite;
    box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.7);
}

.active-indicator::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    background: #667eea;
    border-radius: 50%;
    animation: pulse-ring 1.5s ease-out infinite;
}

@keyframes blink {

    0%,
    100% {
        opacity: 1;
        transform: scale(1);
    }

    50% {
        opacity: 0.6;
        transform: scale(0.95);
    }
}

@keyframes pulse-ring {
    0% {
        box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.7);
    }

    70% {
        box-shadow: 0 0 0 0.5rem rgba(102, 126, 234, 0);
    }

    100% {
        box-shadow: 0 0 0 0 rgba(102, 126, 234, 0);
    }
}

/* Simple elegant active state */
.ticket-card.active {
    background: #2a2f36;
    border: 1px solid rgba(102, 126, 234, 0.5);
    box-shadow: 0 0.375rem 1.25rem rgba(102, 126, 234, 0.2);
    transform: translateY(-0.125rem);
}

.ticket-card.active::before {
    opacity: 0;
}

.ticket-card:hover {
    transform: translateY(-0.25rem);
    box-shadow: 0 0.5rem 1.5rem rgba(102, 126, 234, 0.25);
    border-color: rgba(102, 126, 234, 0.3);
}

.ticket-card.active:hover {
    transform: translateY(-0.25rem);
    box-shadow: 0 0.5rem 1.75rem rgba(102, 126, 234, 0.3);
}

.ticket-card:not(.active):hover::before {
    opacity: 1;
}

.ticket-card.active:hover::before {
    opacity: 0;
}

.ticket-card.active .ticket-title {
    color: #fff;
}

.ticket-card.active .ticket-id {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    box-shadow: 0 0.25rem 0.75rem rgba(102, 126, 234, 0.4);
}

.ticket-header {
    display: flex;
    align-items: flex-start;
    gap: 0.625rem;
    margin-bottom: 0.5rem;
    min-height: 0;
}

.ticket-type {
    width: 1.25rem;
    height: 1.25rem;
    flex-shrink: 0;
    margin-top: 0.125rem;
    filter: drop-shadow(0 0.125rem 0.25rem rgba(0, 0, 0, 0.3));
    transition: all 0.3s ease;
}

.ticket-card.active .ticket-type {
    filter: drop-shadow(0 0.125rem 0.375rem rgba(0, 0, 0, 0.5));
}

.type-story {
    color: #57D9A3;
}

.type-task {
    color: #4BADE8;
}

.type-bug {
    color: #FF6B6B;
}

.ticket-title {
    font-size: 0.813rem;
    font-weight: 500;
    color: #E8EAED;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    line-height: 1.5;
    flex: 1;
    text-shadow: 0 0.063rem 0.125rem rgba(0, 0, 0, 0.2);
    word-break: break-word;
    min-width: 0;
    transition: all 0.3s ease;
}

.ticket-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: auto;
    padding-top: 0.5rem;
    border-top: 1px solid rgba(255, 255, 255, 0.06);
    gap: 0.5rem;
}

.ticket-card.active .ticket-footer {
    border-top-color: rgba(255, 255, 255, 0.1);
}

.ticket-meta {
    display: flex;
    align-items: center;
    min-width: 0;
    flex-shrink: 1;
}

.ticket-id {
    font-size: 0.625rem;
    font-weight: 700;
    color: #fff;
    letter-spacing: 0.063rem;
    padding: 0.375rem 0.875rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 1.25rem;
    transition: all 0.3s ease;
    box-shadow: 0 0.25rem 0.75rem rgba(102, 126, 234, 0.3);
    text-transform: uppercase;
    position: relative;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    max-width: 7.5rem;
}

.ticket-id::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease;
}

.ticket-card:hover .ticket-id {
    transform: translateX(-0.125rem);
    box-shadow: 0 0.375rem 1rem rgba(102, 126, 234, 0.5);
}

.ticket-card:hover .ticket-id::before {
    left: 100%;
}

.ticket-status {
    font-size: 0.563rem;
    padding: 0.375rem 1rem;
    border-radius: 1.25rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.075rem;
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.2);
    white-space: nowrap;
    flex-shrink: 0;
}

.ticket-status::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease;
}

.ticket-status::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.4);
    transform: translate(-50%, -50%);
    transition: width 0.4s ease, height 0.4s ease;
}

.ticket-card:hover .ticket-status::before {
    left: 100%;
}

.ticket-card:hover .ticket-status::after {
    width: 120%;
    height: 300%;
}

.status-major {
    background: linear-gradient(135deg, #FF6B6B 0%, #FF5252 100%);
    color: #fff;
    box-shadow: 0 0.25rem 0.75rem rgba(255, 107, 107, 0.5);
}

.status-minor {
    background: linear-gradient(135deg, #4FC3F7 0%, #2196F3 100%);
    color: #fff;
    box-shadow: 0 0.25rem 0.75rem rgba(79, 195, 247, 0.5);
}

.ticket-card:hover .status-major {
    box-shadow: 0 0.375rem 1.25rem rgba(255, 107, 107, 0.7);
    transform: translateX(0.125rem) scale(1.05);
}

.ticket-card:hover .status-minor {
    box-shadow: 0 0.375rem 1.25rem rgba(79, 195, 247, 0.7);
    transform: translateX(0.125rem) scale(1.05);
}

.ticket-card.card-bug {
    border-left: 0.188rem solid #FF6B6B;
}

.ticket-card.card-task {
    border-left: 0.188rem solid #4BADE8;
}

.ticket-card.card-story {
    border-left: 0.188rem solid #57D9A3;
}

.ticket-card.active.card-bug {
    border-left: 0.188rem solid #FF6B6B;
}

.ticket-card.active.card-task {
    border-left: 0.188rem solid #4BADE8;
}

.ticket-card.active.card-story {
    border-left: 0.188rem solid #57D9A3;
}

@keyframes glow-major {

    0%,
    100% {
        box-shadow: 0 0.25rem 0.75rem rgba(255, 107, 107, 0.5);
    }

    50% {
        box-shadow: 0 0.25rem 1.25rem rgba(255, 107, 107, 0.8);
    }
}

@keyframes glow-minor {

    0%,
    100% {
        box-shadow: 0 0.25rem 0.75rem rgba(79, 195, 247, 0.5);
    }

    50% {
        box-shadow: 0 0.25rem 1.25rem rgba(79, 195, 247, 0.8);
    }
}

.status-major {
    animation: glow-major 3s ease-in-out infinite;
}

.status-minor {
    animation: glow-minor 3s ease-in-out infinite;
}

/* Empty State */
.empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 4rem 2rem;
    text-align: center;
    color: #666;
    background: linear-gradient(135deg, rgba(30, 35, 41, 0.5) 0%, rgba(37, 43, 51, 0.5) 100%);
    border-radius: 0.75rem;
    border: 1px dashed rgba(255, 255, 255, 0.1);
}

.empty-state svg {
    width: 4rem;
    height: 4rem;
    margin-bottom: 1.25rem;
    opacity: 0.4;
    color: #667eea;
}

.empty-state p {
    font-size: 1rem;
    font-weight: 600;
    color: #999;
    margin: 0 0 0.5rem 0;
}

.empty-state span {
    font-size: 0.875rem;
    color: #666;
    line-height: 1.5;
}
















import { Component } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';

interface SRSTicket {
  id: string;
  title: string;
  type: 'story' | 'task' | 'bug';
  status: 'major' | 'minor';
  crsId: string;
  crsName: string;
}

interface CRSItem {
  id: string;
  name: string;
  description: string;
}

@Component({
  selector: 'app-srs-ticket-list',
  templateUrl: './srs-ticket-list.component.html',
  styleUrls: ['./srs-ticket-list.component.scss']
})
export class SrsTicketListComponent {

  activeTicketId: string | null = null;

  // CRS Dropdown
  isCRSDropdownOpen = false;
  selectedCRS: CRSItem | null = null;
  crsSearchQuery = '';

  // Sample CRS data
  crsItems: CRSItem[] = Array.from({ length: 50 }, (_, i) => ({
    id: `CRS-${String(i + 1).padStart(4, '0')}`,
    name: `Customer Requirement ${i + 1}`,
    description: `Description for CRS ${i + 1}`
  }));

  // Sample SRS tickets
  allTickets: SRSTicket[] = [
    {
      id: 'SRS-001',
      title: 'Implement user authentication with OAuth 2.0',
      type: 'story',
      status: 'major',
      crsId: 'CRS-0001',
      crsName: 'Customer Requirement 1'
    },
    {
      id: 'SRS-002',
      title: 'Create API endpoint for user profile management',
      type: 'task',
      status: 'minor',
      crsId: 'CRS-0001',
      crsName: 'Customer Requirement 1'
    },
    {
      id: 'SRS-003',
      title: 'Fix session timeout issue in authentication module',
      type: 'bug',
      status: 'major',
      crsId: 'CRS-0001',
      crsName: 'Customer Requirement 1'
    },
    {
      id: 'SRS-004',
      title: 'Design responsive dashboard layout for mobile devices',
      type: 'story',
      status: 'minor',
      crsId: 'CRS-0002',
      crsName: 'Customer Requirement 2'
    },
    {
      id: 'SRS-005',
      title: 'Integrate real-time notification system using WebSocket',
      type: 'task',
      status: 'major',
      crsId: 'CRS-0002',
      crsName: 'Customer Requirement 2'
    },
    {
      id: 'SRS-006',
      title: 'Memory leak in notification service causing performance issues',
      type: 'bug',
      status: 'major',
      crsId: 'CRS-0003',
      crsName: 'Customer Requirement 3'
    }
  ];

  constructor(private sanitizer: DomSanitizer) { }

  get filteredCRSItems() {
    if (!this.crsSearchQuery.trim()) {
      return this.crsItems;
    }
    const query = this.crsSearchQuery.toLowerCase();
    return this.crsItems.filter(crs =>
      crs.id.toLowerCase().includes(query) ||
      crs.name.toLowerCase().includes(query) ||
      crs.description.toLowerCase().includes(query)
    );
  }

  get tickets() {
    if (!this.selectedCRS) {
      return this.allTickets;
    }
    return this.allTickets.filter(ticket => ticket.crsId === this.selectedCRS!.id);
  }

  toggleCRSDropdown(): void {
    this.isCRSDropdownOpen = !this.isCRSDropdownOpen;
    if (this.isCRSDropdownOpen) {
      this.crsSearchQuery = '';
      setTimeout(() => {
        const searchInput = document.querySelector('.crs-search-input') as HTMLInputElement;
        if (searchInput) {
          searchInput.focus();
        }
      }, 100);
    }
  }

  selectCRS(crs: CRSItem): void {
    this.selectedCRS = crs;
    this.isCRSDropdownOpen = false;
    this.crsSearchQuery = '';
    this.activeTicketId = null; // Reset active ticket when changing CRS
  }

  clearCRSFilter(): void {
    this.selectedCRS = null;
    this.activeTicketId = null;
  }

  onCRSSearchInput(event: Event): void {
    const target = event.target as HTMLInputElement;
    this.crsSearchQuery = target.value;
  }

  clearCRSSearch(): void {
    this.crsSearchQuery = '';
  }

  getTypeIcon(type: string): SafeHtml {
    let svg = '';
    switch (type) {
      case 'story':
        svg = '<rect x="1" y="1" width="14" height="14" rx="2" />';
        break;
      case 'task':
        svg = '<path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z" />';
        break;
      case 'bug':
        svg = '<circle cx="8" cy="8" r="7" />';
        break;
      default:
        svg = '';
    }
    return this.sanitizer.bypassSecurityTrustHtml(svg);
  }

  selectTicket(ticketId: string): void {
    this.activeTicketId = ticketId;
  }

  isActive(ticketId: string): boolean {
    return this.activeTicketId === ticketId;
  }

}









------------------------------




<!-- ticket-details.component.html -->
<div class="ticket-details">
    <div class="ticket-header">
        <div class="ticket-type">✓</div>
        <div class="ticket-title-section">
            <div class="ticket-id">{{ ticket.id }}</div>
            <h1 class="ticket-title">{{ ticket.title }}</h1>
        </div>
    </div>

    <div class="description-section">
        <h3 class="section-title">Description</h3>
        <div class="description-content">
            <p>{{ ticket.description }}</p>
            <br>
            <p><strong>Requirements:</strong></p>
            <ul>
                <li *ngFor="let requirement of ticket.requirements">{{ requirement }}</li>
            </ul>
        </div>
    </div>

    <div class="actions">
        <button class="btn btn-primary" (click)="onConfirmCreation()">
            Confirm Creation
        </button>
    </div>
</div>










/* ticket-details.component.css */

:host {
    display: flex;
    min-height: 100%;
}

.ticket-details {
    background-color: #1d1f21;
    padding: 1.5rem;
    width: 100%;
}

.ticket-header {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    margin-bottom: 1.25rem;
}

.ticket-type {
    width: 1.5rem;
    height: 1.5rem;
    background-color: #22a06b;
    border-radius: 0.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    flex-shrink: 0;
    color: white;
}

.ticket-title-section {
    flex: 1;
}

.ticket-id {
    color: #8696a7;
    font-size: 0.813rem;
    margin-bottom: 0.25rem;
}

.ticket-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #e6edf3;
    margin-bottom: 0.5rem;
}

.description-section {
    margin-top: 1.5rem;
}

.section-title {
    font-size: 0.688rem;
    font-weight: 600;
    text-transform: uppercase;
    color: #8696a7;
    margin-bottom: 0.75rem;
    letter-spacing: 0.03rem;
}

.description-content {
    color: #b6c2cf;
    line-height: 1.7;
    margin-bottom: 1.5rem;
    font-size: 0.875rem;
}

.description-content ul {
    margin-left: 1.25rem;
    margin-top: 0.5rem;
}

.description-content ul li {
    margin-bottom: 0.25rem;
}

.actions {
    display: flex;
    gap: 0.75rem;
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid #2c2c2e;
    justify-content: flex-end;
}

.btn {
    padding: 0.625rem 1.25rem;
    border-radius: 0.5rem;
    border: none;
    cursor: pointer;
    font-size: 0.875rem;
    font-weight: 600;
    transition: all 0.3s ease;
    box-shadow: 0 0.25rem 0.75rem rgba(99, 102, 241, 0.3);
}

.btn-primary {
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    color: white;
    position: relative;
    overflow: hidden;
}

.btn-primary::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
}

.btn-primary:hover::before {
    left: 100%;
}

.btn-primary:hover {
    background: linear-gradient(135deg, #5558e3, #7c4de7);
    box-shadow: 0 0.375rem 1.25rem rgba(99, 102, 241, 0.4);
    transform: translateY(-0.125rem);
}

.btn-primary:active {
    transform: translateY(0);
    box-shadow: 0 0.125rem 0.5rem rgba(99, 102, 241, 0.3);
}














import { Component } from '@angular/core';

@Component({
  selector: 'app-ticket-details',
  templateUrl: './ticket-details.component.html',
  styleUrls: ['./ticket-details.component.scss']
})
export class TicketDetailsComponent {

  ticket = {
    id: 'PROJ-1234',
    title: 'Implement user authentication system with OAuth 2.0',
    description: 'We need to implement a secure authentication system that supports OAuth 2.0 integration with major providers including Google, GitHub, and Microsoft.',
    requirements: [
      'Support for multiple OAuth providers',
      'Secure token storage and refresh mechanism',
      'Session management with Redis',
      'User profile synchronization'
    ]
  };

  onConfirmCreation(): void {
    console.log('Ticket creation confirmed:', this.ticket);
    // Add your logic here
  }

}




---------------------------------







<div class="ticket-container">
    <div *ngFor="let ticket of tickets" class="ticket-card card-{{ticket.type}}" [class.active]="isActive(ticket.id)"
        (click)="selectTicket(ticket.id)">
        <!-- Blinking dot indicator for active card -->
        <span class="active-indicator" *ngIf="isActive(ticket.id)"></span>

        <div class="ticket-header">
            <!-- Story Icon -->
            <svg *ngIf="ticket.type === 'story'" class="ticket-type type-story" viewBox="0 0 16 16" fill="currentColor">
                <rect x="1" y="1" width="14" height="14" rx="2" />
            </svg>

            <!-- Task Icon -->
            <svg *ngIf="ticket.type === 'task'" class="ticket-type type-task" viewBox="0 0 16 16" fill="currentColor">
                <path
                    d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z" />
            </svg>

            <!-- Bug Icon -->
            <svg *ngIf="ticket.type === 'bug'" class="ticket-type type-bug" viewBox="0 0 16 16" fill="currentColor">
                <circle cx="8" cy="8" r="7" />
            </svg>

            <div class="ticket-title">{{ticket.title}}</div>
        </div>
        <div class="ticket-footer">
            <div class="ticket-meta">
                <span class="ticket-id">{{ticket.id}}</span>
            </div>
            <span class="ticket-status status-{{ticket.status}}">
                {{ticket.status}}
            </span>
        </div>
    </div>
</div>













:host {
    display: block;
    width: 100%;
    height: 100%;
}

.ticket-container {
    height: 8.75rem;
    // overflow-x: auto;
    // overflow-y: hidden;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    // padding: 0.625rem 1.25rem;
    // box-sizing: border-box;
}

.ticket-container::-webkit-scrollbar {
    height: 0.375rem;
}

.ticket-container::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 0.313rem;
    margin: 0 1.25rem;
}

.ticket-container::-webkit-scrollbar-thumb {
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    border-radius: 0.313rem;
}

.ticket-container::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(90deg, #764ba2 0%, #667eea 100%);
}

.ticket-card {
    width: 17.5rem;
    min-width: 17.5rem;
    max-width: 17.5rem;
    height: 7.5rem;
    background: linear-gradient(135deg, #1e2329 0%, #252b33 100%);
    border-radius: 0.75rem;
    padding: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.08);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    cursor: pointer;
    box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.3);
    position: relative;
    overflow: hidden;
    flex-shrink: 0;
}

/* Blinking dot indicator */
.active-indicator {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
    width: 0.625rem;
    height: 0.625rem;
    background: #667eea;
    border-radius: 50%;
    z-index: 10;
    animation: blink 1.5s ease-in-out infinite;
    box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.7);
}

.active-indicator::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: 100%;
    background: #667eea;
    border-radius: 50%;
    animation: pulse-ring 1.5s ease-out infinite;
}

@keyframes blink {

    0%,
    100% {
        opacity: 1;
        transform: scale(1);
    }

    50% {
        opacity: 0.6;
        transform: scale(0.95);
    }
}

@keyframes pulse-ring {
    0% {
        box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.7);
    }

    70% {
        box-shadow: 0 0 0 0.5rem rgba(102, 126, 234, 0);
    }

    100% {
        box-shadow: 0 0 0 0 rgba(102, 126, 234, 0);
    }
}

/* Simple elegant active state */
.ticket-card.active {
    background: #2a2f36;
    border: 1px solid rgba(102, 126, 234, 0.5);
    box-shadow: 0 0.375rem 1.25rem rgba(102, 126, 234, 0.2);
    transform: translateY(-0.125rem);
}

/* Hide top bar for active cards */
.ticket-card.active::before {
    opacity: 0;
}

.ticket-card:hover {
    transform: translateY(-0.25rem);
    box-shadow: 0 0.5rem 1.5rem rgba(102, 126, 234, 0.25);
    border-color: rgba(102, 126, 234, 0.3);
}

.ticket-card.active:hover {
    transform: translateY(-0.25rem);
    box-shadow: 0 0.5rem 1.75rem rgba(102, 126, 234, 0.3);
}

/* Show top bar on hover for non-active cards */
.ticket-card:not(.active):hover::before {
    opacity: 1;
}

/* Keep top bar hidden for active cards even on hover */
.ticket-card.active:hover::before {
    opacity: 0;
}

.ticket-card.active .ticket-title {
    color: #fff;
}

.ticket-card.active .ticket-id {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    box-shadow: 0 0.25rem 0.75rem rgba(102, 126, 234, 0.4);
}

.ticket-header {
    display: flex;
    align-items: flex-start;
    gap: 0.625rem;
    margin-bottom: 0.5rem;
    min-height: 0;
}

.ticket-type {
    width: 1.25rem;
    height: 1.25rem;
    flex-shrink: 0;
    margin-top: 0.125rem;
    filter: drop-shadow(0 0.125rem 0.25rem rgba(0, 0, 0, 0.3));
    transition: all 0.3s ease;
}

.ticket-card.active .ticket-type {
    filter: drop-shadow(0 0.125rem 0.375rem rgba(0, 0, 0, 0.5));
}

.type-story {
    color: #57D9A3;
}

.type-task {
    color: #4BADE8;
}

.type-bug {
    color: #FF6B6B;
}

.ticket-title {
    font-size: 0.813rem;
    font-weight: 500;
    color: #E8EAED;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    line-height: 1.5;
    flex: 1;
    text-shadow: 0 0.063rem 0.125rem rgba(0, 0, 0, 0.2);
    word-break: break-word;
    min-width: 0;
    transition: all 0.3s ease;
}

.ticket-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: auto;
    padding-top: 0.5rem;
    border-top: 1px solid rgba(255, 255, 255, 0.06);
    gap: 0.5rem;
}

.ticket-card.active .ticket-footer {
    border-top-color: rgba(255, 255, 255, 0.1);
}

.ticket-meta {
    display: flex;
    align-items: center;
    min-width: 0;
    flex-shrink: 1;
}

.ticket-id {
    font-size: 0.625rem;
    font-weight: 700;
    color: #fff;
    letter-spacing: 0.063rem;
    padding: 0.375rem 0.875rem;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 1.25rem;
    transition: all 0.3s ease;
    box-shadow: 0 0.25rem 0.75rem rgba(102, 126, 234, 0.3);
    text-transform: uppercase;
    position: relative;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    max-width: 7.5rem;
}

.ticket-id::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease;
}

.ticket-card:hover .ticket-id {
    transform: translateX(-0.125rem);
    box-shadow: 0 0.375rem 1rem rgba(102, 126, 234, 0.5);
}

.ticket-card:hover .ticket-id::before {
    left: 100%;
}

.ticket-status {
    font-size: 0.563rem;
    padding: 0.375rem 1rem;
    border-radius: 1.25rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.075rem;
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    box-shadow: 0 0.25rem 0.75rem rgba(0, 0, 0, 0.2);
    white-space: nowrap;
    flex-shrink: 0;
}

.ticket-status::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease;
}

.ticket-status::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.4);
    transform: translate(-50%, -50%);
    transition: width 0.4s ease, height 0.4s ease;
}

.ticket-card:hover .ticket-status::before {
    left: 100%;
}

.ticket-card:hover .ticket-status::after {
    width: 120%;
    height: 300%;
}

.status-major {
    background: linear-gradient(135deg, #FF6B6B 0%, #FF5252 100%);
    color: #fff;
    box-shadow: 0 0.25rem 0.75rem rgba(255, 107, 107, 0.5);
}

.status-minor {
    background: linear-gradient(135deg, #4FC3F7 0%, #2196F3 100%);
    color: #fff;
    box-shadow: 0 0.25rem 0.75rem rgba(79, 195, 247, 0.5);
}

.ticket-card:hover .status-major {
    box-shadow: 0 0.375rem 1.25rem rgba(255, 107, 107, 0.7);
    transform: translateX(0.125rem) scale(1.05);
}

.ticket-card:hover .status-minor {
    box-shadow: 0 0.375rem 1.25rem rgba(79, 195, 247, 0.7);
    transform: translateX(0.125rem) scale(1.05);
}

.ticket-card.card-bug {
    border-left: 0.188rem solid #FF6B6B;
}

.ticket-card.card-task {
    border-left: 0.188rem solid #4BADE8;
}

.ticket-card.card-story {
    border-left: 0.188rem solid #57D9A3;
}

.ticket-card.active.card-bug {
    border-left: 0.188rem solid #FF6B6B;
}

.ticket-card.active.card-task {
    border-left: 0.188rem solid #4BADE8;
}

.ticket-card.active.card-story {
    border-left: 0.188rem solid #57D9A3;
}

@keyframes glow-major {

    0%,
    100% {
        box-shadow: 0 0.25rem 0.75rem rgba(255, 107, 107, 0.5);
    }

    50% {
        box-shadow: 0 0.25rem 1.25rem rgba(255, 107, 107, 0.8);
    }
}

@keyframes glow-minor {

    0%,
    100% {
        box-shadow: 0 0.25rem 0.75rem rgba(79, 195, 247, 0.5);
    }

    50% {
        box-shadow: 0 0.25rem 1.25rem rgba(79, 195, 247, 0.8);
    }
}

.status-major {
    animation: glow-major 3s ease-in-out infinite;
}

.status-minor {
    animation: glow-minor 3s ease-in-out infinite;
}
















import { Component } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';

interface Ticket {
  id: string;
  title: string;
  type: 'story' | 'task' | 'bug';
  status: 'major' | 'minor';
}

@Component({
  selector: 'app-ticket-list',
  templateUrl: './ticket-list.component.html',
  styleUrls: ['./ticket-list.component.scss']
})
export class TicketListComponent {

  activeTicketId: string | null = null;

  tickets: Ticket[] = [
    {
      id: 'PROJ-123',
      title: 'Fix critical bug in user authentication flow',
      type: 'story',
      status: 'major'
    },
    {
      id: 'PROJ-124',
      title: 'Update API documentation for v2.0 release',
      type: 'task',
      status: 'minor'
    },
    {
      id: 'PROJ-125',
      title: 'Refactor dashboard component for better performance',
      type: 'bug',
      status: 'minor'
    },
    {
      id: 'PROJ-126',
      title: 'Add dark mode support to mobile application',
      type: 'story',
      status: 'major'
    },
    {
      id: 'PROJ-127',
      title: 'Design new onboarding flow for new users',
      type: 'task',
      status: 'minor'
    },
    {
      id: 'PROJ-128',
      title: 'Memory leak in real-time notification service causing performance degradation',
      type: 'bug',
      status: 'major'
    }
  ];

  constructor(private sanitizer: DomSanitizer) { }

  getTypeIcon(type: string): SafeHtml {
    let svg = '';
    switch (type) {
      case 'story':
        svg = '<rect x="1" y="1" width="14" height="14" rx="2" />';
        break;
      case 'task':
        svg = '<path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z" />';
        break;
      case 'bug':
        svg = '<circle cx="8" cy="8" r="7" />';
        break;
      default:
        svg = '';
    }
    return this.sanitizer.bypassSecurityTrustHtml(svg);
  }

  selectTicket(ticketId: string): void {
    this.activeTicketId = ticketId;
  }

  isActive(ticketId: string): boolean {
    return this.activeTicketId === ticketId;
  }

}











--------------------------------










<div class="sidebar">
    <!-- Fixed Header with Tabs -->
    <div class="tabs-header">
        <div class="tabs-container">
            <button class="tab" [class.active]="activeTab === 0" (click)="switchTab(0)">
                <svg class="tab-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M12 5v14M5 12h14" />
                </svg>
                Create CRS
            </button>
            <button class="tab" [class.active]="activeTab === 1" (click)="switchTab(1)">
                <svg class="tab-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M3 12h18M3 6h18M3 18h18" />
                </svg>
                View CRS
            </button>
        </div>
    </div>

    <!-- Scrollable Content Area -->
    <div class="content-wrapper">
        <!-- Create CRS Tab Content -->
        <div class="tab-content" [class.active]="activeTab === 0">
            <div class="form-group">
                <label for="requirement">Requirement Prompt</label>
                <textarea id="requirement" [(ngModel)]="requirement"
                    placeholder="Describe your customer requirements...">
        </textarea>
            </div>

            <div class="form-group">
                <label for="additional">Additional Details</label>
                <textarea id="additional" [(ngModel)]="additionalDetails"
                    placeholder="Add any additional context or details...">
        </textarea>
            </div>

            <button class="generate-btn" (click)="onGenerateCRS()">
                <svg class="icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z" />
                </svg>
                Generate CRS Tickets
            </button>
        </div>

        <!-- View CRS Tab Content -->
        <div class="tab-content" [class.active]="activeTab === 1">
            <!-- <div class="tickets-container" *ngIf="tickets.length > 0; else emptyState">
                <div class="ticket" *ngFor="let ticket of tickets">
                    <div class="ticket-header">
                        <span class="ticket-id">{{ ticket.id }}</span>
                        <span class="ticket-date">{{ ticket.createdAt | date: 'short' }}</span>
                    </div>
                    <div class="ticket-requirement">{{ ticket.requirement }}</div>
                    <div class="ticket-details" *ngIf="ticket.additionalDetails">
                        {{ ticket.additionalDetails }}
                    </div>
                </div>
            </div>

            <ng-template #emptyState>
                <div class="empty-state">
                    <div class="empty-icon">📋</div>
                    <div class="empty-text">No CRS tickets created yet</div>
                </div>
            </ng-template> -->
            <app-ticket-list></app-ticket-list>
        </div>
    </div>
</div>









.sidebar {
    height: 100%;
    display: flex;
    flex-direction: column;
    background: #1a1a1c;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 0.5rem 2rem rgba(0, 0, 0, 0.4);
}

/* Fixed Header */
.tabs-header {
    position: sticky;
    top: 0;
    z-index: 10;
    background: #1a1a1c;
    padding: 1rem 1rem 0 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
}

.tabs-container {
    background: rgba(255, 255, 255, 0.04);
    border-radius: 0.75rem;
    padding: 0.375rem;
    position: relative;
    display: flex;
    gap: 0.375rem;
    margin-bottom: 1rem;
}

.tab {
    flex: 1;
    padding: 0.625rem 1rem;
    background: transparent;
    border: none;
    color: #8a8a8e;
    font-size: 0.8125rem;
    font-weight: 600;
    cursor: pointer;
    border-radius: 0.625rem;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    z-index: 1;
    overflow: hidden;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.375rem;
}

.tab::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    opacity: 0;
    transition: opacity 0.3s ease;
    border-radius: 0.625rem;
    z-index: -1;
}

.tab:hover:not(.active) {
    color: #b4b4b8;
    background: rgba(255, 255, 255, 0.06);
}

.tab.active {
    color: white;
}

.tab.active::before {
    opacity: 1;
    box-shadow: 0 0.25rem 1rem rgba(99, 102, 241, 0.4),
        0 0 0 1px rgba(255, 255, 255, 0.1) inset;
}

/* Scrollable Content Wrapper */
.content-wrapper {
    flex: 1;
    overflow-y: auto;
    overflow-x: hidden;
    padding: 1.5rem 1rem;
}

.content-wrapper::-webkit-scrollbar {
    width: 0.375rem;
}

.content-wrapper::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 0.1875rem;
}

.content-wrapper::-webkit-scrollbar-thumb {
    background: rgba(99, 102, 241, 0.5);
    border-radius: 0.1875rem;
}

.content-wrapper::-webkit-scrollbar-thumb:hover {
    background: rgba(99, 102, 241, 0.7);
}

.tab-content {
    display: none;
    animation: fadeIn 0.4s ease;
}

.tab-content.active {
    display: block;
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(0.625rem);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.form-group {
    margin-bottom: 1.25rem;
}

label {
    display: block;
    color: #b4b4b8;
    font-size: 0.8125rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
}

textarea {
    width: 100%;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 0.5rem;
    color: #ffffff;
    padding: 0.75rem;
    font-size: 0.875rem;
    font-family: inherit;
    resize: vertical;
    min-height: 6.25rem;
    transition: all 0.3s ease;
}

textarea::placeholder {
    color: #5a5a5e;
}

textarea:focus {
    outline: none;
    border-color: #6366f1;
    background: rgba(255, 255, 255, 0.08);
    box-shadow: 0 0 0 0.1875rem rgba(99, 102, 241, 0.1);
}

.generate-btn {
    width: 100%;
    background: linear-gradient(135deg, #6366f1, #8b5cf6);
    color: white;
    border: none;
    border-radius: 0.5rem;
    padding: 0.75rem 1.25rem;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    transition: all 0.3s ease;
    box-shadow: 0 0.25rem 0.75rem rgba(99, 102, 241, 0.3);
}

.generate-btn:hover {
    transform: translateY(-0.125rem);
    box-shadow: 0 0.375rem 1rem rgba(99, 102, 241, 0.4);
}

.generate-btn:active {
    transform: translateY(0);
}

.generate-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

.icon {
    width: 1rem;
    height: 1rem;
}

.tab-icon {
    width: 0.75rem;
    height: 0.75rem;
}

.empty-state {
    text-align: center;
    padding: 3.75rem 1.25rem;
    color: #5a5a5e;
}

.empty-icon {
    font-size: 3rem;
    margin-bottom: 0.75rem;
    opacity: 0.5;
}

.empty-text {
    font-size: 0.875rem;
}










import { Component } from '@angular/core';

interface CRSTicket {
  id: string;
  requirement: string;
  additionalDetails: string;
  createdAt: Date;
}

@Component({
  selector: 'app-crs-maker',
  templateUrl: './crs-maker.component.html',
  styleUrls: ['./crs-maker.component.scss']
})
export class CrsMakerComponent {

  activeTab: number = 0;
  requirement: string = '';
  additionalDetails: string = '';
  tickets: CRSTicket[] = [];

  switchTab(index: number): void {
    this.activeTab = index;
  }

  onGenerateCRS(): void {
    if (!this.requirement.trim()) {
      return;
    }

    const ticket: CRSTicket = {
      id: `CRS-${String(this.tickets.length + 1).padStart(4, '0')}`,
      requirement: this.requirement,
      additionalDetails: this.additionalDetails,
      createdAt: new Date()
    };

    this.tickets.unshift(ticket);

    // Clear form
    this.requirement = '';
    this.additionalDetails = '';

    // Switch to View CRS tab
    this.switchTab(1);

    console.log('Created ticket:', ticket);
  }

}









































