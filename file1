import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';

@Component({
  selector: 'app-model-not-available',
  templateUrl: './model-not-available.component.html',
  styleUrls: ['./model-not-available.component.css']
})
export class ModelNotAvailableComponent implements OnInit {
  @Input() title: string = 'Models Unavailable';
  @Input() message: string = 'All LLM models are currently unavailable. Please check your connection or try again later.';
  @Input() statusText: string = 'Checking connection status';
  @Input() autoHide: boolean = false;
  @Input() autoHideDelay: number = 10000;
  @Input() show: boolean = true;
  @Input() showTypingEffect: boolean = true;

  @Output() onRetry = new EventEmitter<void>();
  @Output() onClose = new EventEmitter<void>();

  isVisible: boolean = false;
  isRetrying: boolean = false;
  showLoadingDots: boolean = true;
  showActionHint: boolean = false;
  displayedMessage: string = '';
  progressWidth: number = 0;

  ngOnInit() {
    setTimeout(() => {
      this.isVisible = true;
      this.startTypingEffect();
      this.startProgressAnimation();
    }, 200);

    setTimeout(() => {
      this.showActionHint = true;
    }, 3000);

    if (this.autoHide) {
      setTimeout(() => {
        this.closeNotification();
      }, this.autoHideDelay);
    }
  }

  startTypingEffect() {
    if (!this.showTypingEffect) {
      this.displayedMessage = this.message;
      return;
    }

    let i = 0;
    const typeInterval = setInterval(() => {
      if (i < this.message.length) {
        this.displayedMessage += this.message.charAt(i);
        i++;
      } else {
        clearInterval(typeInterval);
        setTimeout(() => {
          this.showTypingEffect = false;
        }, 1000);
      }
    }, 50);
  }

  startProgressAnimation() {
    let progress = 0;
    const progressInterval = setInterval(() => {
      if (progress < 100) {
        progress += Math.random() * 15;
        this.progressWidth = Math.min(progress, 100);
      } else {
        clearInterval(progressInterval);
      }
    }, 300);
  }

  closeNotification() {
    this.isVisible = false;
    setTimeout(() => {
      this.show = false;
      this.onClose.emit();
    }, 500);
  }

  retryConnection() {
    this.isRetrying = true;
    this.showActionHint = false;
    this.progressWidth = 0;
    this.onRetry.emit();
    this.startProgressAnimation();

    setTimeout(() => {
      this.isRetrying = false;
    }, 3000);
  }
}















<div class="notification-container" [class.visible]="isVisible" *ngIf="show">
  <div class="particles">
    <div class="particle" *ngFor="let i of [1,2,3,4,5,6]"></div>
  </div>

  <div class="notification-card">
    <div class="glow-border"></div>

    <!-- Header -->
    <div class="notification-header">
      <div class="status-icon-container">
        <div class="status-icon">
          <div class="icon-inner"></div>
          <div class="ripple"></div>
          <div class="ripple ripple-delay"></div>
        </div>
      </div>

      <div class="header-content">
        <h3 class="notification-title">{{ title }}</h3>
        <div class="title-underline"></div>
      </div>

      <button class="close-btn" (click)="closeNotification()">
        <span class="close-icon"></span>
      </button>
    </div>

    <!-- Message -->
    <div class="notification-message" [class.typing]="showTypingEffect">
      <span class="message-text">{{ displayedMessage }}</span>
      <span class="cursor" *ngIf="showTypingEffect">|</span>
    </div>

    <!-- Progress -->
    <div class="progress-container">
      <div class="progress-bar" [style.width]="progressWidth + '%'"></div>
    </div>

    <!-- Actions -->
    <div class="notification-actions">
      <button 
        class="retry-btn" 
        [class.loading]="isRetrying"
        [disabled]="isRetrying"
        (click)="retryConnection()">
        <span class="btn-content">
          <span class="btn-icon" [class.spinning]="isRetrying">⟳</span>
          <span class="btn-text">{{ isRetrying ? 'Retrying...' : 'Retry Connection' }}</span>
        </span>
        <div class="btn-shine"></div>
      </button>

      <div class="status-indicator">
        <div class="status-dot" [class.pulsing]="showLoadingDots"></div>
        <span class="status-text">{{ statusText }}</span>
        <div class="loading-dots" *ngIf="showLoadingDots">
          <span></span><span></span><span></span>
        </div>
      </div>
    </div>

    <!-- Hint -->
    <div class="action-hint" [class.visible]="showActionHint">
      <span>Click retry to reconnect</span>
      <div class="hint-arrow">→</div>
    </div>
  </div>
</div>

















.notification-container {
  position: fixed;
  bottom: 24px;
  right: 24px;
  z-index: 9999;
  transform: translateX(120%) scale(0.8);
  opacity: 0;
  transition: all 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
  filter: blur(8px);
}
.notification-container.visible {
  transform: translateX(0) scale(1);
  opacity: 1;
  filter: blur(0px);
}

/* Particles */
.particles {
  position: absolute;
  top: -50px; left: -50px; right: -50px; bottom: -50px;
  pointer-events: none;
  overflow: hidden;
  border-radius: 24px;
}
.particle {
  position: absolute;
  width: 6px; height: 6px;
  background: radial-gradient(circle, rgba(66,153,225,0.8), rgba(66,153,225,0.2));
  border-radius: 50%;
  animation: float 6s infinite linear;
}
.particle:nth-child(1) { top:20%; left:10%; animation-delay:-1s; animation-duration:8s; }
.particle:nth-child(2) { top:60%; left:80%; animation-delay:-3s; animation-duration:7s; }
.particle:nth-child(3) { top:40%; left:60%; animation-delay:-2s; animation-duration:9s; }
.particle:nth-child(4) { top:80%; left:30%; animation-delay:-4s; animation-duration:6s; }
.particle:nth-child(5) { top:30%; left:90%; animation-delay:-5s; animation-duration:8s; }
.particle:nth-child(6) { top:70%; left:20%; animation-delay:-6s; animation-duration:7s; }

@keyframes float {
  0% { transform: translateY(0) rotate(0); opacity: 0; }
  10%,90% { opacity: 1; }
  100% { transform: translateY(-20px) rotate(360deg); opacity: 0; }
}

/* Card */
.notification-card {
  position: relative;
  background: linear-gradient(145deg, rgba(17,17,19,0.95), rgba(25,25,29,0.98) 50%, rgba(30,30,34,0.95));
  backdrop-filter: blur(30px) saturate(1.5);
  border: 1px solid rgba(255,255,255,0.08);
  border-radius: 20px;
  padding: 28px;
  max-width: 420px;
  min-width: 360px;
  box-shadow: 0 32px 64px rgba(0,0,0,0.6), 0 16px 32px rgba(0,0,0,0.4), 0 8px 16px rgba(0,0,0,0.3);
  overflow: hidden;
}

/* Glow border */
.glow-border {
  position: absolute; top: -2px; left: -2px; right: -2px; bottom: -2px;
  background: linear-gradient(45deg, rgba(255,107,107,0.3), rgba(66,153,225,0.3), rgba(255,107,107,0.3));
  border-radius: 22px;
  z-index: -1;
  animation: borderGlow 3s ease-in-out infinite alternate;
}
@keyframes borderGlow {
  0% { opacity:0.3; filter: blur(2px) hue-rotate(0deg); }
  100% { opacity:0.6; filter: blur(4px) hue-rotate(90deg); }
}

/* Header */
.notification-header {
  display: flex; align-items: flex-start; gap: 16px; margin-bottom: 20px;
}
.status-icon {
  width: 48px; height: 48px; border-radius: 50%;
  background: linear-gradient(135deg, #ff6b6b, #ee5a24);
  display: flex; align-items: center; justify-content: center;
  animation: iconPulse 2.5s ease-in-out infinite;
}
.icon-inner {
  width: 24px; height: 24px; border-radius: 50%;
  background: rgba(255,255,255,0.9);
  display: flex; align-items: center; justify-content: center;
}
.icon-inner::before { content:'⚠'; color:#ff6b6b; font-size:16px; font-weight:bold; }
.ripple { position:absolute; top:-8px; left:-8px; right:-8px; bottom:-8px; border:2px solid rgba(255,107,107,0.4); border-radius:50%; animation: rippleEffect 2s infinite; }
.ripple.ripple-delay { animation-delay: 1s; }
@keyframes iconPulse { 0%,100% { transform: scale(1);} 50% { transform: scale(1.05);} }
@keyframes rippleEffect { 0%{transform:scale(1);opacity:0.6;}100%{transform:scale(1.5);opacity:0;} }

.notification-title { font-size:18px; font-weight:700; color:#fff; margin:0 0 8px; }
.title-underline { height:3px; background:linear-gradient(90deg,#4299e1,#3182ce); width:0; animation: underlineGrow 1s ease-out 0.5s forwards; }
@keyframes underlineGrow { to { width:60%; } }

.close-btn { background:rgba(255,255,255,0.05); border:1px solid rgba(255,255,255,0.1); width:36px; height:36px; border-radius:50%; cursor:pointer; display:flex; align-items:center; justify-content:center; transition:all .3s; }
.close-btn:hover { background:rgba(255,255,255,0.1); border-color:rgba(255,255,255,0.2); transform:scale(1.1) rotate(90deg); }
.close-icon::before, .close-icon::after { content:''; position:absolute; top:50%; left:50%; width:16px; height:2px; background:rgba(255,255,255,0.7); }
.close-icon::before { transform:translate(-50%,-50%) rotate(45deg); }
.close-icon::after { transform:translate(-50%,-50%) rotate(-45deg); }

/* Message */
.notification-message { color:rgba(255,255,255,0.85); font-size:15px; margin-bottom:20px; min-height:48px; display:flex; align-items:center; }
.cursor { color:#4299e1; animation: blink 1s infinite; margin-left:2px; }
@keyframes blink { 0%,50%{opacity:1;}51%,100%{opacity:0;} }

/* Progress */
.progress-container { width:100%; height:4px; background:rgba(255,255,255,0.1); margin-bottom:24px; border-radius:2px; }
.progress-bar { height:100%; background:linear-gradient(90deg,#4299e1,#3182ce,#2c5aa0); transition:width .5s ease; animation: progressShimmer 2s infinite; }
@keyframes progressShimmer { 0%{background-position:-200% 0;}100%{background-position:200% 0;} }

/* Actions */
.notification-actions { display:flex; gap:20px; align-items:center; flex-wrap:wrap; }
.retry-btn { background:linear-gradient(135deg,#4299e1,#3182ce); color:white; border:none; padding:12px 24px; border-radius:12px; font-size:14px; font-weight:600; cursor:pointer; min-width:140px; }
.retry-btn.loading { background:linear-gradient(135deg,#2c5aa0,#2a4a80); }
.btn-icon.spinning { animation: spin 1s linear infinite; }
@keyframes spin { from{transform:rotate(0);}to{transform:rotate(360deg);} }

/* Status */
.status-indicator { display:flex; align-items:center; gap:8px; font-size:13px; color:rgba(255,255,255,0.6); }
.status-dot { width:8px; height:8px; border-radius:50%; background:rgba(66,153,225,0.6); }
.status-dot.pulsing { animation: statusPulse 1.5s infinite; }
@keyframes statusPulse { 0%,100%{transform:scale(1);opacity:0.6;}50%{transform:scale(1.2);opacity:1;} }
.loading-dots span { width:4px; height:4px; background:rgba(66,153,225,0.8); border-radius:50%; animation: loadingDots 1.4s infinite; display:inline-block; }
.loading-dots span:nth-child(1){animation-delay:-.32s;} .loading-dots span:nth-child(2){animation-delay:-.16s;}
@keyframes loadingDots { 0%,80%,100%{transform:scale(.8);opacity:.4;}40%{transform:scale(1.2);opacity:1;} }

/* Hint */
.action-hint { position:absolute; bottom:-50px; left:50%; transform:translateX(-50%); background:rgba(66,153,225,0.9); color:#fff; padding:8px 16px; border-radius:20px; font-size:12px; opacity:0; transition:.4s; }
.action-hint.visible { opacity:1; transform:translateX(-50%) translateY(0); }
.hint-arrow { display:inline-block; margin-left:8px; animation: bounce 1s infinite; }
@keyframes bounce { 0%,100%{transform:translateX(0);}50%{transform:translateX(4px);} }



