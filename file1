private processChunk(chunk: string) {
  if (!chunk) return;

  this.buffer += chunk.replace(/\\r\\n/g, '\n').replace(/\\n/g, '\n').replace(/\r/g, '');

  while (this.buffer.length > 0) {
    if (!this.insideBlock) {
      const fenceIndex = this.buffer.indexOf('```');
      if (fenceIndex === -1) break;

      this.insideBlock = true;
      this.buffer = this.buffer.slice(fenceIndex + 3);
      this.currentLang = null;
    }

    if (this.insideBlock && this.currentLang === null) {
      const nlIndex = this.buffer.indexOf('\n');
      if (nlIndex === -1) break; // wait for more data

      const langLine = this.buffer.slice(0, nlIndex).trim().toLowerCase();
      this.buffer = this.buffer.slice(nlIndex + 1);

      if (langLine === 'html') this.currentLang = 'html';
      else if (langLine === 'css') this.currentLang = 'css';
      else if (langLine === 'js' || langLine === 'javascript') this.currentLang = 'js';
      else this.currentLang = 'other';
    }

    if (this.insideBlock && this.currentLang !== null) {
      const closingIndex = this.buffer.indexOf('```');

      if (closingIndex === -1) {
        // Append only **full lines** so we donâ€™t cut CSS values
        const lastNl = this.buffer.lastIndexOf('\n');
        if (lastNl !== -1) {
          const completePart = this.buffer.slice(0, lastNl + 1);
          this.appendToLanguageBucket(this.currentLang, completePart);
          this.buffer = this.buffer.slice(lastNl + 1);
        }
        break;
      } else {
        const content = this.buffer.slice(0, closingIndex);
        this.appendToLanguageBucket(this.currentLang, content);
        this.buffer = this.buffer.slice(closingIndex + 3);
        this.insideBlock = false;
        this.currentLang = null;
      }
    }
  }
}

private appendToLanguageBucket(lang: string, content: string) {
  if (!content) return;

  // Ensure no broken color codes or numbers
  // (optional: trim only right-side if streaming mid-line)
  const safeContent = content.replace(/\r/g, '');

  switch (lang) {
    case 'html': this.htmlCode += safeContent; break;
    case 'css': this.cssCode += safeContent; break;
    case 'js': this.jsCode += safeContent; break;
    default: this.otherCode += safeContent; break;
  }
}
