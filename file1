// modal-code-editor.component.ts
import { Component, ElementRef, ViewChild, AfterViewInit, OnDestroy, Input, Output, EventEmitter, SimpleChanges, OnChanges } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';

@Component({
  selector: 'app-modal-code-editor',
  template: `
    <!-- Trigger Button -->
    <p-button 
      icon="pi pi-code" 
      label="Open Code Editor" 
      styleClass="trigger-btn p-button-rounded p-button-outlined"
      (onClick)="openModal()"
      [style]="{'position': 'fixed', 'bottom': '20px', 'right': '20px', 'z-index': '1000'}">
    </p-button>

    <!-- PrimeNG Dialog with custom animation -->
    <p-dialog 
      [(visible)]="isVisible" 
      [modal]="true"
      [closable]="true"
      [draggable]="false"
      [resizable]="false"
      [maximizable]="false"
      [closeOnEscape]="true"
      styleClass="custom-modal-dialog"
      [style]="{width: '95vw', height: '90vh', 'max-width': '1400px', 'max-height': '900px'}"
      header="Code Editor & Preview"
      (onShow)="onModalShow()"
      (onHide)="onModalHide()">
      
      <!-- Splitter Content -->
      <div class="splitter-container" #container>
        <!-- Left Panel - Code Editor -->
        <div class="left-panel" [style.width.px]="leftPanelWidth">
          <div class="panel-content">
            <h3>Code Editor</h3>
            
            <!-- Code Input Section -->
            <div class="code-inputs">
              <div class="input-group">
                <label>HTML Code:</label>
                <textarea 
                  [(ngModel)]="htmlCode" 
                  (input)="updatePreview()"
                  placeholder="Enter HTML code here..."
                  class="code-textarea">
                </textarea>
              </div>
              
              <div class="input-group">
                <label>CSS Code:</label>
                <textarea 
                  [(ngModel)]="cssCode" 
                  (input)="updatePreview()"
                  placeholder="Enter CSS code here..."
                  class="code-textarea">
                </textarea>
              </div>
              
              <div class="input-group">
                <label>JavaScript Code:</label>
                <textarea 
                  [(ngModel)]="jsCode" 
                  (input)="updatePreview()"
                  placeholder="Enter JavaScript code here..."
                  class="code-textarea">
                </textarea>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Splitter Handle -->
        <div 
          class="splitter" 
          #splitter
          (mousedown)="onMouseDown($event)"
          [class.dragging]="isDragging">
          <div class="splitter-handle"></div>
        </div>
        
        <!-- Right Panel - Preview -->
        <div class="right-panel" [style.width.px]="rightPanelWidth">
          <div class="panel-content">
            <div class="preview-header">
              <h3>Live Preview</h3>
              <button (click)="refreshPreview()" class="refresh-btn">
                <i class="pi pi-refresh"></i> Refresh
              </button>
            </div>
            <div class="preview-container">
              <iframe 
                #previewFrame
                class="preview-iframe"
                sandbox="allow-scripts allow-same-origin">
              </iframe>
            </div>
          </div>
        </div>
      </div>
    </p-dialog>
  `,
  styles: [`
    /* Custom trigger button styling */
    :host ::ng-deep .trigger-btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
      border: none !important;
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3) !important;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1) !important;
    }

    :host ::ng-deep .trigger-btn:hover {
      transform: translateY(-2px) !important;
      box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4) !important;
    }

    :host ::ng-deep .trigger-btn:active {
      transform: translateY(0) !important;
    }

    /* Custom PrimeNG Dialog Animation - Bottom Right Entry */
    :host ::ng-deep .custom-modal-dialog {
      animation-duration: 0.6s !important;
      animation-timing-function: cubic-bezier(0.34, 1.56, 0.64, 1) !important;
    }

    :host ::ng-deep .custom-modal-dialog .p-dialog {
      border-radius: 16px !important;
      background: #1a1a1b !important;
      border: 1px solid #333 !important;
      box-shadow: 0 25px 50px rgba(0, 0, 0, 0.8) !important;
    }

    /* Custom animation keyframes */
    @keyframes slideInFromBottomRight {
      0% {
        transform: scale(0.7) translate(30%, 30%);
        opacity: 0;
      }
      50% {
        transform: scale(0.9) translate(15%, 15%);
        opacity: 0.8;
      }
      100% {
        transform: scale(1) translate(0%, 0%);
        opacity: 1;
      }
    }

    @keyframes slideOutToBottomRight {
      0% {
        transform: scale(1) translate(0%, 0%);
        opacity: 1;
      }
      100% {
        transform: scale(0.7) translate(30%, 30%);
        opacity: 0;
      }
    }

    /* Apply animations to dialog */
    :host ::ng-deep .p-dialog-enter-active {
      animation: slideInFromBottomRight 0.6s cubic-bezier(0.34, 1.56, 0.64, 1) !important;
    }

    :host ::ng-deep .p-dialog-leave-active {
      animation: slideOutToBottomRight 0.4s ease-in !important;
    }

    /* Dialog header customization */
    :host ::ng-deep .custom-modal-dialog .p-dialog-header {
      background: #2a2a2b !important;
      border-bottom: 1px solid #333 !important;
      color: #ffffff !important;
      padding: 20px 24px !important;
      border-radius: 16px 16px 0 0 !important;
    }

    :host ::ng-deep .custom-modal-dialog .p-dialog-title {
      font-size: 20px !important;
      font-weight: 600 !important;
      color: #ffffff !important;
    }

    :host ::ng-deep .custom-modal-dialog .p-dialog-header-icon {
      color: #b3b3b3 !important;
      width: 32px !important;
      height: 32px !important;
    }

    :host ::ng-deep .custom-modal-dialog .p-dialog-header-icon:hover {
      background-color: #333 !important;
      color: #ffffff !important;
    }

    /* Dialog content customization */
    :host ::ng-deep .custom-modal-dialog .p-dialog-content {
      background: #0a0a0b !important;
      padding: 0 !important;
      border-radius: 0 0 16px 16px !important;
      overflow: hidden !important;
    }

    /* Backdrop customization */
    :host ::ng-deep .p-dialog-mask {
      backdrop-filter: blur(8px) !important;
      background-color: rgba(0, 0, 0, 0.6) !important;
    }

    /* Splitter Container */
    .splitter-container {
      display: flex;
      height: 100%;
      min-height: 600px;
      overflow: hidden;
      background-color: #0a0a0b;
    }

    .left-panel, .right-panel {
      min-width: 0;
      overflow: hidden;
    }

    .left-panel {
      background-color: #1a1a1b;
      border-right: 1px solid #333;
    }

    .right-panel {
      background-color: #0a0a0b;
      border-left: 1px solid #333;
    }

    .panel-content {
      padding: 20px;
      height: 100%;
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    .panel-content h3 {
      margin-top: 0;
      margin-bottom: 16px;
      color: #ffffff;
      font-weight: 600;
      font-size: 18px;
    }

    /* Code Editor Styles */
    .code-inputs {
      display: flex;
      flex-direction: column;
      gap: 15px;
      flex: 1;
      overflow: hidden;
    }

    .input-group {
      display: flex;
      flex-direction: column;
      flex: 1;
      min-height: 0;
    }

    .input-group label {
      font-weight: 600;
      margin-bottom: 5px;
      color: #ffffff;
      font-size: 14px;
    }

    .code-textarea {
      flex: 1;
      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
      font-size: 14px;
      padding: 12px;
      border: 1px solid #444;
      border-radius: 6px;
      resize: none;
      background: #2a2a2b;
      color: #ffffff;
      line-height: 1.5;
      min-height: 100px;
    }

    .code-textarea:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.25);
    }

    .code-textarea::placeholder {
      color: #888;
    }

    /* Preview Styles */
    .preview-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 16px;
    }

    .preview-header h3 {
      margin: 0;
      color: #ffffff;
    }

    .refresh-btn {
      padding: 8px 16px;
      background: #667eea;
      color: white;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
      font-weight: 500;
      display: flex;
      align-items: center;
      gap: 6px;
      transition: background-color 0.2s ease;
    }

    .refresh-btn:hover {
      background: #5a6fd8;
    }

    .refresh-btn:active {
      background: #4e5bc4;
    }

    .preview-container {
      flex: 1;
      border: 1px solid #333;
      border-radius: 6px;
      overflow: hidden;
      background: white;
    }

    .preview-iframe {
      width: 100%;
      height: 100%;
      border: none;
      background: white;
    }

    /* Splitter Styles */
    .splitter {
      width: 6px;
      background-color: #333;
      cursor: col-resize;
      position: relative;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.2s ease;
    }

    .splitter:hover {
      background-color: #444;
    }

    .splitter.dragging {
      background-color: #667eea;
    }

    .splitter-handle {
      width: 2px;
      height: 40px;
      background-color: #666;
      border-radius: 1px;
      transition: background-color 0.2s ease;
    }

    .splitter:hover .splitter-handle {
      background-color: #888;
    }

    .splitter.dragging .splitter-handle {
      background-color: white;
    }

    /* Prevent text selection during drag */
    .splitter-container.no-select {
      user-select: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
    }

    /* Custom scrollbar for panels - Dark theme */
    .left-panel::-webkit-scrollbar,
    .right-panel::-webkit-scrollbar,
    .code-textarea::-webkit-scrollbar {
      width: 8px;
    }

    .left-panel::-webkit-scrollbar-track,
    .right-panel::-webkit-scrollbar-track,
    .code-textarea::-webkit-scrollbar-track {
      background: #1a1a1b;
    }

    .left-panel::-webkit-scrollbar-thumb,
    .right-panel::-webkit-scrollbar-thumb,
    .code-textarea::-webkit-scrollbar-thumb {
      background: #444;
      border-radius: 4px;
    }

    .left-panel::-webkit-scrollbar-thumb:hover,
    .right-panel::-webkit-scrollbar-thumb:hover,
    .code-textarea::-webkit-scrollbar-thumb:hover {
      background: #555;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      :host ::ng-deep .custom-modal-dialog {
        width: 98vw !important;
        height: 95vh !important;
      }
      
      .panel-content {
        padding: 12px;
      }

      .code-textarea {
        font-size: 12px;
        padding: 8px;
      }
    }
  `]
})
export class ModalCodeEditorComponent implements AfterViewInit, OnDestroy, OnChanges {
  @ViewChild('container', { static: true }) containerRef!: ElementRef;
  @ViewChild('splitter', { static: true }) splitterRef!: ElementRef;
  @ViewChild('previewFrame') previewFrame!: ElementRef<HTMLIFrameElement>;

  @Input() defaultLeftWidth: number = 500;
  @Input() htmlCode: string = '';
  @Input() cssCode: string = '';
  @Input() jsCode: string = '';
  
  @Output() modalClosed = new EventEmitter<void>();
  @Output() modalOpened = new EventEmitter<void>();

  leftPanelWidth: number = 500;
  rightPanelWidth: number = 0;
  isDragging: boolean = false;
  isVisible: boolean = false;
  
  private startX: number = 0;
  private startLeftWidth: number = 0;
  private containerWidth: number = 0;

  constructor(private sanitizer: DomSanitizer) {}

  ngAfterViewInit() {
    this.leftPanelWidth = this.defaultLeftWidth;
    window.addEventListener('resize', this.onWindowResize.bind(this));
  }

  ngOnDestroy() {
    window.removeEventListener('resize', this.onWindowResize.bind(this));
    this.removeGlobalListeners();
  }

  ngOnChanges(changes: SimpleChanges) {
    if (this.previewFrame && this.isVisible) {
      this.updatePreview();
    }
  }

  openModal() {
    this.isVisible = true;
  }

  closeModal() {
    this.isVisible = false;
  }

  onModalShow() {
    // Initialize panels when modal is shown
    setTimeout(() => {
      this.initializePanels();
      this.updatePreview();
      this.modalOpened.emit();
    }, 100);
  }

  onModalHide() {
    this.modalClosed.emit();
  }

  private initializePanels() {
    if (!this.containerRef) return;
    
    const container = this.containerRef.nativeElement;
    this.containerWidth = container.offsetWidth;
    const splitterWidth = 6;
    
    // Set right panel width based on available space
    this.rightPanelWidth = this.containerWidth - this.leftPanelWidth - splitterWidth;
  }

  // Splitter functionality
  onMouseDown(event: MouseEvent) {
    event.preventDefault();
    
    this.isDragging = true;
    this.startX = event.clientX;
    this.startLeftWidth = this.leftPanelWidth;
    this.containerWidth = this.containerRef.nativeElement.offsetWidth;
    
    // Add no-select class to prevent text selection
    this.containerRef.nativeElement.classList.add('no-select');
    
    // Add global mouse event listeners
    document.addEventListener('mousemove', this.onMouseMove.bind(this));
    document.addEventListener('mouseup', this.onMouseUp.bind(this));
    
    // Change cursor for entire document
    document.body.style.cursor = 'col-resize';
  }

  onMouseMove(event: MouseEvent) {
    if (!this.isDragging) return;
    
    event.preventDefault();
    
    const deltaX = event.clientX - this.startX;
    let newLeftWidth = this.startLeftWidth + deltaX;
    
    // Calculate splitter width (6px)
    const splitterWidth = 6;
    
    // Set minimum and maximum widths
    const minWidth = 300; // Minimum width for code editor
    const maxWidth = this.containerWidth - 300 - splitterWidth; // Leave minimum space for preview
    
    newLeftWidth = Math.max(newLeftWidth, minWidth);
    newLeftWidth = Math.min(newLeftWidth, maxWidth);
    
    this.leftPanelWidth = newLeftWidth;
    this.rightPanelWidth = this.containerWidth - newLeftWidth - splitterWidth;
  }

  onMouseUp(event: MouseEvent) {
    if (!this.isDragging) return;
    
    this.isDragging = false;
    
    // Remove no-select class
    this.containerRef.nativeElement.classList.remove('no-select');
    
    // Remove global listeners
    this.removeGlobalListeners();
    
    // Reset cursor
    document.body.style.cursor = '';
  }

  private removeGlobalListeners() {
    document.removeEventListener('mousemove', this.onMouseMove.bind(this));
    document.removeEventListener('mouseup', this.onMouseUp.bind(this));
  }

  private onWindowResize() {
    if (!this.isVisible) return;
    this.updatePanelWidths();
  }

  private updatePanelWidths() {
    if (!this.containerRef) return;
    
    const container = this.containerRef.nativeElement;
    const newContainerWidth = container.offsetWidth;
    const splitterWidth = 6;
    
    if (newContainerWidth !== this.containerWidth) {
      // Maintain proportions on window resize
      const ratio = this.leftPanelWidth / (this.containerWidth - splitterWidth);
      this.containerWidth = newContainerWidth;
      
      // Calculate new left width maintaining ratio
      const minWidth = 300;
      const maxWidth = newContainerWidth - 300 - splitterWidth;
      
      this.leftPanelWidth = Math.max(
        minWidth,
        Math.min(
          ratio * (newContainerWidth - splitterWidth),
          maxWidth
        )
      );
      this.rightPanelWidth = newContainerWidth - this.leftPanelWidth - splitterWidth;
    }
  }

  // Preview functionality
  updatePreview() {
    if (!this.previewFrame?.nativeElement) return;

    const consolidatedHtml = this.consolidateCode();
    const iframe = this.previewFrame.nativeElement;

    // Write the consolidated HTML to the iframe
    const doc = iframe.contentDocument || iframe.contentWindow?.document;
    if (doc) {
      doc.open();
      doc.write(consolidatedHtml);
      doc.close();
    }
  }

  refreshPreview() {
    this.updatePreview();
  }

  private consolidateCode(): string {
    return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Preview</title>
    <style>
        /* Reset some default styles */
        body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
        
        /* User CSS */
        ${this.cssCode}
    </style>
</head>
<body>
    ${this.htmlCode}
    
    <script>
        // Error handling for JavaScript
        window.onerror = function(msg, url, lineNo, columnNo, error) {
            document.body.innerHTML += '<div style="color: red; background: #ffe6e6; padding: 10px; margin: 10px 0; border: 1px solid red; border-radius: 4px;"><strong>JavaScript Error:</strong> ' + msg + '</div>';
            return false;
        };
        
        // User JavaScript
        try {
            ${this.jsCode}
        } catch (error) {
            document.body.innerHTML += '<div style="color: red; background: #ffe6e6; padding: 10px; margin: 10px 0; border: 1px solid red; border-radius: 4px;"><strong>JavaScript Error:</strong> ' + error.message + '</div>';
        }
    </script>
</body>
</html>`;
  }

  // Utility methods for external code injection
  setCodeFromLLMResponse(htmlBlock: string, cssBlock: string, jsBlock: string) {
    this.htmlCode = htmlBlock;
    this.cssCode = cssBlock;
    this.jsCode = jsBlock;
    if (this.isVisible) {
      this.updatePreview();
    }
  }

  extractCodeFromMarkdown(llmResponse: string) {
    const htmlMatch = llmResponse.match(/```html\n([\s\S]*?)\n```/i);
    const cssMatch = llmResponse.match(/```css\n([\s\S]*?)\n```/i);
    const jsMatch = llmResponse.match(/```(?:javascript|js)\n([\s\S]*?)\n```/i);

    this.htmlCode = htmlMatch ? htmlMatch[1].trim() : '';
    this.cssCode = cssMatch ? cssMatch[1].trim() : '';
    this.jsCode = jsMatch ? jsMatch[1].trim() : '';

    if (this.isVisible) {
      this.updatePreview();
    }
  }
}

/*
Usage in your module:

1. Make sure you have PrimeNG installed and imported:
npm install primeng@16

2. Add required modules to your module imports:
import { DialogModule } from 'primeng/dialog';
import { ButtonModule } from 'primeng/button';
import { FormsModule } from '@angular/forms'; // For ngModel

@NgModule({
  imports: [
    DialogModule,
    ButtonModule,
    FormsModule,
    // ... other imports
  ],
  declarations: [
    ModalCodeEditorComponent,
    // ... other components
  ],
})

3. Import PrimeNG theme in your styles.css or angular.json:
@import 'primeng/resources/themes/lara-dark-blue/theme.css';
@import 'primeng/resources/primeng.css';
@import 'primeicons/primeicons.css';

4. Use in your template:
<app-modal-code-editor 
  [defaultLeftWidth]="500"
  [htmlCode]="initialHtml"
  [cssCode]="initialCss"
  [jsCode]="initialJs"
  (modalOpened)="onModalOpened()"
  (modalClosed)="onModalClosed()">
</app-modal-code-editor>

Features:
- Code editor on the left (HTML, CSS, JS textareas)
- Live preview on the right (iframe)
- Resizable splitter between panels
- Dark theme throughout
- Auto-updates preview on code changes
- Error handling for JavaScript
- Responsive design
- PrimeNG integration with custom animations
- Methods to inject code from external sources
*/
