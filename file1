// project-setup.component.ts
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-project-setup',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './project-setup.component.html',
  styleUrls: ['./project-setup.component.css']
})
export class ProjectSetupComponent {
  projectInput: string = '';
  isLoading: boolean = false;
  sidebarHidden: boolean = false;
  mainContent: string = 'Your project setup will appear here...';
  generateBtnDisabled: boolean = false;

  examples: string[] = [
    'E-commerce store with Next.js and Stripe',
    'Real-time chat app using Socket.io',
    'Dashboard with charts and analytics'
  ];

  fillExample(example: string): void {
    this.projectInput = example;
  }

  clearInput(): void {
    this.projectInput = '';
  }

  async generateProject(): Promise<void> {
    if (!this.projectInput.trim()) {
      alert('Please describe your project first!');
      return;
    }

    // Hide sidebar content and show loading
    this.sidebarHidden = true;
    this.generateBtnDisabled = true;

    setTimeout(() => {
      this.isLoading = true;
    }, 300);

    // Wait for animation to complete
    await new Promise(resolve => setTimeout(resolve, 4000));

    // Hide loading and show sidebar content
    this.isLoading = false;

    setTimeout(() => {
      this.sidebarHidden = false;
      
      // Update main content
      this.mainContent = `Project setup complete! ✨\n\nYour request: ${this.projectInput}`;
      
      // Reset button
      this.generateBtnDisabled = false;
    }, 300);
  }

  onTextareaInput(event: Event): void {
    const textarea = event.target as HTMLTextAreaElement;
    textarea.style.height = 'auto';
    textarea.style.height = Math.max(120, textarea.scrollHeight) + 'px';
  }
}

// ============================================
// project-setup.component.css
// ============================================
/*
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.layout {
  display: flex;
  min-height: 100vh;
  background: #1a1a1c;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', sans-serif;
}

.sidebar {
  width: 320px;
  background: #111113;
  padding: 24px;
  display: flex;
  flex-direction: column;
  gap: 20px;
  border-right: 1px solid #2a2a2c;
  position: relative;
  overflow: hidden;
}

.sidebar-content {
  display: flex;
  flex-direction: column;
  gap: 20px;
  transition: opacity 0.3s ease, transform 0.3s ease;
}

.sidebar-content.hidden {
  opacity: 0;
  transform: scale(0.95);
  pointer-events: none;
}

.header {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.header h2 {
  color: #ffffff;
  font-size: 18px;
  font-weight: 600;
  letter-spacing: -0.02em;
}

.header p {
  color: #9ca3af;
  font-size: 13px;
  line-height: 1.5;
}

.guidance-card {
  background: #1a1a1c;
  border: 1px solid #2a2a2c;
  border-radius: 12px;
  padding: 16px;
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.guidance-title {
  color: #ffffff;
  font-size: 14px;
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 8px;
}

.icon {
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.guidance-list {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.guidance-item {
  color: #9ca3af;
  font-size: 12px;
  line-height: 1.5;
  padding-left: 16px;
  position: relative;
}

.guidance-item:before {
  content: "→";
  position: absolute;
  left: 0;
  color: #6366f1;
}

.textarea-container {
  display: flex;
  flex-direction: column;
  gap: 8px;
  flex: 1;
}

.textarea-label {
  color: #ffffff;
  font-size: 13px;
  font-weight: 500;
}

textarea {
  width: 100%;
  min-height: 120px;
  background: #1a1a1c;
  border: 1px solid #2a2a2c;
  border-radius: 8px;
  padding: 12px;
  color: #ffffff;
  font-size: 13px;
  font-family: inherit;
  resize: vertical;
  transition: all 0.2s ease;
}

textarea:focus {
  outline: none;
  border-color: #6366f1;
  background: #1f1f21;
  box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.1);
}

textarea::placeholder {
  color: #6b7280;
}

.button-container {
  display: flex;
  gap: 8px;
}

.btn {
  flex: 1;
  padding: 10px 16px;
  border: none;
  border-radius: 8px;
  font-size: 13px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-primary {
  background: #6366f1;
  color: #ffffff;
}

.btn-primary:hover {
  background: #5558e3;
  transform: translateY(-1px);
}

.btn-primary:active {
  transform: translateY(0);
}

.btn-primary:disabled {
  background: #4a4d9e;
  cursor: not-allowed;
  transform: none;
}

.btn-secondary {
  background: #2a2a2c;
  color: #9ca3af;
}

.btn-secondary:hover {
  background: #35353a;
  color: #ffffff;
}

.examples {
  display: flex;
  flex-direction: column;
  gap: 6px;
}

.example-chip {
  background: #1a1a1c;
  border: 1px solid #2a2a2c;
  border-radius: 6px;
  padding: 8px 10px;
  font-size: 11px;
  color: #9ca3af;
  cursor: pointer;
  transition: all 0.2s ease;
}

.example-chip:hover {
  border-color: #6366f1;
  color: #ffffff;
  background: #1f1f21;
}

.loading-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: #111113;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 24px;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.3s ease;
}

.loading-overlay.active {
  opacity: 1;
  pointer-events: auto;
}

.animation-container {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 40px;
}

.geometric-animation {
  position: relative;
  width: 200px;
  height: 200px;
}

.orbit {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border: 2px solid rgba(99, 102, 241, 0.2);
  border-radius: 50%;
  animation: rotateOrbit 8s linear infinite;
}

.orbit:nth-child(1) {
  width: 160px;
  height: 160px;
}

.orbit:nth-child(2) {
  width: 120px;
  height: 120px;
  animation-duration: 6s;
  animation-direction: reverse;
  border-color: rgba(139, 92, 246, 0.2);
}

.orbit:nth-child(3) {
  width: 80px;
  height: 80px;
  animation-duration: 4s;
  border-color: rgba(236, 72, 153, 0.2);
}

@keyframes rotateOrbit {
  from {
    transform: translate(-50%, -50%) rotate(0deg);
  }
  to {
    transform: translate(-50%, -50%) rotate(360deg);
  }
}

.shape {
  position: absolute;
  opacity: 0;
  animation: shapeAppear 0.5s ease forwards;
}

@keyframes shapeAppear {
  from {
    opacity: 0;
    transform: scale(0) rotate(0deg);
  }
  to {
    opacity: 1;
    transform: scale(1) rotate(360deg);
  }
}

.shape-1 {
  width: 24px;
  height: 24px;
  background: linear-gradient(135deg, #6366f1, #8b5cf6);
  border-radius: 4px;
  top: 10%;
  left: 50%;
  transform: translateX(-50%);
  animation-delay: 0.2s;
  box-shadow: 0 0 20px rgba(99, 102, 241, 0.5);
}

.shape-2 {
  width: 28px;
  height: 28px;
  background: linear-gradient(135deg, #8b5cf6, #ec4899);
  border-radius: 50%;
  top: 50%;
  right: 10%;
  transform: translateY(-50%);
  animation-delay: 0.4s;
  box-shadow: 0 0 20px rgba(139, 92, 246, 0.5);
}

.shape-3 {
  width: 20px;
  height: 20px;
  background: linear-gradient(135deg, #ec4899, #f59e0b);
  bottom: 10%;
  left: 50%;
  transform: translateX(-50%) rotate(45deg);
  animation-delay: 0.6s;
  box-shadow: 0 0 20px rgba(236, 72, 153, 0.5);
}

.shape-4 {
  width: 26px;
  height: 26px;
  background: linear-gradient(135deg, #f59e0b, #10b981);
  border-radius: 50% 0;
  top: 50%;
  left: 10%;
  transform: translateY(-50%) rotate(45deg);
  animation-delay: 0.8s;
  box-shadow: 0 0 20px rgba(245, 158, 11, 0.5);
}

.core {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 40px;
  height: 40px;
  background: radial-gradient(circle, #6366f1, #4f46e5);
  border-radius: 50%;
  animation: corePulse 2s ease-in-out infinite;
  box-shadow: 0 0 30px rgba(99, 102, 241, 0.8);
}

@keyframes corePulse {
  0%, 100% {
    transform: translate(-50%, -50%) scale(1);
    opacity: 1;
  }
  50% {
    transform: translate(-50%, -50%) scale(1.3);
    opacity: 0.7;
  }
}

.energy-wave {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 40px;
  height: 40px;
  border: 2px solid #6366f1;
  border-radius: 50%;
  opacity: 0;
  animation: waveExpand 2s ease-out infinite;
}

.energy-wave:nth-child(5) {
  animation-delay: 0.5s;
}

.energy-wave:nth-child(6) {
  animation-delay: 1s;
}

.energy-wave:nth-child(7) {
  animation-delay: 1.5s;
}

@keyframes waveExpand {
  0% {
    width: 40px;
    height: 40px;
    opacity: 1;
  }
  100% {
    width: 200px;
    height: 200px;
    opacity: 0;
  }
}

.particle-field {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
}

.particle {
  position: absolute;
  width: 3px;
  height: 3px;
  background: #6366f1;
  border-radius: 50%;
  opacity: 0;
  animation: floatParticle 3s ease-in-out infinite;
}

@keyframes floatParticle {
  0%, 100% {
    opacity: 0;
    transform: translate(0, 0) scale(0);
  }
  50% {
    opacity: 1;
    transform: translate(var(--tx), var(--ty)) scale(1);
  }
}

.particle:nth-child(1) { left: 20%; top: 30%; --tx: 20px; --ty: -40px; animation-delay: 0s; }
.particle:nth-child(2) { left: 80%; top: 40%; --tx: -30px; --ty: -35px; animation-delay: 0.3s; background: #8b5cf6; }
.particle:nth-child(3) { left: 50%; top: 70%; --tx: 15px; --ty: -50px; animation-delay: 0.6s; background: #ec4899; }
.particle:nth-child(4) { left: 30%; top: 60%; --tx: -25px; --ty: -30px; animation-delay: 0.9s; background: #f59e0b; }
.particle:nth-child(5) { left: 70%; top: 20%; --tx: 20px; --ty: -45px; animation-delay: 1.2s; background: #10b981; }
.particle:nth-child(6) { left: 40%; top: 80%; --tx: -20px; --ty: -40px; animation-delay: 1.5s; }
.particle:nth-child(7) { left: 60%; top: 50%; --tx: 30px; --ty: -35px; animation-delay: 1.8s; background: #8b5cf6; }
.particle:nth-child(8) { left: 10%; top: 50%; --tx: 25px; --ty: -30px; animation-delay: 2.1s; background: #ec4899; }

.loading-title {
  color: #ffffff;
  font-size: 18px;
  font-weight: 600;
  text-align: center;
  letter-spacing: -0.02em;
}

.loading-subtitle {
  color: #9ca3af;
  font-size: 13px;
  text-align: center;
  margin-top: -30px;
}

.progress-bar-container {
  width: 100%;
  height: 6px;
  background: #1a1a1c;
  border-radius: 3px;
  overflow: hidden;
  border: 1px solid #2a2a2c;
}

.progress-bar {
  height: 100%;
  background: linear-gradient(90deg, #6366f1, #8b5cf6, #ec4899, #f59e0b);
  background-size: 300% 100%;
  border-radius: 3px;
  animation: progressFill 2s ease-in-out infinite, gradientShift 2s ease infinite;
  width: 0%;
  box-shadow: 0 0 10px rgba(99, 102, 241, 0.5);
}

@keyframes progressFill {
  0% {
    width: 0%;
  }
  50% {
    width: 100%;
  }
  100% {
    width: 0%;
  }
}

@keyframes gradientShift {
  0%, 100% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}

.main-content {
  flex: 1;
  padding: 40px;
  color: #9ca3af;
  display: flex;
  align-items: center;
  justify-content: center;
}
*/

// ============================================
// project-setup.component.html
// ============================================
/*
<div class="layout">
  <div class="sidebar">
    <div class="sidebar-content" [class.hidden]="sidebarHidden">
      <div class="header">
        <h2>Quick Project Setup</h2>
        <p>Describe your project and we'll set it up automatically</p>
      </div>

      <div class="guidance-card">
        <div class="guidance-title">
          <span class="icon">💡</span>
          <span>How to use</span>
        </div>
        <div class="guidance-list">
          <div class="guidance-item">Describe your project idea clearly</div>
          <div class="guidance-item">Include the tech stack you prefer</div>
          <div class="guidance-item">Mention any specific features needed</div>
          <div class="guidance-item">Click generate to create your setup</div>
        </div>
      </div>

      <div class="textarea-container">
        <label class="textarea-label">What would you like to build?</label>
        <textarea 
          [(ngModel)]="projectInput"
          (input)="onTextareaInput($event)"
          placeholder="E.g., A task management app with React, Node.js, and MongoDB. Include user authentication and real-time updates...">
        </textarea>
      </div>

      <div class="examples">
        <div 
          *ngFor="let example of examples" 
          class="example-chip" 
          (click)="fillExample(example)">
          {{ example }}
        </div>
      </div>

      <div class="button-container">
        <button class="btn btn-secondary" (click)="clearInput()">Clear</button>
        <button 
          class="btn btn-primary" 
          [disabled]="generateBtnDisabled"
          (click)="generateProject()">
          Generate Setup
        </button>
      </div>
    </div>

    <div class="loading-overlay" [class.active]="isLoading">
      <div class="animation-container">
        <div class="geometric-animation">
          <!-- Orbiting Rings -->
          <div class="orbit"></div>
          <div class="orbit"></div>
          <div class="orbit"></div>

          <!-- Energy Waves -->
          <div class="energy-wave"></div>
          <div class="energy-wave"></div>
          <div class="energy-wave"></div>
          <div class="energy-wave"></div>

          <!-- Central Core -->
          <div class="core"></div>

          <!-- Geometric Shapes -->
          <div class="shape shape-1"></div>
          <div class="shape shape-2"></div>
          <div class="shape shape-3"></div>
          <div class="shape shape-4"></div>

          <!-- Floating Particles -->
          <div class="particle-field">
            <div class="particle"></div>
            <div class="particle"></div>
            <div class="particle"></div>
            <div class="particle"></div>
            <div class="particle"></div>
            <div class="particle"></div>
            <div class="particle"></div>
            <div class="particle"></div>
          </div>
        </div>

        <div class="loading-title">Generating Your Project</div>
        <div class="loading-subtitle">Please wait while we set things up...</div>

        <div class="progress-bar-container">
          <div class="progress-bar"></div>
        </div>
      </div>
    </div>
  </div>

  <div class="main-content">
    <p [style.white-space]="'pre-line'">{{ mainContent }}</p>
  </div>
</div>
*/
