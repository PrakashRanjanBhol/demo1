<!-- Combined container -->
<div class="date-range-container">
  <!-- Left: Date Range Picker + Apply -->
  <div class="date-range-block">
    <div class="date-range-header">
      <i class="pi pi-calendar date-icon"></i>
      <span class="date-label">Select a Date Range</span>
    </div>

    <div class="date-picker-row">
      <p-calendar [(ngModel)]="selectedRange" selectionMode="range" dateFormat="dd-mm-yy"
        placeholder="Choose dates" [maxDate]="maxDate" [minDate]="minDate" [readonlyInput]="true"
        class="custom-calendar"></p-calendar>

      <button pButton type="button" label="Apply" icon="pi pi-check" class="apply-btn"
        (click)="applyDateRange()" [disabled]="!selectedRange || selectedRange.length < 2"></button>
    </div>
  </div>

  <!-- Middle: Total Lines of Code -->
  <div class="loc-block">
    <div class="loc-circle">
      <i class="pi pi-code"></i>
    </div>
    <div class="loc-text">
      <span class="loc-label">Total Lines of Code</span>
      <span class="loc-value">{{ totalLines | number }}</span>
    </div>
  </div>

  <!-- Right: Selected Period with Tick -->
  <div *ngIf="appliedRange?.length === 2" class="period-block">
    <div class="tick-circle">
      <i class="pi pi-check"></i>
    </div>
    <div class="period-text">
      <span class="period-label">Selected Period</span>
      <span class="period-value">
        {{ appliedRange[0] | date: 'dd-MM-yyyy' }} â†’ {{ appliedRange[1] | date: 'dd-MM-yyyy' }}
      </span>
    </div>
  </div>
</div>

<!-- Chart -->
<div echarts [options]="chartOption" class="chart"></div>






/* ------------------------------
   Date Range Container (glassmorphism style)
--------------------------------*/
.date-range-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 2rem;
  flex-wrap: wrap;

  background: rgba(30, 33, 40, 0.8); /* semi-transparent */
  backdrop-filter: blur(12px);
  padding: 1rem 1.5rem;
  border-radius: 16px;
  border: 1px solid rgba(66, 165, 245, 0.3);
  box-shadow: 0px 8px 20px rgba(0, 0, 0, 0.45);

  margin-bottom: 1rem;
  transition: all 0.3s ease;
}

.date-range-container:hover {
  border-color: #42a5f5;
  box-shadow: 0px 10px 25px rgba(66, 165, 245, 0.35);
  transform: translateY(-2px);
}

/* ------------------------------
   Left Section
--------------------------------*/
.date-range-block {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.date-range-header {
  display: flex;
  align-items: center;
  gap: 8px;
}

.date-label {
  font-size: 15px;
  font-weight: 600;
  color: #e0e6f0;
  letter-spacing: 0.3px;
}

.date-icon {
  font-size: 18px;
  color: #42a5f5;
}

/* Date picker + button row */
.date-picker-row {
  display: flex;
  align-items: center;
  gap: 12px;
}

/* Calendar customization */
.custom-calendar .p-inputtext {
  background: #1c1f26 !important;
  color: #ffffff !important;
  border: 1px solid #2a2f3a !important;
  border-radius: 8px !important;
  padding: 0.6rem !important;
  font-size: 14px;
  min-width: 220px;
  text-align: center;
  transition: all 0.3s ease;
}

.custom-calendar .p-inputtext:focus {
  border-color: #42a5f5 !important;
  box-shadow: 0 0 10px rgba(66, 165, 245, 0.6) !important;
}

/* Apply button */
.apply-btn {
  border-radius: 8px !important;
  padding: 0.6rem 1.2rem !important;
  background: linear-gradient(135deg, #42a5f5, #1e88e5) !important;
  border: none !important;
  font-weight: 600;
  color: #fff !important;
  letter-spacing: 0.3px;
  box-shadow: 0px 4px 12px rgba(66, 165, 245, 0.4);
  transition: all 0.3s ease;
}

.apply-btn:hover {
  background: linear-gradient(135deg, #64b5f6, #2196f3) !important;
  transform: translateY(-2px) scale(1.03);
  box-shadow: 0px 6px 16px rgba(66, 165, 245, 0.55);
}

/* ------------------------------
   Right Section (Selected Period)
--------------------------------*/
.period-block {
  display: flex;
  align-items: center;
  gap: 12px;

  background: rgba(28, 31, 38, 0.85);
  border: 1px solid rgba(66, 165, 245, 0.25);
  border-radius: 14px;
  padding: 0.9rem 1.3rem;

  font-size: 14px;
  font-weight: 500;
  color: #ffffff;

  box-shadow: inset 0px 2px 6px rgba(0, 0, 0, 0.4);
  transition: all 0.3s ease;
  animation: fadeIn 0.4s ease;
}

.period-block:hover {
  border-color: #42a5f5;
  box-shadow: 0px 6px 16px rgba(66, 165, 245, 0.35);
  transform: translateY(-2px);
}

/* âœ… Tick Circle */
.tick-circle {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: linear-gradient(135deg, #42a5f5, #1e88e5);

  display: flex;
  align-items: center;
  justify-content: center;

  color: #ffffff;
  font-size: 16px;
  box-shadow: 0px 4px 10px rgba(66, 165, 245, 0.5);

  animation: popIn 0.4s ease;
}

/* Text inside block */
.period-text {
  display: flex;
  flex-direction: column;
}

.period-label {
  font-weight: 600;
  color: #aab4c3;
  font-size: 13px;
  margin-bottom: 2px;
}

.period-value {
  font-weight: 600;
  color: #ffffff;
  letter-spacing: 0.4px;
}

/* ------------------------------
   Animations
--------------------------------*/
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(-6px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes popIn {
  0% { transform: scale(0.5); opacity: 0; }
  100% { transform: scale(1); opacity: 1; }
}


/* ------------------------------
   Lines of Code Block
--------------------------------*/
.loc-block {
  display: flex;
  align-items: center;
  gap: 12px;

  background: rgba(28, 31, 38, 0.85);
  border: 1px solid rgba(0, 230, 118, 0.25);
  border-radius: 14px;
  padding: 0.9rem 1.3rem;

  font-size: 14px;
  font-weight: 500;
  color: #ffffff;

  box-shadow: inset 0px 2px 6px rgba(0, 0, 0, 0.4);
  transition: all 0.3s ease;
  animation: fadeIn 0.4s ease;
}

.loc-block:hover {
  border-color: #00e676;
  box-shadow: 0px 6px 16px rgba(0, 230, 118, 0.35);
  transform: translateY(-2px);
}

/* âœ… Code Circle */
.loc-circle {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: linear-gradient(135deg, #00e676, #00c853);

  display: flex;
  align-items: center;
  justify-content: center;

  color: #ffffff;
  font-size: 16px;
  box-shadow: 0px 4px 10px rgba(0, 230, 118, 0.5);

  animation: popIn 0.4s ease;
}

/* Text inside block */
.loc-text {
  display: flex;
  flex-direction: column;
}

.loc-label {
  font-weight: 600;
  color: #aab4c3;
  font-size: 13px;
  margin-bottom: 2px;
}

.loc-value {
  font-weight: 700;
  font-size: 15px;
  color: #00e676;
  letter-spacing: 0.4px;
}





private updateChart(grouped: Record<string, number>, overallTotal: number) {
    this.totalLines = overallTotal; // ðŸ”¹ store so template can show it
    this.chartOption = {
      backgroundColor: '#111113',
      tooltip: {
        trigger: 'item',
        backgroundColor: '#1e1e1e',
        borderColor: '#333',
        textStyle: { color: '#fff' },
        formatter: (p: any) =>
          `${p.name}<br/>${p.value.toLocaleString()} lines (${p.percent}%)`,
      },
      legend: {
        type: 'scroll',
        bottom: 0,
        textStyle: { color: '#ffffff' },
      },
      series: [
        {
          name: 'Lines of Code',
          type: 'pie',
          radius: '65%',
          center: ['50%', '52%'],
          startAngle: 90, // âœ… makes chart start from top
          label: {
            color: '#ffffff',
            formatter: '{b}: {c}',
          },
          data: Object.entries(grouped).map(([name, value]) => ({
            name,
            value,
          })),
        },
      ],
    };
  }


