import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';

@Component({
  selector: 'app-code-parser',
  template: `
    <div class="code-container">
      <div class="code-section">
        <h3>HTML Code:</h3>
        <pre><code>{{ htmlCode }}</code></pre>
      </div>
      
      <div class="code-section">
        <h3>CSS Code:</h3>
        <pre><code>{{ cssCode }}</code></pre>
      </div>
      
      <div class="code-section">
        <h3>JavaScript Code:</h3>
        <pre><code>{{ jsCode }}</code></pre>
      </div>
    </div>
  `,
  styles: [`
    .code-container {
      display: flex;
      flex-direction: column;
      gap: 20px;
    }
    .code-section {
      border: 1px solid #ccc;
      padding: 10px;
      border-radius: 5px;
    }
    pre {
      background-color: #f5f5f5;
      padding: 10px;
      border-radius: 3px;
      overflow-x: auto;
      white-space: pre-wrap;
    }
  `]
})
export class CodeParserComponent implements OnChanges {
  @Input() chunk: string = '';   // will now contain "content so far"

  htmlCode: string = '';
  cssCode: string = '';
  jsCode: string = '';

  ngOnChanges(changes: SimpleChanges): void {
    if (changes['chunk'] && changes['chunk'].currentValue !== undefined) {
      this.parseFullContent(changes['chunk'].currentValue);
    }
  }

  private parseFullContent(content: string): void {
    // Reset on every re-parse
    this.htmlCode = '';
    this.cssCode = '';
    this.jsCode = '';

    const codeBlockRegex = /```(\w+)?\s*([\s\S]*?)```/g;
    let match: RegExpExecArray | null;

    while ((match = codeBlockRegex.exec(content)) !== null) {
      const lang = (match[1] || '').toLowerCase().trim();
      const code = match[2];

      if (lang.includes('html')) {
        this.htmlCode += code + '\n';
      } else if (lang.includes('css')) {
        this.cssCode += code + '\n';
      } else if (lang.includes('js') || lang.includes('javascript') || lang.includes('ts') || lang.includes('typescript')) {
        this.jsCode += code + '\n';
      }
    }
  }

  public clearAll(): void {
    this.htmlCode = '';
    this.cssCode = '';
    this.jsCode = '';
  }

  public getAllCode(): { html: string, css: string, js: string } {
    return {
      html: this.htmlCode,
      css: this.cssCode,
      js: this.jsCode
    };
  }
}
