package com.example.demo11;

import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.Messages;
import com.intellij.ui.components.JBTextArea;

import javax.swing.*;
import javax.swing.border.LineBorder;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.*;

public class ChatPanel extends JPanel {

    private final StyledDocument styledDocument;
    private final JTextPane responseArea;
    private final JComboBox<String> modeDropdown;
    private final JLabel refreshLabel;
    private final JPanel glassPaneOverlay;
    private final JBTextArea textArea;
    private final JButton sendButton;

    public ChatPanel(Project project) {
        setLayout(new BorderLayout());

        // === Response Area ===
        responseArea = new JTextPane();
        responseArea.setEditable(false);
        responseArea.setFont(new Font("Poppins", Font.PLAIN, 14));
        styledDocument = responseArea.getStyledDocument();
        JScrollPane scrollPane = new JScrollPane(responseArea);

        add(scrollPane, BorderLayout.CENTER);

        // === Header ===
        JPanel headerPanel = new JPanel(new BorderLayout());
        headerPanel.setPreferredSize(new Dimension(0, 30));
        headerPanel.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));

        String[] modes = {"Loading..."}; // initial placeholder
        modeDropdown = new JComboBox<>(modes);
        modeDropdown.setPreferredSize(new Dimension(150, 25));
        modeDropdown.setFont(new Font("Poppins", Font.PLAIN, 12));
        modeDropdown.setFocusable(false);

        refreshLabel = createIconLabel("/icons/refresh.png", "Refresh", project);
        refreshLabel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        JPanel leftHeader = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 2));
        leftHeader.setOpaque(false);
        leftHeader.add(modeDropdown);
        leftHeader.add(refreshLabel);

        headerPanel.add(leftHeader, BorderLayout.WEST);
        add(headerPanel, BorderLayout.NORTH);

        // === Footer ===
        JPanel footerPanel = new JPanel(new BorderLayout(10, 0));
        footerPanel.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));

        textArea = new JBTextArea(1, 40);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setFont(new Font("Poppins", Font.PLAIN, 14));
        textArea.setBorder(new LineBorder(Color.BLUE, 1));

        JScrollPane inputScroll = new JScrollPane(textArea);
        inputScroll.setPreferredSize(new Dimension(0, 35));

        sendButton = new JButton("Send");
        sendButton.setPreferredSize(new Dimension(100, 40));
        sendButton.setFont(new Font("Poppins", Font.BOLD, 14));

        footerPanel.add(inputScroll, BorderLayout.CENTER);
        footerPanel.add(sendButton, BorderLayout.EAST);

        add(footerPanel, BorderLayout.SOUTH);

        // === GlassPane Overlay for Blocking ===
        glassPaneOverlay = new JPanel(new GridBagLayout());
        glassPaneOverlay.setOpaque(true);
        glassPaneOverlay.setBackground(new Color(0, 0, 0, 120));

        JLabel loadingLabel = new JLabel("Loading models...");
        loadingLabel.setFont(new Font("Poppins", Font.BOLD, 14));
        loadingLabel.setForeground(Color.WHITE);

        glassPaneOverlay.add(loadingLabel, new GridBagConstraints());
        glassPaneOverlay.setVisible(false);

        setLayout(new BorderLayout());
        add(glassPaneOverlay, BorderLayout.CENTER);
        setComponentZOrder(glassPaneOverlay, 0); // keep on top

        // === Actions ===
        refreshLabel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                fetchModels();
            }
        });

        // === Initial fetch on startup ===
        SwingUtilities.invokeLater(this::fetchModels);
    }

    private JLabel createIconLabel(String path, String tooltip, Project project) {
        JLabel label = new JLabel();
        label.setIcon(new ImageIcon(getClass().getResource(path)));
        label.setToolTipText(tooltip);
        return label;
    }

    private void fetchModels() {
        blockUI(true);

        // Simulate API call with SwingWorker
        new SwingWorker<String[], Void>() {
            @Override
            protected String[] doInBackground() throws Exception {
                Thread.sleep(2000); // simulate API delay
                return new String[]{"GPT-4", "GPT-3.5", "Custom-Model"};
            }

            @Override
            protected void done() {
                try {
                    String[] models = get();
                    modeDropdown.setModel(new DefaultComboBoxModel<>(models));
                    modeDropdown.setSelectedIndex(0);
                } catch (Exception e) {
                    Messages.showErrorDialog("Failed to fetch models", "Error");
                } finally {
                    blockUI(false);
                }
            }
        }.execute();
    }

    private void blockUI(boolean block) {
        glassPaneOverlay.setVisible(block);
        glassPaneOverlay.setEnabled(block);
    }
}
