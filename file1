/* Dark Mode Variables */
:host ::ng-deep body[data-theme="dark"] {
  --sdlc-projects-bg-primary: #111113;
  --sdlc-projects-bg-secondary: #1c1c1f;
  --sdlc-projects-bg-tertiary: #18181b;
  --sdlc-projects-text-primary: #e4e4e7;
  --sdlc-projects-text-secondary: #a1a1aa;
  --sdlc-projects-text-tertiary: #71717a;
  --sdlc-projects-text-muted: #52525b;
  --sdlc-projects-border-primary: #2a2a2d;
  --sdlc-projects-border-hover: rgba(102, 126, 234, 0.4);
  --sdlc-projects-shadow: rgba(102, 126, 234, 0.18);
  --sdlc-projects-gradient-start: #667eea;
  --sdlc-projects-gradient-end: #764ba2;
  --sdlc-projects-accent: #667eea;
  --sdlc-projects-accent-hover: #764ba2;
  --sdlc-projects-spinner-border: #2a2a2d;
  --sdlc-projects-empty-icon-opacity: 0.25;
}

/* Light Mode Variables */
:host ::ng-deep body[data-theme="light"] {
  --sdlc-projects-bg-primary: #ffffff;
  --sdlc-projects-bg-secondary: #f8f9fa;
  --sdlc-projects-bg-tertiary: #f1f3f5;
  --sdlc-projects-text-primary: #212529;
  --sdlc-projects-text-secondary: #495057;
  --sdlc-projects-text-tertiary: #6c757d;
  --sdlc-projects-text-muted: #adb5bd;
  --sdlc-projects-border-primary: #dee2e6;
  --sdlc-projects-border-hover: rgba(102, 126, 234, 0.6);
  --sdlc-projects-shadow: rgba(102, 126, 234, 0.25);
  --sdlc-projects-gradient-start: #667eea;
  --sdlc-projects-gradient-end: #764ba2;
  --sdlc-projects-accent: #667eea;
  --sdlc-projects-accent-hover: #764ba2;
  --sdlc-projects-spinner-border: #dee2e6;
  --sdlc-projects-empty-icon-opacity: 0.15;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:host {
  display: block;
  background-color: var(--sdlc-projects-bg-primary);
  color: var(--sdlc-projects-text-primary);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  padding: 3.75rem 1.25rem;
  min-height: 100vh;
  transition: background-color 0.3s ease, color 0.3s ease;
}

.container {
  max-width: 1400px;
  margin: 0 auto;
}

.header {
  margin-bottom: 3.125rem;
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 1rem;
}

h1 {
  font-size: 1.5rem;
  margin-bottom: 0.375rem;
  background: linear-gradient(135deg, var(--sdlc-projects-gradient-start) 0%, var(--sdlc-projects-gradient-end) 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  font-weight: 700;
  letter-spacing: -0.02em;
}

.subtitle {
  color: var(--sdlc-projects-text-secondary);
  font-size: 0.8125rem;
  font-weight: 400;
}

.theme-toggle {
  background: var(--sdlc-projects-bg-secondary);
  border: 1px solid var(--sdlc-projects-border-primary);
  border-radius: 0.75rem;
  padding: 0.625rem;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.theme-toggle:hover {
  transform: scale(1.05);
  border-color: var(--sdlc-projects-accent);
  box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
}

.theme-icon {
  width: 1.25rem;
  height: 1.25rem;
  stroke: var(--sdlc-projects-accent);
}

.search-container {
  margin-bottom: 2.25rem;
  position: relative;
}

.search-wrapper {
  position: relative;
  max-width: 32rem;
}

.search-icon {
  position: absolute;
  left: 0.875rem;
  top: 50%;
  transform: translateY(-50%);
  width: 1rem;
  height: 1rem;
  opacity: 0.4;
  stroke: var(--sdlc-projects-text-primary);
}

.search-input {
  width: 100%;
  padding: 0.75rem 0.875rem 0.75rem 2.5rem;
  background: var(--sdlc-projects-bg-secondary);
  border: 1px solid var(--sdlc-projects-border-primary);
  border-radius: 0.75rem;
  color: var(--sdlc-projects-text-primary);
  font-size: 0.8125rem;
  transition: all 0.3s ease;
}

.search-input:focus {
  outline: none;
  border-color: var(--sdlc-projects-accent);
  box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
}

.search-input::placeholder {
  color: var(--sdlc-projects-text-tertiary);
}

.section {
  margin-bottom: 2.75rem;
}

.section-title {
  font-size: 1rem;
  margin-bottom: 1.125rem;
  color: var(--sdlc-projects-text-primary);
  display: flex;
  align-items: center;
  gap: 0.625rem;
  font-weight: 600;
  letter-spacing: -0.01em;
}

.section-icon {
  width: 1.125rem;
  height: 1.125rem;
}

.projects-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(14rem, 1fr));
  gap: 1rem;
}

.project-card {
  background: linear-gradient(145deg, var(--sdlc-projects-bg-secondary) 0%, var(--sdlc-projects-bg-tertiary) 100%);
  border-radius: 0.875rem;
  padding: 1rem;
  transition: all 0.35s cubic-bezier(0.4, 0, 0.2, 1);
  border: 1px solid var(--sdlc-projects-border-primary);
  cursor: pointer;
  position: relative;
  overflow: hidden;
}

.project-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 0.25rem;
  background: linear-gradient(135deg, var(--sdlc-projects-gradient-start) 0%, var(--sdlc-projects-gradient-end) 100%);
  opacity: 0;
  transition: opacity 0.35s cubic-bezier(0.4, 0, 0.2, 1);
}

.project-card:hover {
  transform: translateY(-0.375rem);
  box-shadow: 0 1rem 2.5rem var(--sdlc-projects-shadow);
  border-color: var(--sdlc-projects-border-hover);
}

.project-card:hover::before {
  opacity: 1;
}

.project-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 0.625rem;
  margin-bottom: 0.5rem;
}

.project-info {
  flex: 1;
  min-width: 0;
}

.project-actions {
  display: flex;
  gap: 0.375rem;
  align-items: flex-start;
  flex-shrink: 0;
}

.project-id {
  font-size: 0.6875rem;
  font-weight: 700;
  background: linear-gradient(135deg, var(--sdlc-projects-gradient-start) 0%, var(--sdlc-projects-gradient-end) 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  margin-bottom: 0.375rem;
  letter-spacing: 0.02em;
}

.project-title {
  font-size: 0.8125rem;
  font-weight: 600;
  color: var(--sdlc-projects-text-primary);
  line-height: 1.4;
  word-wrap: break-word;
  overflow-wrap: break-word;
  letter-spacing: -0.01em;
}

.icon-btn {
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 0;
  transition: all 0.25s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.icon-btn svg {
  width: 0.9375rem;
  height: 0.9375rem;
  stroke: var(--sdlc-projects-text-secondary);
  transition: all 0.25s ease;
}

.icon-btn:hover {
  transform: scale(1.15);
}

.icon-btn:hover svg {
  stroke: var(--sdlc-projects-accent);
}

.favorite-btn {
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 0;
  font-size: 1.125rem;
  transition: all 0.25s ease;
  line-height: 1;
  color: var(--sdlc-projects-text-muted);
  flex-shrink: 0;
}

.favorite-btn:hover {
  transform: scale(1.15);
  color: var(--sdlc-projects-accent);
}

.favorite-btn.active {
  color: var(--sdlc-projects-accent);
}

.favorite-btn.active:hover {
  color: var(--sdlc-projects-accent-hover);
}

.favorite-btn.loading {
  pointer-events: none;
}

.spinner {
  width: 1.125rem;
  height: 1.125rem;
  border: 2px solid var(--sdlc-projects-spinner-border);
  border-top-color: var(--sdlc-projects-accent);
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.empty-state {
  text-align: center;
  padding: 3rem 1rem;
  color: var(--sdlc-projects-text-tertiary);
  background: var(--sdlc-projects-bg-secondary);
  border-radius: 0.875rem;
  border: 1px dashed var(--sdlc-projects-border-primary);
}

.empty-state-icon {
  width: 3.5rem;
  height: 3.5rem;
  margin: 0 auto 0.875rem;
  opacity: var(--sdlc-projects-empty-icon-opacity);
  stroke: var(--sdlc-projects-text-tertiary);
}

.empty-state-text {
  font-size: 0.8125rem;
  color: var(--sdlc-projects-text-secondary);
}

@media (max-width: 768px) {
  :host {
    padding: 2.5rem 1rem;
  }

  h1 {
    font-size: 1.75rem;
  }

  .projects-grid {
    grid-template-columns: repeat(auto-fill, minmax(14rem, 1fr));
    gap: 1.25rem;
  }

  .project-card {
    padding: 1.25rem;
  }

  .project-title {
    font-size: 0.875rem;
  }
}








<div class="container">
  <div class="header">
    <div class="header-content">
      <div>
        <h1>My Projects</h1>
        <p class="subtitle">Manage and organize your favorite projects</p>
      </div>
      <button class="theme-toggle" (click)="toggleTheme()" [title]="isDarkMode ? 'Switch to light mode' : 'Switch to dark mode'">
        <svg *ngIf="isDarkMode" class="theme-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <circle cx="12" cy="12" r="5"></circle>
          <line x1="12" y1="1" x2="12" y2="3"></line>
          <line x1="12" y1="21" x2="12" y2="23"></line>
          <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
          <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
          <line x1="1" y1="12" x2="3" y2="12"></line>
          <line x1="21" y1="12" x2="23" y2="12"></line>
          <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
          <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
        </svg>
        <svg *ngIf="!isDarkMode" class="theme-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
        </svg>
      </button>
    </div>
  </div>

  <div class="search-container">
    <div class="search-wrapper">
      <svg class="search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
      <input 
        type="text" 
        class="search-input" 
        [(ngModel)]="searchTerm"
        (input)="filterProjects()"
        placeholder="Search projects by name or ID...">
    </div>
  </div>

  <div class="section">
    <h2 class="section-title">
      <svg class="section-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <polygon
          points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"
          fill="#764ba2" stroke="#667eea" />
      </svg>
      Favorite Projects
    </h2>
    <div class="projects-grid" *ngIf="favoriteProjects.length > 0">
      <div class="project-card" *ngFor="let project of favoriteProjects">
        <div class="project-header">
          <div class="project-info">
            <div class="project-id">#{{ formatId(project.id) }}</div>
            <div class="project-title">{{ project.title }}</div>
          </div>
          <div class="project-actions">
            <button class="icon-btn" (click)="manageProject(project.id, $event)" title="Manage project">
              <svg viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
              </svg>
            </button>
            <div *ngIf="project.isLoading" class="spinner"></div>
            <button 
              *ngIf="!project.isLoading"
              class="favorite-btn" 
              [class.active]="project.isFavorite"
              (click)="toggleFavorite(project, $event)"
              [title]="project.isFavorite ? 'Remove from favorites' : 'Add to favorites'">
              {{ project.isFavorite ? '★' : '☆' }}
            </button>
          </div>
        </div>
      </div>
    </div>
    <div class="empty-state" *ngIf="favoriteProjects.length === 0">
      <svg class="empty-state-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
      </svg>
      <div class="empty-state-text">No favorite projects found</div>
    </div>
  </div>

  <div class="section">
    <h2 class="section-title">
      <svg class="section-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z" fill="url(#gradient1)" />
        <polyline points="13 2 13 9 20 9" fill="url(#gradient2)" />
        <defs>
          <linearGradient id="gradient1" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
          </linearGradient>
          <linearGradient id="gradient2" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
          </linearGradient>
        </defs>
      </svg>
      All Projects
    </h2>
    <div class="projects-grid">
      <div class="project-card" *ngFor="let project of filteredProjects">
        <div class="project-header">
          <div class="project-info">
            <div class="project-id">#{{ formatId(project.id) }}</div>
            <div class="project-title">{{ project.title }}</div>
          </div>
          <div class="project-actions">
            <button class="icon-btn" (click)="manageProject(project.id, $event)" title="Manage project">
              <svg viewBox="0 0 24 24" fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"/>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"/>
              </svg>
            </button>
            <div *ngIf="project.isLoading" class="spinner"></div>
            <button 
              *ngIf="!project.isLoading"
              class="favorite-btn" 
              [class.active]="project.isFavorite"
              (click)="toggleFavorite(project, $event)"
              [title]="project.isFavorite ? 'Remove from favorites' : 'Add to favorites'">
              {{ project.isFavorite ? '★' : '☆' }}
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>






import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

interface Project {
  id: number;
  title: string;
  isFavorite: boolean;
  isLoading: boolean;
}

@Component({
  selector: 'app-projects',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './projects.component.html',
  styleUrls: ['./projects.component.css']
})
export class ProjectsComponent implements OnInit {
  projects: Project[] = [
    { id: 1, title: "E-Commerce Platform", isFavorite: true, isLoading: false },
    { id: 2, title: "AI Chat Assistant", isFavorite: true, isLoading: false },
    { id: 3, title: "Task Management App", isFavorite: true, isLoading: false },
    { id: 4, title: "Weather Dashboard", isFavorite: false, isLoading: false },
    { id: 5, title: "Portfolio Website", isFavorite: false, isLoading: false },
    { id: 6, title: "Social Media Analytics", isFavorite: false, isLoading: false },
    { id: 7, title: "Blog Platform", isFavorite: false, isLoading: false },
    { id: 8, title: "Video Streaming App", isFavorite: false, isLoading: false },
    { id: 9, title: "Recipe Finder", isFavorite: false, isLoading: false },
    { id: 10, title: "Fitness Tracker", isFavorite: false, isLoading: false },
    { id: 11, title: "Music Player", isFavorite: false, isLoading: false },
    { id: 12, title: "Chat Application", isFavorite: false, isLoading: false }
  ];

  filteredProjects: Project[] = [];
  searchTerm: string = '';
  isDarkMode: boolean = true;

  ngOnInit(): void {
    this.filteredProjects = [...this.projects];
    this.loadThemePreference();
  }

  loadThemePreference(): void {
    const savedTheme = localStorage.getItem('sdlc-projects-theme');
    this.isDarkMode = savedTheme !== 'light';
    this.applyTheme();
  }

  toggleTheme(): void {
    this.isDarkMode = !this.isDarkMode;
    this.applyTheme();
    localStorage.setItem('sdlc-projects-theme', this.isDarkMode ? 'dark' : 'light');
  }

  applyTheme(): void {
    document.body.setAttribute('data-theme', this.isDarkMode ? 'dark' : 'light');
  }

  filterProjects(): void {
    const term = this.searchTerm.toLowerCase();
    this.filteredProjects = this.projects.filter(project =>
      project.title.toLowerCase().includes(term) ||
      String(project.id).includes(term) ||
      `#${this.formatId(project.id)}`.includes(term)
    );
  }

  toggleFavorite(project: Project, event: Event): void {
    event.stopPropagation();
    if (!project.isLoading) {
      project.isLoading = true;

      setTimeout(() => {
        project.isFavorite = !project.isFavorite;
        project.isLoading = false;
        this.filterProjects();
      }, 10000);
    }
  }

  manageProject(projectId: number, event: Event): void {
    event.stopPropagation();
    alert(`Managing project #${this.formatId(projectId)}`);
  }

  formatId(id: number): string {
    return String(id).padStart(3, '0');
  }

  get favoriteProjects(): Project[] {
    return this.filteredProjects.filter(p => p.isFavorite);
  }
}






