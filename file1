import React, { useState, useRef, useEffect } from 'react';
import styles from './SettingsDropdown.module.css';

const SettingsDropdown = ({ options = [] }) => {
    const [visible, setVisible] = useState(false);
    const dropdownRef = useRef();

    useEffect(() => {
        const handleClickOutside = (e) => {
            if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {
                setVisible(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    const toggleDropdown = () => setVisible((prev) => !prev);

    return (
        <div className={styles.wrapper} ref={dropdownRef}>
            <button className={styles.settingsButton} onClick={toggleDropdown}>
                <i className={`pi pi-cog ${styles.icon}`}></i>
                <span>Settings</span>
            </button>

            {visible && (
                <div className={styles.dropdown}>
                    {options.map((opt, index) => (
                        <div
                            key={index}
                            className={styles.option}
                            onClick={() => {
                                opt.onClick?.();
                                setVisible(false);
                            }}
                        >
                            {opt.icon && <i className={`pi ${opt.icon} ${styles.optionIcon}`}></i>}
                            {opt.label}
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
};

export default SettingsDropdown;





.wrapper {
    position: relative;
    display: inline-block;
}

.settingsButton {
    background-color: #2c2c2c;
    border: 1px solid #444;
    color: #fff;
    padding: 0.4rem 0.8rem;
    border-radius: 999px;
    /* round border */
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.95rem;
    cursor: pointer;
    transition: background 0.3s;
}

.settingsButton:hover {
    background-color: #3a3a3a;
}

.icon {
    font-size: 1rem;
}

.dropdown {
    position: absolute;
    top: 115%;
    right: 0;
    background-color: #1c1c1c;
    border: 1px solid #333;
    border-radius: 6px;
    min-width: 180px;
    z-index: 1000;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);
    animation: fadeIn 0.2s ease-in-out;
}

.option {
    padding: 10px 14px;
    color: #f1f1f1;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: background 0.2s;
}

.option:hover {
    background-color: #333;
}

.optionIcon {
    font-size: 1rem;
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(-5px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }
}









import SettingsDropdown from '../SettingsDropdown/SettingsDropdown';

  const settingsOptions = [
    { label: 'Profile', icon: 'pi-user', onClick: () => alert('Profile clicked') },
    { label: 'Preferences', icon: 'pi-sliders-h', onClick: () => alert('Preferences clicked') },
    { label: 'Logout', icon: 'pi-sign-out', onClick: () => alert('Logout clicked') },
];

<SettingsDropdown options={settingsOptions} />
