 private updateChart(grouped: Record<string, number>, overallTotal: number) {
  this.totalLines = overallTotal;

  const languages = Object.keys(grouped);
  const colors = ['#4cafef', '#00e676', '#ff5252', '#ffc107'];

  this.chartOption = {
    backgroundColor: '#111113',
    tooltip: {
      trigger: 'item',
      backgroundColor: '#1e1e1e',
      borderColor: '#333',
      textStyle: { color: '#fff' },
      formatter: (params: any) => {
        return `${params.seriesName}<br/>${params.value.toLocaleString()} lines`;
      }
    },
    legend: {
      type: 'scroll',
      bottom: 0,
      textStyle: { color: '#ffffff' },
      data: languages, // ✅ legends will now map to series names
    },
    grid: {
      left: '5%',
      right: '5%',
      bottom: '15%',
      containLabel: true,
    },
    xAxis: {
      type: 'category',
      data: ['Lines of Code'], // ✅ single shared category
      axisLabel: { color: '#ffffff' },
      axisLine: { lineStyle: { color: '#777' } },
    },
    yAxis: {
      type: 'value',
      axisLabel: { color: '#ffffff' },
      axisLine: { lineStyle: { color: '#777' } },
      splitLine: { lineStyle: { color: '#333' } },
    },
    series: languages.map((lang, idx) => ({
      name: lang, // ✅ legend entry = language name
      type: 'bar',
      barWidth: '25%', // ✅ smaller bar size
      label: {
        show: true,
        position: 'top',
        color: '#ffffff',
      },
      itemStyle: {
        color: colors[idx % colors.length],
      },
      emphasis: {
        itemStyle: {
          color: '#ffd54f', // ✅ highlight on hover
          borderColor: '#fff',
          borderWidth: 2,
          shadowBlur: 10,
          shadowColor: 'rgba(255,255,255,0.5)',
        },
      },
      data: [grouped[lang]], // ✅ one bar per language
    })),
  };
}
