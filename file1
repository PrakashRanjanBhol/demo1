import React, { useState, useMemo } from 'react';
import ReactECharts from 'echarts-for-react';

const ScatterChart = ({ response = [], cords = [] }) => {
  const defectTypes = useMemo(
    () => Array.from(new Set(response.map(d => d.defect_type))),
    [response]
  );

  const defectCategories = useMemo(
    () => Array.from(new Set(response.map(d => d.defect_category))),
    [response]
  );

  const [selectedType, setSelectedType] = useState(defectTypes[0] || '');

  const colorPalette = [
    '#91cc75', '#fac858', '#ee6666', '#73c0de',
    '#3ba272', '#fc8452', '#9a60b4', '#ea7ccc'
  ];

  const allKeys = [...defectTypes, ...defectCategories];
  const dynamicColorMap = {};
  allKeys.forEach((key, index) => {
    dynamicColorMap[key] = colorPalette[index % colorPalette.length];
  });

  // Scatter data for selected d_type
  const scatterSeries = {
    name: selectedType,
    type: 'scatter',
    data: response
      .filter(d => d.defect_type === selectedType)
      .map(d => [d.xcoord, d.ycoord]),
    symbolSize: 12,
    itemStyle: { color: dynamicColorMap[selectedType] },
    emphasis: { focus: 'series' }
  };

  // Line series for each d_category
  const lineSeries = defectCategories.map(category => {
    const categoryData = response
      .filter(d => d.defect_category === category)
      .map(d => [d.xcoord, d.ycoord])
      .sort((a, b) => a[0] - b[0]);

    return {
      name: category,
      type: 'line',
      data: categoryData,
      lineStyle: {
        width: 2,
        color: dynamicColorMap[category],
      },
      showSymbol: false,
      emphasis: { focus: 'series' }
    };
  });

  const option = {
    tooltip: {
      trigger: 'item',
      formatter: ({ seriesName, data }) => `${seriesName}<br/>X: ${data[0]}<br/>Y: ${data[1]}`
    },
    legend: {
      top: 10,
      left: 'center',
      type: 'scroll'
    },
    xAxis: {
      type: 'value',
      name: 'X Axis',
      nameTextStyle: { color: '#ccc' },
      axisLabel: { color: '#ccc' }
    },
    yAxis: {
      type: 'value',
      name: 'Y Axis',
      nameTextStyle: { color: '#ccc' },
      axisLabel: { color: '#ccc' }
    },
    series: [scatterSeries, ...lineSeries],
    backgroundColor: '#1f1f1f'
  };

  return (
    <div style={{ padding: '1rem', backgroundColor: '#1f1f1f', color: '#fff' }}>
      <label style={{ marginBottom: '0.5rem', display: 'block' }}>
        Select Defect Type:
      </label>
      <select
        value={selectedType}
        onChange={e => setSelectedType(e.target.value)}
        style={{
          padding: '0.5rem',
          borderRadius: '6px',
          marginBottom: '1rem',
          backgroundColor: '#333',
          color: '#fff',
          border: '1px solid #555'
        }}
      >
        {defectTypes.map(type => (
          <option key={type} value={type}>
            {type}
          </option>
        ))}
      </select>

      <ReactECharts option={option} style={{ height: 500, width: '100%' }} />
    </div>
  );
};

export default ScatterChart;
