@ViewChild('carouselContainer') carouselContainer!: ElementRef;

  carouselScrollPosition = 0;
  maxCarouselScroll = 0;
  showCarouselNav = false;

  cardWidth = 180; // Approximate width of each card in pixels
  gap = 12; // Gap between cards (0.75rem = 12px)
  visibleCards = 4;

  ngAfterViewInit() {
    setTimeout(() => {
      this.calculateCarouselDimensions();
    }, 100);

    // Recalculate on window resize
    window.addEventListener('resize', () => {
      this.calculateCarouselDimensions();
    });
  }

  calculateCarouselDimensions() {
    if (this.carouselContainer) {
      const container = this.carouselContainer.nativeElement;
      const totalCards = container.children.length;
      const containerWidth = container.offsetWidth;

      // Calculate actual card width from first card if available
      if (container.children.length > 0) {
        const firstCard = container.children[0] as HTMLElement;
        this.cardWidth = firstCard.offsetWidth;
      }

      const totalContentWidth = totalCards * (this.cardWidth + this.gap) - this.gap;

      this.showCarouselNav = totalContentWidth > containerWidth;
      this.maxCarouselScroll = Math.max(0, totalContentWidth - containerWidth);
    }
  }

  scrollCarousel(direction: 'prev' | 'next') {
    const scrollAmount = (this.cardWidth + this.gap) * this.visibleCards;
    const container = this.carouselContainer.nativeElement;

    if (direction === 'next') {
      this.carouselScrollPosition = Math.min(
        this.carouselScrollPosition + scrollAmount,
        this.maxCarouselScroll
      );
    } else {
      this.carouselScrollPosition = Math.max(
        this.carouselScrollPosition - scrollAmount,
        0
      );
    }

    container.scrollLeft = this.carouselScrollPosition;
  }












<div class="action-cards-carousel">
                    <button class="carousel-nav prev" (click)="scrollCarousel('prev')"
                        [disabled]="carouselScrollPosition <= 0" *ngIf="showCarouselNav">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <polyline points="15 18 9 12 15 6"></polyline>
                        </svg>
                    </button>

                    <div class="action-cards-wrapper" #carouselContainer>
                        <div class="action-card" [class.active]="activeTab === 'crs'" (click)="setActiveTab('crs')">
                            <div class="action-icon crs">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                    <polyline points="14 2 14 8 20 8"></polyline>
                                    <line x1="12" y1="18" x2="12" y2="12"></line>
                                    <line x1="9" y1="15" x2="15" y2="15"></line>
                                </svg>
                            </div>
                            <div class="action-content">
                                <h4>Create CRS</h4>
                                <p>Customer Requirements</p>
                            </div>
                        </div>

                        <div class="action-card" [class.active]="activeTab === 'srs'" (click)="setActiveTab('srs')">
                            <div class="action-icon srs">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                    <polyline points="14 2 14 8 20 8"></polyline>
                                    <line x1="16" y1="13" x2="8" y2="13"></line>
                                    <line x1="16" y1="17" x2="8" y2="17"></line>
                                    <polyline points="10 9 9 9 8 9"></polyline>
                                </svg>
                            </div>
                            <div class="action-content">
                                <h4>Create SRS</h4>
                                <p>System Requirements</p>
                            </div>
                        </div>

                        <div class="action-card" [class.active]="activeTab === 'task'" (click)="setActiveTab('task')">
                            <div class="action-icon task">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M9 11l3 3L22 4"></path>
                                    <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
                                </svg>
                            </div>
                            <div class="action-content">
                                <h4>Create Task</h4>
                                <p>Development task</p>
                            </div>
                        </div>

                        <div class="action-card" [class.active]="activeTab === 'unittest'"
                            (click)="setActiveTab('unittest')">
                            <div class="action-icon testcase">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="9 11 12 14 22 4"></polyline>
                                    <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path>
                                </svg>
                            </div>
                            <div class="action-content">
                                <h4>Create Test Case</h4>
                                <p>Quality assurance</p>
                            </div>
                        </div>

                        <!-- Add more cards as needed -->
                        <div class="action-card" [class.active]="activeTab === 'design'"
                            (click)="setActiveTab('design')">
                            <div class="action-icon crs">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <rect x="3" y="3" width="18" height="18" rx="2"></rect>
                                    <circle cx="8.5" cy="8.5" r="1.5"></circle>
                                    <path d="M21 15l-5-5L5 21"></path>
                                </svg>
                            </div>
                            <div class="action-content">
                                <h4>Create Design</h4>
                                <p>UI/UX Design</p>
                            </div>
                        </div>

                        <div class="action-card" [class.active]="activeTab === 'review'"
                            (click)="setActiveTab('review')">
                            <div class="action-icon srs">
                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                                    <path d="M9 13h6"></path>
                                    <path d="M9 17h6"></path>
                                </svg>
                            </div>
                            <div class="action-content">
                                <h4>Code Review</h4>
                                <p>Review changes</p>
                            </div>
                        </div>
                    </div>

                    <button class="carousel-nav next" (click)="scrollCarousel('next')"
                        [disabled]="carouselScrollPosition >= maxCarouselScroll" *ngIf="showCarouselNav">
                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <polyline points="9 18 15 12 9 6"></polyline>
                        </svg>
                    </button>
                </div>














.action-cards-carousel {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    position: relative;
    flex: 1;
    min-width: 0;
}

.action-cards-wrapper {
    display: flex;
    gap: 0.75rem;
    overflow-x: hidden;
    scroll-behavior: smooth;
    flex: 1;
    padding: 0.25rem 0;
    -ms-overflow-style: none;
    scrollbar-width: none;
}

.action-cards-wrapper::-webkit-scrollbar {
    display: none;
}

.action-card {
    display: flex;
    align-items: center;
    gap: 0.625rem;
    padding: 0.75rem 1rem;
    background: var(--sdlc-card-bg);
    border: 1px solid var(--sdlc-card-border);
    border-radius: 0.5rem;
    transition: all 0.2s ease;
    cursor: pointer;
    min-width: 180px;
    flex-shrink: 0;
}

.action-card:hover {
    background: var(--sdlc-hover-bg);
    border-color: rgba(102, 126, 234, 0.5);
    transform: translateY(-2px);
}

.action-card.active {
    background: linear-gradient(135deg, rgba(99, 102, 241, 0.2), rgba(139, 92, 246, 0.2));
    border-color: var(--sdlc-accent-violet);
}

.action-icon {
    width: 2rem;
    height: 2rem;
    border-radius: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    transition: all 0.2s ease;
}

.action-icon svg {
    width: 1rem;
    height: 1rem;
    stroke-width: 2;
}

.action-icon.crs {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.2) 0%, rgba(37, 99, 235, 0.2) 100%);
}

.action-icon.crs svg {
    stroke: var(--sdlc-accent-blue);
}

.action-card:hover .action-icon.crs,
.action-card.active .action-icon.crs {
    background: linear-gradient(135deg, rgba(59, 130, 246, 0.3) 0%, rgba(37, 99, 235, 0.3) 100%);
}

.action-icon.srs {
    background: linear-gradient(135deg, rgba(139, 92, 246, 0.2) 0%, rgba(124, 58, 237, 0.2) 100%);
}

.action-icon.srs svg {
    stroke: var(--sdlc-accent-purple);
}

.action-card:hover .action-icon.srs,
.action-card.active .action-icon.srs {
    background: linear-gradient(135deg, rgba(139, 92, 246, 0.3) 0%, rgba(124, 58, 237, 0.3) 100%);
}

.action-icon.task {
    background: linear-gradient(135deg, rgba(16, 185, 129, 0.2) 0%, rgba(5, 150, 105, 0.2) 100%);
}

.action-icon.task svg {
    stroke: var(--sdlc-accent-green);
}

.action-card:hover .action-icon.task,
.action-card.active .action-icon.task {
    background: linear-gradient(135deg, rgba(16, 185, 129, 0.3) 0%, rgba(5, 150, 105, 0.3) 100%);
}

.action-icon.testcase {
    background: linear-gradient(135deg, rgba(249, 115, 22, 0.2) 0%, rgba(234, 88, 12, 0.2) 100%);
}

.action-icon.testcase svg {
    stroke: var(--sdlc-accent-orange);
}

.action-card:hover .action-icon.testcase,
.action-card.active .action-icon.testcase {
    background: linear-gradient(135deg, rgba(249, 115, 22, 0.3) 0%, rgba(234, 88, 12, 0.3) 100%);
}

.action-content {
    display: flex;
    flex-direction: column;
    gap: 0.125rem;
}

.action-content h4 {
    font-size: 0.8125rem;
    font-weight: 600;
    color: var(--sdlc-text-primary);
    margin: 0;
    letter-spacing: -0.01em;
}

.action-content p {
    font-size: 0.6875rem;
    color: var(--sdlc-text-secondary);
    margin: 0;
    line-height: 1.3;
}

/* Carousel Navigation Buttons */
.carousel-nav {
    width: 32px;
    height: 32px;
    background: var(--sdlc-card-bg);
    border: 1px solid var(--sdlc-card-border);
    border-radius: 50%;
    color: var(--sdlc-text-primary);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s;
    flex-shrink: 0;
    padding: 0;
    z-index: 10;
}

.carousel-nav:hover:not(:disabled) {
    background: var(--sdlc-hover-bg);
    border-color: rgba(102, 126, 234, 0.5);
    transform: scale(1.1);
}

.carousel-nav:disabled {
    opacity: 0.3;
    cursor: not-allowed;
}

.carousel-nav svg {
    width: 18px;
    height: 18px;
}

/* Hide carousel in minimized mode */
.slide-container.minimized .action-cards-carousel {
    display: none;
}

